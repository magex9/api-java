### INPUT PARAMETERS ######################
parameters:
- name: application_name
  type: string

- name: environment
  type: string
  default: 'ut'
  values:
  - 'ut'
  - 'qa'
  - 'ua'
  - 'pr'

- name: sshEndpoint
  type: string


##########################################

steps:
      
- bash: | 
    
    
    application_package_root_dir="${PIPELINE_WORKSPACE}/${{parameters.application_name}}"
    echo "application_package_root_dir=${application_package_root_dir}"
    echo "##vso[task.setvariable variable=application_package_root_dir]${application_package_root_dir}"
        
    application_package_target_dir="${application_package_root_dir}/target"
    echo "application_package_target_dir=${application_package_target_dir}"

    #-----------------------------------------------------
    # BUILD Directory -> where we assemble all pieces to create a package    
    
    #echo "##vso[task.setvariable variable=application_package_build_dir]${application_package_build_dir}"
    application_package_build_dir=${PIPELINE_WORKSPACE}/build/${{parameters.application_name}}
    echo "application_package_build_dir=${application_package_build_dir}"

    #-----------------------------------------------------
    #Package Directory -> Where we put the final package
    echo "application_package_publish_dir=${PIPELINE_WORKSPACE}/publish/${{parameters.application_name}}/"
    echo "##vso[task.setvariable variable=application_package_publish_dir]${PIPELINE_WORKSPACE}/publish/${{parameters.application_name}}/"
    application_package_publish_dir=${PIPELINE_WORKSPACE}/publish/${{parameters.application_name}}

    
    config_dir=${application_package_root_dir}/config
    echo "config_dir=${config_dir}"
    source ${application_package_root_dir}/maven-archiver/pom.properties
    cat ${application_package_root_dir}/maven-archiver/pom.properties
    
    # Application Version (make it accessible from outside this script)
    echo "application_version=${version}"
    application_version=${version}
    #echo "##vso[task.setvariable variable=application_version]${version}"

    echo "application_package_name=${{parameters.application_name}}-${application_version}.tar.gz"
    application_package_name=${{parameters.application_name}}-${application_version}.tar.gz
    echo "##vso[task.setvariable variable=application_package_name]${{parameters.application_name}}-${application_version}.tar.gz"

    echo "application_package_publish_path=${application_package_publish_dir}/${application_package_name}"
    echo "##vso[task.setvariable variable=application_package_publish_path]${application_package_publish_dir}/${application_package_name}"
    application_package_publish_path=${application_package_publish_dir}/${application_package_name}
    
    application_config_dir=${application_package_build_dir}/config
    
    application_config_path=${application_config_dir}/application.cfg
    
    #-----------------------------------------------------
    #env      
    ls -la ${application_package_root_dir}
       
    mkdir -p ${application_package_publish_dir}
    mkdir -p ${application_package_build_dir}

    if [ ! -d ${application_config_dir} ];then
      mkdir -p ${application_config_dir}
    fi

    #setup server specific information
    echo "export SERVER_INTERNAL_IP=${SERVER_INTERNAL_IP}" >> ${application_config_path}
    echo "export SERVER_EXTERNAL_IP=${SERVER_EXTERNAL_IP}" >> ${application_config_path}
    echo "export SERVER_EXTERNAL_URL=${SERVER_EXTERNAL_URL}" >> ${application_config_path}
    echo "export APPLICATION_NAME=${{parameters.application_name}}" >> ${application_config_path}
    echo "export ENVIRONMENT=${{parameters.environment}}" >> ${application_config_path}
    echo "export SPRING_CONFIG_SERVER_URI=${CONFIG_SERVER_URI}" >> ${application_config_path}
    
    #copy jar files
    cp ${application_package_target_dir}/*.jar ${application_package_build_dir}/
    
    #copy configurations
    cp -r ${config_dir}/* ${application_config_dir}/

    tar -C ${application_package_build_dir}/../ -cvzf ${application_package_publish_path} ${{parameters.application_name}}
    ls -la ${application_package_publish_path}
    tar -tvzf ${application_package_publish_path}

  displayName: "Create application package" 
 
- task: CopyFilesOverSSH@0
  displayName: "Send package to server"
  inputs:
    sshEndpoint: ${{parameters.sshEndpoint}}
    sourceFolder: '$(application_package_publish_dir)/'
    contents: '$(application_package_name)'
    targetFolder: '/var/data/finuser/builds/'
    readyTimeout: '20000'
    failOnEmptySource: true

- task: SSH@0
  displayName: "DEBUG - Display builds directory"
  inputs:
    sshEndpoint: ${{parameters.sshEndpoint}}
    runOptions: 'commands'
    commands: 'ls -la /var/data/finuser/builds'
    readyTimeout: '20000'

#- script: |
#    echo $(application_package_name)
#    echo ${{variables.application_package_name}}
#    echo $[variables.application_package_name]
#  displayName: "testing"

- task: SSH@0
  displayName: Untar Application Package for ${{parameters.application_name}}
  inputs:
    sshEndpoint: ${{parameters.sshEndpoint}}
    runOptions: 'inline'
    inline: |
      echo "deploying package $(application_package_name) to ${{parameters.sshEndpoint}}"
      rm -rf /var/data/finuser/apps/${{parameters.application_name}} > /dev/null
      tar -C /var/data/finuser/apps/ -xvzf /var/data/finuser/builds/$(application_package_name)
    readyTimeout: '20000'
- task: SSH@0
  displayName: (Re)Start Application ${{parameters.application_name}}
  inputs:
    sshEndpoint: ${{parameters.sshEndpoint}}
    runOptions: 'inline'
    inline: |
      /var/data/finuser/apps/${{parameters.application_name}}/admin/service.sh restart
    readyTimeout: '20000'

{
  "ca.magex.crm.api.MagexCrmProfiles": {
    "name": "MagexCrmProfiles",
    "type": "class",
    "modifiers": ["public"],
    "fields": [
      {
        "name": "AUTH_EMBEDDED_JWT",
        "description": "Spring Security Setup Server Type",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "String"
      },
      {
        "name": "AUTH_REMOTE_JWT",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "String"
      },
      {
        "name": "CRM_AUTH",
        "description": "CRM Authentication Profile",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "String"
      },
      {
        "name": "CRM_NO_AUTH",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "String"
      },
      {
        "name": "CRM_DATASTORE_DECENTRALIZED",
        "description": "CRM Datastore Profile",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "String"
      },
      {
        "name": "CRM_DATASTORE_CENTRALIZED",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "String"
      }
    ]
  },
  "ca.magex.crm.api.authentication.CrmPasswordService": {
    "name": "CrmPasswordService",
    "imports": {"NotNull": "javax.validation.constraints"},
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "getEncodedPassword",
        "type": "String",
        "parameters": [{
          "name": "username",
          "type": "String",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "isTempPassword",
        "type": "boolean",
        "parameters": [{
          "name": "username",
          "type": "String",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "isExpiredPassword",
        "type": "boolean",
        "parameters": [{
          "name": "username",
          "type": "String",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "verifyPassword",
        "type": "boolean",
        "parameters": [
          {
            "name": "username",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "rawPassword",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "generateTemporaryPassword",
        "type": "String",
        "parameters": [{
          "name": "username",
          "type": "String",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "updatePassword",
        "parameters": [
          {
            "name": "username",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "encodedPassword",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      }
    ]
  },
  "ca.magex.crm.api.authentication.PasswordDetails": {
    "name": "PasswordDetails",
    "imports": {
      "Serializable": "java.io",
      "Date": "java.util",
      "Stack": "java.util",
      "SerializationUtils": "org.apache.commons.lang3",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [{
      "name": "PasswordDetails",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "cipherText",
          "type": "String"
        },
        {
          "name": "temporary",
          "type": "boolean"
        },
        {
          "name": "expiration",
          "type": "Date"
        }
      ],
      "body": "{\n    this.cipherText = new Stack<>();\n    this.cipherText.push(cipherText);\n    this.temporary = temporary;\n    this.expiration = expiration;\n}"
    }],
    "fields": [
      {
        "name": "cipherText",
        "modifiers": ["private"],
        "type": {
          "class": "Stack",
          "generics": ["String"]
        }
      },
      {
        "name": "temporary",
        "modifiers": ["private"]
      },
      {
        "name": "expiration",
        "modifiers": ["private"],
        "type": "Date"
      }
    ],
    "methods": [
      {
        "name": "isTemporary",
        "modifiers": ["public"],
        "type": "boolean",
        "body": "{\n    return temporary;\n}"
      },
      {
        "name": "getExpiration",
        "modifiers": ["public"],
        "type": "Date",
        "body": "{\n    return expiration;\n}"
      },
      {
        "name": "getCipherText",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return cipherText.peek();\n}"
      },
      {
        "name": "withPassword",
        "modifiers": ["public"],
        "type": "PasswordDetails",
        "parameters": [{
          "name": "cipherText",
          "type": "String"
        }],
        "body": "{\n    PasswordDetails details = SerializationUtils.clone(this);\n    details.cipherText.push(cipherText);\n    details.temporary = false;\n    details.expiration = null;\n    return details;\n}"
      },
      {
        "name": "withTemporaryPassword",
        "modifiers": ["public"],
        "type": "PasswordDetails",
        "parameters": [
          {
            "name": "cipherText",
            "type": "String"
          },
          {
            "name": "expiration",
            "type": "Date"
          }
        ],
        "body": "{\n    PasswordDetails details = SerializationUtils.clone(this);\n    details.cipherText.push(cipherText);\n    details.temporary = true;\n    details.expiration = expiration;\n    return details;\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.common.BusinessPosition": {
    "name": "BusinessPosition",
    "imports": {
      "Serializable": "java.io",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [{
      "name": "BusinessPosition",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "sector",
          "type": "String"
        },
        {
          "name": "unit",
          "type": "String"
        },
        {
          "name": "classification",
          "type": "String"
        }
      ],
      "body": "{\n    super();\n    this.sector = sector;\n    this.unit = unit;\n    this.classification = classification;\n}"
    }],
    "fields": [
      {
        "name": "sector",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "unit",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "classification",
        "modifiers": ["private"],
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "getSector",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return sector;\n}"
      },
      {
        "name": "withSector",
        "modifiers": ["public"],
        "type": "BusinessPosition",
        "parameters": [{
          "name": "sector",
          "type": "String"
        }],
        "body": "{\n    return new BusinessPosition(sector, unit, classification);\n}"
      },
      {
        "name": "getUnit",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return unit;\n}"
      },
      {
        "name": "withUnit",
        "modifiers": ["public"],
        "type": "BusinessPosition",
        "parameters": [{
          "name": "unit",
          "type": "String"
        }],
        "body": "{\n    return new BusinessPosition(sector, unit, classification);\n}"
      },
      {
        "name": "getClassification",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return classification;\n}"
      },
      {
        "name": "withClassification",
        "modifiers": ["public"],
        "type": "BusinessPosition",
        "parameters": [{
          "name": "classification",
          "type": "String"
        }],
        "body": "{\n    return new BusinessPosition(sector, unit, classification);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.common.Communication": {
    "name": "Communication",
    "imports": {
      "Serializable": "java.io",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [{
      "name": "Communication",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "jobTitle",
          "type": "String"
        },
        {
          "name": "language",
          "type": "String"
        },
        {
          "name": "email",
          "type": "String"
        },
        {
          "name": "homePhone",
          "type": "Telephone"
        },
        {
          "name": "faxNumber",
          "type": "String"
        }
      ],
      "body": "{\n    super();\n    this.jobTitle = jobTitle;\n    this.language = language;\n    this.email = email;\n    this.homePhone = homePhone;\n    this.faxNumber = faxNumber;\n}"
    }],
    "fields": [
      {
        "name": "jobTitle",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "language",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "email",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "homePhone",
        "modifiers": ["private"],
        "type": "Telephone"
      },
      {
        "name": "faxNumber",
        "modifiers": ["private"],
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "getJobTitle",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return jobTitle;\n}"
      },
      {
        "name": "withJobTitle",
        "modifiers": ["public"],
        "type": "Communication",
        "parameters": [{
          "name": "jobTitle",
          "type": "String"
        }],
        "body": "{\n    return new Communication(jobTitle, language, jobTitle, homePhone, faxNumber);\n}"
      },
      {
        "name": "getLanguage",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return language;\n}"
      },
      {
        "name": "withLanguage",
        "modifiers": ["public"],
        "type": "Communication",
        "parameters": [{
          "name": "language",
          "type": "String"
        }],
        "body": "{\n    return new Communication(jobTitle, language, jobTitle, homePhone, faxNumber);\n}"
      },
      {
        "name": "getEmail",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return email;\n}"
      },
      {
        "name": "withEmail",
        "modifiers": ["public"],
        "type": "Communication",
        "parameters": [{
          "name": "email",
          "type": "String"
        }],
        "body": "{\n    return new Communication(jobTitle, language, jobTitle, homePhone, faxNumber);\n}"
      },
      {
        "name": "getHomePhone",
        "modifiers": ["public"],
        "type": "Telephone",
        "body": "{\n    return homePhone;\n}"
      },
      {
        "name": "withHomePhone",
        "modifiers": ["public"],
        "type": "Communication",
        "parameters": [{
          "name": "homePhone",
          "type": "Telephone"
        }],
        "body": "{\n    return new Communication(jobTitle, language, jobTitle, homePhone, faxNumber);\n}"
      },
      {
        "name": "getFaxNumber",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return faxNumber;\n}"
      },
      {
        "name": "withFaxNumber",
        "modifiers": ["public"],
        "type": "Communication",
        "parameters": [{
          "name": "faxNumber",
          "type": "String"
        }],
        "body": "{\n    return new Communication(jobTitle, language, jobTitle, homePhone, faxNumber);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.common.MailingAddress": {
    "name": "MailingAddress",
    "imports": {
      "Serializable": "java.io",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [{
      "name": "MailingAddress",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "street",
          "type": "String"
        },
        {
          "name": "city",
          "type": "String"
        },
        {
          "name": "province",
          "type": "String"
        },
        {
          "name": "country",
          "type": "String"
        },
        {
          "name": "postalCode",
          "type": "String"
        }
      ],
      "body": "{\n    super();\n    this.street = street;\n    this.city = city;\n    this.province = province;\n    this.country = country;\n    this.postalCode = postalCode;\n}"
    }],
    "fields": [
      {
        "name": "street",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "city",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "province",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "country",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "postalCode",
        "modifiers": ["private"],
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "getStreet",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return street;\n}"
      },
      {
        "name": "withStreet",
        "modifiers": ["public"],
        "type": "MailingAddress",
        "parameters": [{
          "name": "street",
          "type": "String"
        }],
        "body": "{\n    return new MailingAddress(street, city, province, country, postalCode);\n}"
      },
      {
        "name": "getCity",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return city;\n}"
      },
      {
        "name": "withCity",
        "modifiers": ["public"],
        "type": "MailingAddress",
        "parameters": [{
          "name": "city",
          "type": "String"
        }],
        "body": "{\n    return new MailingAddress(street, city, province, country, postalCode);\n}"
      },
      {
        "name": "getProvince",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return province;\n}"
      },
      {
        "name": "withProvince",
        "modifiers": ["public"],
        "type": "MailingAddress",
        "parameters": [{
          "name": "province",
          "type": "String"
        }],
        "body": "{\n    return new MailingAddress(street, city, province, country, postalCode);\n}"
      },
      {
        "name": "getCountry",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return country;\n}"
      },
      {
        "name": "withCountry",
        "modifiers": ["public"],
        "type": "MailingAddress",
        "parameters": [{
          "name": "country",
          "type": "String"
        }],
        "body": "{\n    return new MailingAddress(street, city, province, country, postalCode);\n}"
      },
      {
        "name": "getPostalCode",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return postalCode;\n}"
      },
      {
        "name": "withPostalCode",
        "modifiers": ["public"],
        "type": "MailingAddress",
        "parameters": [{
          "name": "postalCode",
          "type": "String"
        }],
        "body": "{\n    return new MailingAddress(street, city, province, country, postalCode);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.common.PersonName": {
    "name": "PersonName",
    "imports": {
      "Serializable": "java.io",
      "StringUtils": "org.apache.commons.lang3",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [{
      "name": "PersonName",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "salutation",
          "type": "String"
        },
        {
          "name": "firstName",
          "type": "String"
        },
        {
          "name": "middleName",
          "type": "String"
        },
        {
          "name": "lastName",
          "type": "String"
        }
      ],
      "body": "{\n    super();\n    this.salutation = salutation;\n    this.firstName = firstName;\n    this.middleName = middleName;\n    this.lastName = lastName;\n    this.displayName = \"\";\n    if (StringUtils.isNotBlank(lastName))\n        displayName += lastName;\n    if (StringUtils.isNotBlank(firstName) && displayName.length() > 0)\n        displayName += \", \";\n    if (StringUtils.isNotBlank(firstName))\n        displayName += firstName;\n    if (StringUtils.isNotBlank(middleName) && displayName.length() > 0)\n        displayName += \" \";\n    if (StringUtils.isNotBlank(middleName))\n        displayName += middleName;\n}"
    }],
    "fields": [
      {
        "name": "salutation",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "firstName",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "middleName",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "lastName",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "displayName",
        "modifiers": ["private"],
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "getSalutation",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return salutation;\n}"
      },
      {
        "name": "withSalutation",
        "modifiers": ["public"],
        "type": "PersonName",
        "parameters": [{
          "name": "salutation",
          "type": "String"
        }],
        "body": "{\n    return new PersonName(salutation, firstName, middleName, lastName);\n}"
      },
      {
        "name": "getFirstName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return firstName;\n}"
      },
      {
        "name": "withFirstName",
        "modifiers": ["public"],
        "type": "PersonName",
        "parameters": [{
          "name": "firstName",
          "type": "String"
        }],
        "body": "{\n    return new PersonName(salutation, firstName, middleName, lastName);\n}"
      },
      {
        "name": "getMiddleName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return middleName;\n}"
      },
      {
        "name": "withMiddleName",
        "modifiers": ["public"],
        "type": "PersonName",
        "parameters": [{
          "name": "middleName",
          "type": "String"
        }],
        "body": "{\n    return new PersonName(salutation, firstName, middleName, lastName);\n}"
      },
      {
        "name": "getLastName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return lastName;\n}"
      },
      {
        "name": "withLastName",
        "modifiers": ["public"],
        "type": "PersonName",
        "parameters": [{
          "name": "lastName",
          "type": "String"
        }],
        "body": "{\n    return new PersonName(salutation, firstName, middleName, lastName);\n}"
      },
      {
        "name": "getDisplayName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return displayName;\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.common.Telephone": {
    "name": "Telephone",
    "imports": {
      "Serializable": "java.io",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [
      {
        "name": "Telephone",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "number",
            "type": "String"
          },
          {
            "name": "extension",
            "type": "String"
          }
        ],
        "body": "{\n    super();\n    this.number = number;\n    this.extension = extension;\n}"
      },
      {
        "name": "Telephone",
        "modifiers": ["public"],
        "parameters": [{
          "name": "number",
          "type": "String"
        }],
        "body": "{\n    super();\n    this.number = number;\n    this.extension = \"\";\n}"
      }
    ],
    "fields": [
      {
        "name": "number",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "extension",
        "modifiers": ["private"],
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "getNumber",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return number;\n}"
      },
      {
        "name": "getExtension",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return extension;\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.config.CrmConfigurer": {
    "name": "CrmConfigurer",
    "description": "Used to configure the Crm Subsystem\n\n@author Jonny",
    "imports": {
      "Bean": "org.springframework.context.annotation",
      "CrmPolicies": "ca.magex.crm.api.policies",
      "Crm": "ca.magex.crm.api.services"
    },
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "crm",
        "modifiers": ["public"],
        "type": "Crm",
        "annotations": [{"name": "Bean"}]
      },
      {
        "name": "crmPolicies",
        "modifiers": ["public"],
        "type": "CrmPolicies",
        "annotations": [{"name": "Bean"}]
      }
    ]
  },
  "ca.magex.crm.api.config.CrmConfigurerAdapter": {
    "name": "CrmConfigurerAdapter",
    "description": "Adapter to hide the common components of the CrmConfigurer\n\n@author Jonny",
    "imports": {
      "Autowired": "org.springframework.beans.factory.annotation",
      "CrmInitializationService": "ca.magex.crm.api.services",
      "CrmLocationService": "ca.magex.crm.api.services",
      "CrmLookupService": "ca.magex.crm.api.services",
      "CrmOrganizationService": "ca.magex.crm.api.services",
      "CrmPermissionService": "ca.magex.crm.api.services",
      "CrmPersonService": "ca.magex.crm.api.services",
      "CrmUserService": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": [
      "public",
      "abstract"
    ],
    "implements": ["CrmConfigurer"],
    "fields": [
      {
        "name": "initializationService",
        "modifiers": ["private"],
        "type": "CrmInitializationService"
      },
      {
        "name": "lookupService",
        "modifiers": ["private"],
        "type": "CrmLookupService"
      },
      {
        "name": "organizationService",
        "modifiers": ["private"],
        "type": "CrmOrganizationService"
      },
      {
        "name": "locationService",
        "modifiers": ["private"],
        "type": "CrmLocationService"
      },
      {
        "name": "personService",
        "modifiers": ["private"],
        "type": "CrmPersonService"
      },
      {
        "name": "userService",
        "modifiers": ["private"],
        "type": "CrmUserService"
      },
      {
        "name": "permissionService",
        "modifiers": ["private"],
        "type": "CrmPermissionService"
      }
    ],
    "methods": [
      {
        "name": "setInitializationService",
        "modifiers": ["public"],
        "annotations": [{"name": "Autowired"}],
        "parameters": [{
          "name": "initializationService",
          "type": "CrmInitializationService"
        }],
        "body": "{\n    this.initializationService = initializationService;\n}"
      },
      {
        "name": "getInitializationService",
        "modifiers": ["public"],
        "type": "CrmInitializationService",
        "body": "{\n    return initializationService;\n}"
      },
      {
        "name": "setLookupService",
        "modifiers": ["public"],
        "annotations": [{"name": "Autowired"}],
        "parameters": [{
          "name": "lookupService",
          "type": "CrmLookupService"
        }],
        "body": "{\n    this.lookupService = lookupService;\n}"
      },
      {
        "name": "getLookupService",
        "modifiers": ["public"],
        "type": "CrmLookupService",
        "body": "{\n    return lookupService;\n}"
      },
      {
        "name": "setOrganizationService",
        "modifiers": ["public"],
        "annotations": [{"name": "Autowired"}],
        "parameters": [{
          "name": "organizationService",
          "type": "CrmOrganizationService"
        }],
        "body": "{\n    this.organizationService = organizationService;\n}"
      },
      {
        "name": "getOrganizationService",
        "modifiers": ["public"],
        "type": "CrmOrganizationService",
        "body": "{\n    return organizationService;\n}"
      },
      {
        "name": "setLocationService",
        "modifiers": ["public"],
        "annotations": [{"name": "Autowired"}],
        "parameters": [{
          "name": "locationService",
          "type": "CrmLocationService"
        }],
        "body": "{\n    this.locationService = locationService;\n}"
      },
      {
        "name": "getLocationService",
        "modifiers": ["public"],
        "type": "CrmLocationService",
        "body": "{\n    return locationService;\n}"
      },
      {
        "name": "setPersonService",
        "modifiers": ["public"],
        "annotations": [{"name": "Autowired"}],
        "parameters": [{
          "name": "personService",
          "type": "CrmPersonService"
        }],
        "body": "{\n    this.personService = personService;\n}"
      },
      {
        "name": "getPersonService",
        "modifiers": ["public"],
        "type": "CrmPersonService",
        "body": "{\n    return personService;\n}"
      },
      {
        "name": "setUserService",
        "modifiers": ["public"],
        "annotations": [{"name": "Autowired"}],
        "parameters": [{
          "name": "userService",
          "type": "CrmUserService"
        }],
        "body": "{\n    this.userService = userService;\n}"
      },
      {
        "name": "getUserService",
        "modifiers": ["public"],
        "type": "CrmUserService",
        "body": "{\n    return userService;\n}"
      },
      {
        "name": "setPermissionService",
        "modifiers": ["public"],
        "annotations": [{"name": "Autowired"}],
        "parameters": [{
          "name": "permissionService",
          "type": "CrmPermissionService"
        }],
        "body": "{\n    this.permissionService = permissionService;\n}"
      },
      {
        "name": "getPermissionService",
        "modifiers": ["public"],
        "type": "CrmPermissionService",
        "body": "{\n    return permissionService;\n}"
      }
    ]
  },
  "ca.magex.crm.api.crm.LocationDetails": {
    "name": "LocationDetails",
    "imports": {
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "MailingAddress": "ca.magex.crm.api.common",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "extends": ["LocationSummary"],
    "constructors": [{
      "name": "LocationDetails",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "locationId",
          "type": "Identifier"
        },
        {
          "name": "organizationId",
          "type": "Identifier"
        },
        {
          "name": "status",
          "type": "Status"
        },
        {
          "name": "reference",
          "type": "String"
        },
        {
          "name": "displayName",
          "type": "String"
        },
        {
          "name": "address",
          "type": "MailingAddress"
        }
      ],
      "body": "{\n    super(locationId, organizationId, status, reference, displayName);\n    this.address = address;\n}"
    }],
    "fields": [{
      "name": "address",
      "modifiers": ["private"],
      "type": "MailingAddress"
    }],
    "methods": [
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "LocationDetails",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new LocationDetails(locationId, organizationId, status, reference, displayName, address);\n}"
      },
      {
        "name": "withReference",
        "modifiers": ["public"],
        "type": "LocationDetails",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "reference",
          "type": "String"
        }],
        "body": "{\n    return new LocationDetails(locationId, organizationId, status, reference, displayName, address);\n}"
      },
      {
        "name": "withDisplayName",
        "modifiers": ["public"],
        "type": "LocationDetails",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "displayName",
          "type": "String"
        }],
        "body": "{\n    return new LocationDetails(locationId, organizationId, status, reference, displayName, address);\n}"
      },
      {
        "name": "getAddress",
        "modifiers": ["public"],
        "type": "MailingAddress",
        "body": "{\n    return address;\n}"
      },
      {
        "name": "withAddress",
        "modifiers": ["public"],
        "type": "LocationDetails",
        "parameters": [{
          "name": "address",
          "type": "MailingAddress"
        }],
        "body": "{\n    return new LocationDetails(locationId, organizationId, status, reference, displayName, address);\n}"
      },
      {
        "name": "toSummary",
        "modifiers": ["public"],
        "type": "LocationSummary",
        "body": "{\n    return new LocationSummary(locationId, organizationId, status, reference, displayName);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.crm.LocationSummary": {
    "name": "LocationSummary",
    "imports": {
      "Serializable": "java.io",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [{
      "name": "LocationSummary",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "locationId",
          "type": "Identifier"
        },
        {
          "name": "organizationId",
          "type": "Identifier"
        },
        {
          "name": "status",
          "type": "Status"
        },
        {
          "name": "reference",
          "type": "String"
        },
        {
          "name": "displayName",
          "type": "String"
        }
      ],
      "body": "{\n    super();\n    this.locationId = locationId;\n    this.organizationId = organizationId;\n    this.status = status;\n    this.reference = reference;\n    this.displayName = displayName;\n}"
    }],
    "fields": [
      {
        "name": "locationId",
        "modifiers": ["protected"],
        "type": "Identifier"
      },
      {
        "name": "organizationId",
        "modifiers": ["protected"],
        "type": "Identifier"
      },
      {
        "name": "status",
        "modifiers": ["protected"],
        "type": "Status"
      },
      {
        "name": "reference",
        "modifiers": ["protected"],
        "type": "String"
      },
      {
        "name": "displayName",
        "modifiers": ["protected"],
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "getLocationId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return locationId;\n}"
      },
      {
        "name": "getOrganizationId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return organizationId;\n}"
      },
      {
        "name": "getStatus",
        "modifiers": ["public"],
        "type": "Status",
        "body": "{\n    return status;\n}"
      },
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "LocationSummary",
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new LocationSummary(locationId, organizationId, status, reference, displayName);\n}"
      },
      {
        "name": "getReference",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return reference;\n}"
      },
      {
        "name": "withReference",
        "modifiers": ["public"],
        "type": "LocationSummary",
        "parameters": [{
          "name": "reference",
          "type": "String"
        }],
        "body": "{\n    return new LocationSummary(locationId, organizationId, status, reference, displayName);\n}"
      },
      {
        "name": "getDisplayName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return displayName;\n}"
      },
      {
        "name": "withDisplayName",
        "modifiers": ["public"],
        "type": "LocationSummary",
        "parameters": [{
          "name": "displayName",
          "type": "String"
        }],
        "body": "{\n    return new LocationSummary(locationId, organizationId, status, reference, displayName);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.crm.OrganizationDetails": {
    "name": "OrganizationDetails",
    "imports": {
      "ArrayList": "java.util",
      "List": "java.util",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "extends": ["OrganizationSummary"],
    "constructors": [{
      "name": "OrganizationDetails",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "organizationId",
          "type": "Identifier"
        },
        {
          "name": "status",
          "type": "Status"
        },
        {
          "name": "displayName",
          "type": "String"
        },
        {
          "name": "mainLocationId",
          "type": "Identifier"
        },
        {
          "name": "mainContactId",
          "type": "Identifier"
        },
        {
          "name": "groups",
          "type": {
            "class": "List",
            "generics": ["String"]
          }
        }
      ],
      "body": "{\n    super(organizationId, status, displayName);\n    this.mainLocationId = mainLocationId;\n    this.mainContactId = mainContactId;\n    this.groups = new ArrayList<String>(groups);\n}"
    }],
    "fields": [
      {
        "name": "mainLocationId",
        "modifiers": ["private"],
        "type": "Identifier"
      },
      {
        "name": "mainContactId",
        "modifiers": ["private"],
        "type": "Identifier"
      },
      {
        "name": "groups",
        "modifiers": ["private"],
        "type": {
          "class": "List",
          "generics": ["String"]
        }
      }
    ],
    "methods": [
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "OrganizationDetails",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new OrganizationDetails(organizationId, status, displayName, mainLocationId, mainContactId, groups);\n}"
      },
      {
        "name": "withDisplayName",
        "modifiers": ["public"],
        "type": "OrganizationDetails",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "displayName",
          "type": "String"
        }],
        "body": "{\n    return new OrganizationDetails(organizationId, status, displayName, mainLocationId, mainContactId, groups);\n}"
      },
      {
        "name": "getMainLocationId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return mainLocationId;\n}"
      },
      {
        "name": "withMainLocationId",
        "modifiers": ["public"],
        "type": "OrganizationDetails",
        "parameters": [{
          "name": "mainLocationId",
          "type": "Identifier"
        }],
        "body": "{\n    return new OrganizationDetails(organizationId, status, displayName, mainLocationId, mainContactId, groups);\n}"
      },
      {
        "name": "getMainContactId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return mainContactId;\n}"
      },
      {
        "name": "withMainContactId",
        "modifiers": ["public"],
        "type": "OrganizationDetails",
        "parameters": [{
          "name": "mainContactId",
          "type": "Identifier"
        }],
        "body": "{\n    return new OrganizationDetails(organizationId, status, displayName, mainLocationId, mainContactId, groups);\n}"
      },
      {
        "name": "getGroups",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["String"]
        },
        "body": "{\n    return groups;\n}"
      },
      {
        "name": "withGroups",
        "modifiers": ["public"],
        "type": "OrganizationDetails",
        "parameters": [{
          "name": "groups",
          "type": {
            "class": "List",
            "generics": ["String"]
          }
        }],
        "body": "{\n    return new OrganizationDetails(organizationId, status, displayName, mainLocationId, mainContactId, groups);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.crm.OrganizationSummary": {
    "name": "OrganizationSummary",
    "imports": {
      "Serializable": "java.io",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [{
      "name": "OrganizationSummary",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "organizationId",
          "type": "Identifier"
        },
        {
          "name": "status",
          "type": "Status"
        },
        {
          "name": "displayName",
          "type": "String"
        }
      ],
      "body": "{\n    super();\n    this.organizationId = organizationId;\n    this.status = status;\n    this.displayName = displayName;\n}"
    }],
    "fields": [
      {
        "name": "organizationId",
        "modifiers": ["protected"],
        "type": "Identifier"
      },
      {
        "name": "status",
        "modifiers": ["protected"],
        "type": "Status"
      },
      {
        "name": "displayName",
        "modifiers": ["protected"],
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "getOrganizationId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return organizationId;\n}"
      },
      {
        "name": "getStatus",
        "modifiers": ["public"],
        "type": "Status",
        "body": "{\n    return status;\n}"
      },
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "OrganizationSummary",
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new OrganizationSummary(organizationId, status, displayName);\n}"
      },
      {
        "name": "getDisplayName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return displayName;\n}"
      },
      {
        "name": "withDisplayName",
        "modifiers": ["public"],
        "type": "OrganizationSummary",
        "parameters": [{
          "name": "displayName",
          "type": "String"
        }],
        "body": "{\n    return new OrganizationSummary(organizationId, status, displayName);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.crm.PersonDetails": {
    "name": "PersonDetails",
    "imports": {
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "BusinessPosition": "ca.magex.crm.api.common",
      "Communication": "ca.magex.crm.api.common",
      "MailingAddress": "ca.magex.crm.api.common",
      "PersonName": "ca.magex.crm.api.common",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "extends": ["PersonSummary"],
    "constructors": [{
      "name": "PersonDetails",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "personId",
          "type": "Identifier"
        },
        {
          "name": "organizationId",
          "type": "Identifier"
        },
        {
          "name": "status",
          "type": "Status"
        },
        {
          "name": "displayName",
          "type": "String"
        },
        {
          "name": "legalName",
          "type": "PersonName"
        },
        {
          "name": "address",
          "type": "MailingAddress"
        },
        {
          "name": "communication",
          "type": "Communication"
        },
        {
          "name": "position",
          "type": "BusinessPosition"
        }
      ],
      "body": "{\n    super(personId, organizationId, status, displayName);\n    this.legalName = legalName;\n    this.address = address;\n    this.communication = communication;\n    this.position = position;\n}"
    }],
    "fields": [
      {
        "name": "legalName",
        "modifiers": ["private"],
        "type": "PersonName"
      },
      {
        "name": "address",
        "modifiers": ["private"],
        "type": "MailingAddress"
      },
      {
        "name": "communication",
        "modifiers": ["private"],
        "type": "Communication"
      },
      {
        "name": "position",
        "modifiers": ["private"],
        "type": "BusinessPosition"
      }
    ],
    "methods": [
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "PersonDetails",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new PersonDetails(personId, organizationId, status, displayName, legalName, address, communication, position);\n}"
      },
      {
        "name": "withDisplayName",
        "modifiers": ["public"],
        "type": "PersonDetails",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "displayName",
          "type": "String"
        }],
        "body": "{\n    return new PersonDetails(personId, organizationId, status, displayName, legalName, address, communication, position);\n}"
      },
      {
        "name": "getLegalName",
        "modifiers": ["public"],
        "type": "PersonName",
        "body": "{\n    return legalName;\n}"
      },
      {
        "name": "withLegalName",
        "modifiers": ["public"],
        "type": "PersonDetails",
        "parameters": [{
          "name": "legalName",
          "type": "PersonName"
        }],
        "body": "{\n    return new PersonDetails(personId, organizationId, status, displayName, legalName, address, communication, position);\n}"
      },
      {
        "name": "getAddress",
        "modifiers": ["public"],
        "type": "MailingAddress",
        "body": "{\n    return address;\n}"
      },
      {
        "name": "withAddress",
        "modifiers": ["public"],
        "type": "PersonDetails",
        "parameters": [{
          "name": "address",
          "type": "MailingAddress"
        }],
        "body": "{\n    return new PersonDetails(personId, organizationId, status, displayName, legalName, address, communication, position);\n}"
      },
      {
        "name": "getCommunication",
        "modifiers": ["public"],
        "type": "Communication",
        "body": "{\n    return communication;\n}"
      },
      {
        "name": "withCommunication",
        "modifiers": ["public"],
        "type": "PersonDetails",
        "parameters": [{
          "name": "communication",
          "type": "Communication"
        }],
        "body": "{\n    return new PersonDetails(personId, organizationId, status, displayName, legalName, address, communication, position);\n}"
      },
      {
        "name": "getPosition",
        "modifiers": ["public"],
        "type": "BusinessPosition",
        "body": "{\n    return position;\n}"
      },
      {
        "name": "withPosition",
        "modifiers": ["public"],
        "type": "PersonDetails",
        "parameters": [{
          "name": "position",
          "type": "BusinessPosition"
        }],
        "body": "{\n    return new PersonDetails(personId, organizationId, status, displayName, legalName, address, communication, position);\n}"
      },
      {
        "name": "toSummary",
        "modifiers": ["public"],
        "type": "PersonSummary",
        "body": "{\n    return new PersonSummary(personId, organizationId, status, displayName);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.crm.PersonSummary": {
    "name": "PersonSummary",
    "imports": {
      "Serializable": "java.io",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [{
      "name": "PersonSummary",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "personId",
          "type": "Identifier"
        },
        {
          "name": "organizationId",
          "type": "Identifier"
        },
        {
          "name": "status",
          "type": "Status"
        },
        {
          "name": "displayName",
          "type": "String"
        }
      ],
      "body": "{\n    super();\n    this.personId = personId;\n    this.organizationId = organizationId;\n    this.status = status;\n    this.displayName = displayName;\n}"
    }],
    "fields": [
      {
        "name": "personId",
        "modifiers": ["protected"],
        "type": "Identifier"
      },
      {
        "name": "organizationId",
        "modifiers": ["protected"],
        "type": "Identifier"
      },
      {
        "name": "status",
        "modifiers": ["protected"],
        "type": "Status"
      },
      {
        "name": "displayName",
        "modifiers": ["protected"],
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "getPersonId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return personId;\n}"
      },
      {
        "name": "getOrganizationId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return organizationId;\n}"
      },
      {
        "name": "getStatus",
        "modifiers": ["public"],
        "type": "Status",
        "body": "{\n    return status;\n}"
      },
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "PersonSummary",
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new PersonSummary(personId, organizationId, status, displayName);\n}"
      },
      {
        "name": "getDisplayName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return displayName;\n}"
      },
      {
        "name": "withDisplayName",
        "modifiers": ["public"],
        "type": "PersonSummary",
        "parameters": [{
          "name": "displayName",
          "type": "String"
        }],
        "body": "{\n    return new PersonSummary(personId, organizationId, status, displayName);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.exceptions.ApiException": {
    "name": "ApiException",
    "imports": {"Crm": "ca.magex.crm.api.services"},
    "type": "class",
    "modifiers": ["public"],
    "extends": ["RuntimeException"],
    "constructors": [
      {
        "name": "ApiException",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "msg",
            "type": "String"
          },
          {
            "name": "e",
            "type": "Exception"
          },
          {
            "name": "associatedErrorCode",
            "type": "Integer"
          }
        ],
        "body": "{\n    super(msg, e);\n    this.associatedErrorCode = associatedErrorCode;\n}"
      },
      {
        "name": "ApiException",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "msg",
            "type": "String"
          },
          {
            "name": "e",
            "type": "Exception"
          }
        ],
        "body": "{\n    this(msg, e, 500);\n}"
      },
      {
        "name": "ApiException",
        "modifiers": ["public"],
        "parameters": [{
          "name": "msg",
          "type": "String"
        }],
        "body": "{\n    this(msg, null);\n}"
      }
    ],
    "fields": [{
      "name": "associatedErrorCode",
      "modifiers": ["private"],
      "type": "Integer"
    }],
    "methods": [{
      "name": "getErrorCode",
      "modifiers": ["public"],
      "type": "Integer",
      "body": "{\n    return associatedErrorCode;\n}"
    }]
  },
  "ca.magex.crm.api.exceptions.BadRequestException": {
    "name": "BadRequestException",
    "imports": {
      "IOException": "java.io",
      "OutputStream": "java.io",
      "Arrays": "java.util",
      "List": "java.util",
      "StringUtils": "org.apache.commons.lang3",
      "Crm": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system",
      "Message": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "extends": ["ApiException"],
    "constructors": [
      {
        "name": "BadRequestException",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "message",
            "type": "String"
          },
          {
            "name": "messages",
            "type": {
              "class": "List",
              "generics": ["Message"]
            }
          }
        ],
        "body": "{\n    super(\"Bad Request: \" + message);\n    this.messages = messages;\n}"
      },
      {
        "name": "BadRequestException",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "message",
            "type": "String"
          },
          {
            "name": "base",
            "type": "Identifier"
          },
          {
            "name": "type",
            "type": "String"
          },
          {
            "name": "path",
            "type": "String"
          },
          {
            "name": "reason",
            "type": "Localized"
          }
        ],
        "body": "{\n    this(message, Arrays.asList(new Message(base, type, path, reason)));\n}"
      }
    ],
    "fields": [{
      "name": "messages",
      "modifiers": ["private"],
      "type": {
        "class": "List",
        "generics": ["Message"]
      }
    }],
    "methods": [
      {
        "name": "getErrorCode",
        "modifiers": ["public"],
        "type": "Integer",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return 400;\n}"
      },
      {
        "name": "getMessages",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["Message"]
        },
        "body": "{\n    return messages;\n}"
      },
      {
        "name": "printMessages",
        "modifiers": ["public"],
        "exceptions": ["IOException"],
        "parameters": [{
          "name": "os",
          "type": "OutputStream"
        }],
        "body": "{\n    for (Message message : messages) {\n        os.write(message.toString().getBytes());\n    }\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return getMessage() + \"\\n\\t\" + StringUtils.join(messages, \"\\n\\t\");\n}"
      }
    ]
  },
  "ca.magex.crm.api.exceptions.DuplicateItemFoundException": {
    "name": "DuplicateItemFoundException",
    "imports": {"Crm": "ca.magex.crm.api.services"},
    "type": "class",
    "modifiers": ["public"],
    "extends": ["ApiException"],
    "constructors": [{
      "name": "DuplicateItemFoundException",
      "modifiers": ["public"],
      "parameters": [{
        "name": "uri",
        "type": "String"
      }],
      "body": "{\n    super(\"Duplicate item found found: \" + uri);\n}"
    }],
    "methods": [{
      "name": "getErrorCode",
      "modifiers": ["public"],
      "type": "Integer",
      "annotations": [{"name": "Override"}],
      "body": "{\n    return 404;\n}"
    }]
  },
  "ca.magex.crm.api.exceptions.ItemNotFoundException": {
    "name": "ItemNotFoundException",
    "imports": {"Crm": "ca.magex.crm.api.services"},
    "type": "class",
    "modifiers": ["public"],
    "extends": ["ApiException"],
    "constructors": [{
      "name": "ItemNotFoundException",
      "modifiers": ["public"],
      "parameters": [{
        "name": "uri",
        "type": "String"
      }],
      "body": "{\n    super(\"Item not found: \" + uri);\n}"
    }],
    "methods": [{
      "name": "getErrorCode",
      "modifiers": ["public"],
      "type": "Integer",
      "annotations": [{"name": "Override"}],
      "body": "{\n    return 404;\n}"
    }]
  },
  "ca.magex.crm.api.exceptions.PermissionDeniedException": {
    "name": "PermissionDeniedException",
    "imports": {"Crm": "ca.magex.crm.api.services"},
    "type": "class",
    "modifiers": ["public"],
    "extends": ["ApiException"],
    "constructors": [{
      "name": "PermissionDeniedException",
      "modifiers": ["public"],
      "parameters": [{
        "name": "uri",
        "type": "String"
      }],
      "body": "{\n    super(\"Permission denied: \" + uri);\n}"
    }],
    "methods": [{
      "name": "getErrorCode",
      "modifiers": ["public"],
      "type": "Integer",
      "annotations": [{"name": "Override"}],
      "body": "{\n    return 403;\n}"
    }]
  },
  "ca.magex.crm.api.exceptions.UnauthenticatedException": {
    "name": "UnauthenticatedException",
    "imports": {"Crm": "ca.magex.crm.api.services"},
    "type": "class",
    "modifiers": ["public"],
    "extends": ["ApiException"],
    "constructors": [{
      "name": "UnauthenticatedException",
      "modifiers": ["public"],
      "body": "{\n    super(\"Unauthenticated\");\n}"
    }],
    "methods": [{
      "name": "getErrorCode",
      "modifiers": ["public"],
      "type": "Integer",
      "annotations": [{"name": "Override"}],
      "body": "{\n    return 401;\n}"
    }]
  },
  "ca.magex.crm.api.filters.CrmFilter": {
    "name": "CrmFilter",
    "generics": ["T"],
    "imports": {
      "Serializable": "java.io",
      "Normalizer": "java.text",
      "Comparator": "java.util",
      "StringUtils": "org.apache.commons.lang3"
    },
    "type": "interface",
    "modifiers": ["public"],
    "extends": ["Serializable"],
    "methods": [
      {
        "name": "apply",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "instance",
          "type": "T"
        }]
      },
      {
        "name": "getComparator",
        "modifiers": [
          "default",
          "public"
        ],
        "type": {
          "class": "Comparator",
          "generics": ["T"]
        },
        "parameters": [{
          "name": "paging",
          "type": "Paging"
        }],
        "body": "{\n    return paging.new PagingComparator<T>();\n}"
      },
      {
        "name": "containsIgnoreCaseAndAccent",
        "modifiers": [
          "default",
          "public"
        ],
        "type": "boolean",
        "parameters": [
          {
            "name": "str",
            "type": "CharSequence"
          },
          {
            "name": "searchStr",
            "type": "CharSequence"
          }
        ],
        "body": "{\n    return StringUtils.containsIgnoreCase(normalize(str), normalize(searchStr));\n}"
      },
      {
        "name": "normalize",
        "modifiers": [
          "default",
          "public"
        ],
        "type": "String",
        "parameters": [{
          "name": "text",
          "type": "CharSequence"
        }],
        "body": "{\n    return Normalizer.normalize(text, Normalizer.Form.NFD).replaceAll(\"[^\\\\p{ASCII}]\", \"\");\n}"
      }
    ]
  },
  "ca.magex.crm.api.filters.GroupsFilter": {
    "name": "GroupsFilter",
    "imports": {
      "List": "java.util",
      "Map": "java.util",
      "StringUtils": "org.apache.commons.lang3",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Sort": "org.springframework.data.domain",
      "Order": "org.springframework.data.domain.Sort",
      "ApiException": "ca.magex.crm.api.exceptions",
      "Group": "ca.magex.crm.api.roles",
      "Crm": "ca.magex.crm.api.services",
      "Lang": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": [{
      "class": "CrmFilter",
      "generics": ["Group"]
    }],
    "constructors": [
      {
        "name": "GroupsFilter",
        "modifiers": ["public"],
        "body": "{\n    this(null, null, null, null);\n}"
      },
      {
        "name": "GroupsFilter",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "englishName",
            "type": "String"
          },
          {
            "name": "frenchName",
            "type": "String"
          },
          {
            "name": "code",
            "type": "String"
          },
          {
            "name": "status",
            "type": "Status"
          }
        ],
        "body": "{\n    this.englishName = englishName;\n    this.frenchName = frenchName;\n    this.code = code;\n    this.status = status;\n}"
      },
      {
        "name": "GroupsFilter",
        "modifiers": ["public"],
        "parameters": [{
          "name": "filterCriteria",
          "type": {
            "class": "Map",
            "generics": [
              "String",
              "Object"
            ]
          }
        }],
        "body": "{\n    try {\n        this.englishName = (String) filterCriteria.get(\"englishName\");\n        this.frenchName = (String) filterCriteria.get(\"frenchName\");\n        this.code = (String) filterCriteria.get(\"code\");\n        this.status = null;\n        if (filterCriteria.containsKey(\"status\") && StringUtils.isNotBlank((String) filterCriteria.get(\"status\"))) {\n            try {\n                this.status = Status.valueOf(StringUtils.upperCase((String) filterCriteria.get(\"status\")));\n            } catch (IllegalArgumentException e) {\n                throw new ApiException(\"Invalid status value '\" + filterCriteria.get(\"status\") + \"' expected one of {\" + StringUtils.join(Status.values(), \",\") + \"}\");\n            }\n        }\n    } catch (ClassCastException cce) {\n        throw new ApiException(\"Unable to instantiate groups filter\", cce);\n    }\n}"
      }
    ],
    "fields": [
      {
        "name": "SORT_OPTIONS",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": {
          "class": "List",
          "generics": ["Sort"]
        }
      },
      {
        "name": "englishName",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "frenchName",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "code",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "status",
        "modifiers": ["private"],
        "type": "Status"
      }
    ],
    "methods": [
      {
        "name": "getEnglishName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return englishName;\n}"
      },
      {
        "name": "getFrenchName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return frenchName;\n}"
      },
      {
        "name": "getCode",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return code;\n}"
      },
      {
        "name": "getStatus",
        "modifiers": ["public"],
        "type": "Status",
        "body": "{\n    return status;\n}"
      },
      {
        "name": "withEnglishName",
        "modifiers": ["public"],
        "type": "GroupsFilter",
        "parameters": [{
          "name": "englishName",
          "type": "String"
        }],
        "body": "{\n    return new GroupsFilter(englishName, frenchName, code, status);\n}"
      },
      {
        "name": "withFrenchName",
        "modifiers": ["public"],
        "type": "GroupsFilter",
        "parameters": [{
          "name": "frenchName",
          "type": "String"
        }],
        "body": "{\n    return new GroupsFilter(englishName, frenchName, code, status);\n}"
      },
      {
        "name": "withCode",
        "modifiers": ["public"],
        "type": "GroupsFilter",
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    return new GroupsFilter(englishName, frenchName, code, status);\n}"
      },
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "GroupsFilter",
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new GroupsFilter(englishName, frenchName, code, status);\n}"
      },
      {
        "name": "getSortOptions",
        "modifiers": [
          "public",
          "static"
        ],
        "type": {
          "class": "List",
          "generics": ["Sort"]
        },
        "body": "{\n    return SORT_OPTIONS;\n}"
      },
      {
        "name": "getDefaultSort",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Sort",
        "body": "{\n    return Sort.by(Order.asc(\"code\"));\n}"
      },
      {
        "name": "getDefaultPaging",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Paging",
        "body": "{\n    return new Paging(getDefaultSort());\n}"
      },
      {
        "name": "apply",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "instance",
          "type": "Group"
        }],
        "body": "{\n    return List.of(instance).stream().filter(g -> this.getCode() == null || StringUtils.equalsIgnoreCase(this.getCode(), g.getCode())).filter(g -> this.getEnglishName() == null || StringUtils.containsIgnoreCase(g.getName(Lang.ENGLISH), this.getEnglishName())).filter(g -> this.getFrenchName() == null || StringUtils.containsIgnoreCase(g.getName(Lang.FRENCH), this.getFrenchName())).filter(g -> this.getStatus() == null || this.getStatus().equals(g.getStatus())).findAny().isPresent();\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.filters.LocalizedFilter": {
    "name": "LocalizedFilter",
    "imports": {
      "List": "java.util",
      "Map": "java.util",
      "StringUtils": "org.apache.commons.lang3",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Sort": "org.springframework.data.domain",
      "Order": "org.springframework.data.domain.Sort",
      "Crm": "ca.magex.crm.api.services",
      "Lang": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": [{
      "class": "CrmFilter",
      "generics": ["Localized"]
    }],
    "constructors": [
      {
        "name": "LocalizedFilter",
        "modifiers": ["public"],
        "body": "{\n    this(null, null, null);\n}"
      },
      {
        "name": "LocalizedFilter",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "englishName",
            "type": "String"
          },
          {
            "name": "frenchName",
            "type": "String"
          },
          {
            "name": "code",
            "type": "String"
          }
        ],
        "body": "{\n    this.englishName = englishName;\n    this.frenchName = frenchName;\n    this.code = code;\n}"
      },
      {
        "name": "LocalizedFilter",
        "modifiers": ["public"],
        "parameters": [{
          "name": "filterCriteria",
          "type": {
            "class": "Map",
            "generics": [
              "String",
              "Object"
            ]
          }
        }],
        "body": "{\n    this.englishName = (String) filterCriteria.get(\"englishName\");\n    this.frenchName = (String) filterCriteria.get(\"frenchName\");\n    this.code = (String) filterCriteria.get(\"code\");\n}"
      }
    ],
    "fields": [
      {
        "name": "SORT_ENGLISH_ASC",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "Sort"
      },
      {
        "name": "SORT_ENGLISH_DESC",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "Sort"
      },
      {
        "name": "SORT_FRENCH_ASC",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "Sort"
      },
      {
        "name": "SORT_FRENCH_DESC",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "Sort"
      },
      {
        "name": "SORT_CODE_ASC",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "Sort"
      },
      {
        "name": "SORT_CODE_DESC",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "Sort"
      },
      {
        "name": "SORT_OPTIONS",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": {
          "class": "List",
          "generics": ["Sort"]
        }
      },
      {
        "name": "englishName",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "frenchName",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "code",
        "modifiers": ["private"],
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "getEnglishName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return englishName;\n}"
      },
      {
        "name": "getFrenchName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return frenchName;\n}"
      },
      {
        "name": "getCode",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return code;\n}"
      },
      {
        "name": "withEnglishName",
        "modifiers": ["public"],
        "type": "LocalizedFilter",
        "parameters": [{
          "name": "englishName",
          "type": "String"
        }],
        "body": "{\n    return new LocalizedFilter(englishName, frenchName, code);\n}"
      },
      {
        "name": "withFrenchName",
        "modifiers": ["public"],
        "type": "LocalizedFilter",
        "parameters": [{
          "name": "frenchName",
          "type": "String"
        }],
        "body": "{\n    return new LocalizedFilter(englishName, frenchName, code);\n}"
      },
      {
        "name": "withCode",
        "modifiers": ["public"],
        "type": "LocalizedFilter",
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    return new LocalizedFilter(englishName, frenchName, code);\n}"
      },
      {
        "name": "getSortOptions",
        "modifiers": [
          "public",
          "static"
        ],
        "type": {
          "class": "List",
          "generics": ["Sort"]
        },
        "body": "{\n    return SORT_OPTIONS;\n}"
      },
      {
        "name": "getDefaultSort",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Sort",
        "body": "{\n    return SORT_CODE_ASC;\n}"
      },
      {
        "name": "getDefaultPaging",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Paging",
        "body": "{\n    return new Paging(getDefaultSort());\n}"
      },
      {
        "name": "apply",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "instance",
          "type": "Localized"
        }],
        "body": "{\n    return List.of(instance).stream().filter(g -> this.getCode() == null || StringUtils.equalsIgnoreCase(this.getCode(), g.getCode())).filter(g -> this.getEnglishName() == null || StringUtils.containsIgnoreCase(g.getEnglishName(), this.getEnglishName())).filter(g -> this.getFrenchName() == null || StringUtils.containsIgnoreCase(g.getFrenchName(), this.getFrenchName())).findAny().isPresent();\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.filters.LocationsFilter": {
    "name": "LocationsFilter",
    "imports": {
      "List": "java.util",
      "Map": "java.util",
      "StringUtils": "org.apache.commons.lang3",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Sort": "org.springframework.data.domain",
      "Direction": "org.springframework.data.domain.Sort",
      "Order": "org.springframework.data.domain.Sort",
      "LocationSummary": "ca.magex.crm.api.crm",
      "ApiException": "ca.magex.crm.api.exceptions",
      "Crm": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": [{
      "class": "CrmFilter",
      "generics": ["LocationSummary"]
    }],
    "constructors": [
      {
        "name": "LocationsFilter",
        "modifiers": ["public"],
        "body": "{\n    this(null, null, null, null);\n}"
      },
      {
        "name": "LocationsFilter",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier"
          },
          {
            "name": "displayName",
            "type": "String"
          },
          {
            "name": "reference",
            "type": "String"
          },
          {
            "name": "status",
            "type": "Status"
          }
        ],
        "body": "{\n    this.organizationId = organizationId;\n    this.displayName = displayName;\n    this.reference = reference;\n    this.status = status;\n}"
      },
      {
        "name": "LocationsFilter",
        "modifiers": ["public"],
        "parameters": [{
          "name": "filterCriteria",
          "type": {
            "class": "Map",
            "generics": [
              "String",
              "Object"
            ]
          }
        }],
        "body": "{\n    try {\n        this.displayName = (String) filterCriteria.get(\"displayName\");\n        this.reference = (String) filterCriteria.get(\"reference\");\n        this.organizationId = filterCriteria.keySet().contains(\"organizationId\") ? new Identifier((String) filterCriteria.get(\"organizationId\")) : null;\n        this.status = null;\n        if (filterCriteria.containsKey(\"status\") && StringUtils.isNotBlank((String) filterCriteria.get(\"status\"))) {\n            try {\n                this.status = Status.valueOf(StringUtils.upperCase((String) filterCriteria.get(\"status\")));\n            } catch (IllegalArgumentException e) {\n                throw new ApiException(\"Invalid status value '\" + filterCriteria.get(\"status\") + \"' expected one of {\" + StringUtils.join(Status.values(), \",\") + \"}\");\n            }\n        }\n    } catch (ClassCastException cce) {\n        throw new ApiException(\"Unable to instantiate locations filter\", cce);\n    }\n}"
      }
    ],
    "fields": [
      {
        "name": "SORT_OPTIONS",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": {
          "class": "List",
          "generics": ["Sort"]
        }
      },
      {
        "name": "organizationId",
        "modifiers": ["private"],
        "type": "Identifier"
      },
      {
        "name": "displayName",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "reference",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "status",
        "modifiers": ["private"],
        "type": "Status"
      }
    ],
    "methods": [
      {
        "name": "getOrganizationId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return organizationId;\n}"
      },
      {
        "name": "getDisplayName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return displayName;\n}"
      },
      {
        "name": "getReference",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return reference;\n}"
      },
      {
        "name": "getStatus",
        "modifiers": ["public"],
        "type": "Status",
        "body": "{\n    return status;\n}"
      },
      {
        "name": "withOrganizationId",
        "modifiers": ["public"],
        "type": "LocationsFilter",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    return new LocationsFilter(organizationId, displayName, reference, status);\n}"
      },
      {
        "name": "withDisplayName",
        "modifiers": ["public"],
        "type": "LocationsFilter",
        "parameters": [{
          "name": "displayName",
          "type": "String"
        }],
        "body": "{\n    return new LocationsFilter(organizationId, displayName, reference, status);\n}"
      },
      {
        "name": "withReference",
        "modifiers": ["public"],
        "type": "LocationsFilter",
        "parameters": [{
          "name": "reference",
          "type": "String"
        }],
        "body": "{\n    return new LocationsFilter(organizationId, displayName, reference, status);\n}"
      },
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "LocationsFilter",
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new LocationsFilter(organizationId, displayName, reference, status);\n}"
      },
      {
        "name": "getSortOptions",
        "modifiers": [
          "public",
          "static"
        ],
        "type": {
          "class": "List",
          "generics": ["Sort"]
        },
        "body": "{\n    return SORT_OPTIONS;\n}"
      },
      {
        "name": "getDefaultSort",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Sort",
        "body": "{\n    return Sort.by(Direction.ASC, \"displayName\");\n}"
      },
      {
        "name": "getDefaultPaging",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Paging",
        "body": "{\n    return new Paging(getDefaultSort());\n}"
      },
      {
        "name": "apply",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "instance",
          "type": "LocationSummary"
        }],
        "body": "{\n    return List.of(instance).stream().filter(l -> this.getDisplayName() == null || StringUtils.containsIgnoreCase(l.getDisplayName(), this.getDisplayName())).filter(l -> this.getReference() == null || StringUtils.containsIgnoreCase(l.getReference(), this.getReference())).filter(l -> this.getStatus() == null || this.getStatus().equals(l.getStatus())).filter(l -> this.getOrganizationId() == null || this.getOrganizationId().equals(l.getOrganizationId())).findAny().isPresent();\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.filters.OrganizationsFilter": {
    "name": "OrganizationsFilter",
    "imports": {
      "List": "java.util",
      "Map": "java.util",
      "StringUtils": "org.apache.commons.lang3",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Sort": "org.springframework.data.domain",
      "Direction": "org.springframework.data.domain.Sort",
      "OrganizationDetails": "ca.magex.crm.api.crm",
      "ApiException": "ca.magex.crm.api.exceptions",
      "Crm": "ca.magex.crm.api.services",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": [{
      "class": "CrmFilter",
      "generics": ["OrganizationDetails"]
    }],
    "constructors": [
      {
        "name": "OrganizationsFilter",
        "modifiers": ["public"],
        "body": "{\n    this(null, null, null);\n}"
      },
      {
        "name": "OrganizationsFilter",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "displayName",
            "type": "String"
          },
          {
            "name": "status",
            "type": "Status"
          },
          {
            "name": "group",
            "type": "String"
          }
        ],
        "body": "{\n    this.displayName = displayName;\n    this.status = status;\n    this.group = group;\n}"
      },
      {
        "name": "OrganizationsFilter",
        "modifiers": ["public"],
        "parameters": [{
          "name": "filterCriteria",
          "type": {
            "class": "Map",
            "generics": [
              "String",
              "Object"
            ]
          }
        }],
        "body": "{\n    try {\n        this.displayName = (String) filterCriteria.get(\"displayName\");\n        this.status = null;\n        if (filterCriteria.containsKey(\"status\") && StringUtils.isNotBlank((String) filterCriteria.get(\"status\"))) {\n            try {\n                this.status = Status.valueOf(StringUtils.upperCase((String) filterCriteria.get(\"status\")));\n            } catch (IllegalArgumentException e) {\n                throw new ApiException(\"Invalid status value '\" + filterCriteria.get(\"status\") + \"' expected one of {\" + StringUtils.join(Status.values(), \",\") + \"}\");\n            }\n        }\n        this.group = (String) filterCriteria.get(\"group\");\n    } catch (ClassCastException cce) {\n        throw new ApiException(\"Unable to instantiate organizations filter\", cce);\n    }\n}"
      }
    ],
    "fields": [
      {
        "name": "SORT_OPTIONS",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": {
          "class": "List",
          "generics": ["Sort"]
        }
      },
      {
        "name": "displayName",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "status",
        "modifiers": ["private"],
        "type": "Status"
      },
      {
        "name": "group",
        "modifiers": ["private"],
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "getStatus",
        "modifiers": ["public"],
        "type": "Status",
        "body": "{\n    return status;\n}"
      },
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "OrganizationsFilter",
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new OrganizationsFilter(displayName, status, group);\n}"
      },
      {
        "name": "getDisplayName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return displayName;\n}"
      },
      {
        "name": "withDisplayName",
        "modifiers": ["public"],
        "type": "OrganizationsFilter",
        "parameters": [{
          "name": "displayName",
          "type": "String"
        }],
        "body": "{\n    return new OrganizationsFilter(displayName, status, group);\n}"
      },
      {
        "name": "getGroup",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return group;\n}"
      },
      {
        "name": "withGroup",
        "modifiers": ["public"],
        "type": "OrganizationsFilter",
        "parameters": [{
          "name": "group",
          "type": "String"
        }],
        "body": "{\n    return new OrganizationsFilter(displayName, status, group);\n}"
      },
      {
        "name": "getSortOptions",
        "modifiers": [
          "public",
          "static"
        ],
        "type": {
          "class": "List",
          "generics": ["Sort"]
        },
        "body": "{\n    return SORT_OPTIONS;\n}"
      },
      {
        "name": "getDefaultSort",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Sort",
        "body": "{\n    return Sort.by(Direction.ASC, \"displayName\");\n}"
      },
      {
        "name": "getDefaultPaging",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Paging",
        "body": "{\n    return new Paging(getDefaultSort());\n}"
      },
      {
        "name": "apply",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "instance",
          "type": "OrganizationDetails"
        }],
        "body": "{\n    return List.of(instance).stream().filter(g -> this.getGroup() == null || g.getGroups().contains(this.getGroup())).filter(g -> this.getDisplayName() == null || containsIgnoreCaseAndAccent(g.getDisplayName(), this.getDisplayName())).filter(g -> this.getStatus() == null || this.getStatus().equals(g.getStatus())).findAny().isPresent();\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.filters.PageBuilder": {
    "name": "PageBuilder",
    "imports": {
      "Serializable": "java.io",
      "Collections": "java.util",
      "List": "java.util",
      "FilteredPage": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "methods": [{
      "name": "buildPageFor",
      "modifiers": [
        "public",
        "static"
      ],
      "type": {
        "class": "FilteredPage",
        "generics": ["T"]
      },
      "generics": ["T"],
      "parameters": [
        {
          "name": "filter",
          "type": "Serializable"
        },
        {
          "name": "items",
          "type": {
            "class": "List",
            "generics": ["T"]
          }
        },
        {
          "name": "paging",
          "type": "Paging"
        }
      ],
      "body": "{\n    int fromIndex = (int) paging.getOffset();\n    if (fromIndex > items.size()) {\n        return new FilteredPage<T>(filter, paging, Collections.emptyList(), items.size());\n    }\n    int toIndex = fromIndex + paging.getPageSize();\n    if (toIndex > items.size() - 1) {\n        toIndex = items.size();\n    }\n    return new FilteredPage<T>(filter, paging, items.subList(fromIndex, toIndex), items.size());\n}"
    }]
  },
  "ca.magex.crm.api.filters.Paging": {
    "name": "Paging",
    "imports": {
      "Serializable": "java.io",
      "Collator": "java.text",
      "Comparator": "java.util",
      "Iterator": "java.util",
      "Locale": "java.util",
      "PropertyUtilsBean": "org.apache.commons.beanutils",
      "StringUtils": "org.apache.commons.lang3",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "LoggerFactory": "org.slf4j",
      "Pageable": "org.springframework.data.domain",
      "Sort": "org.springframework.data.domain",
      "Order": "org.springframework.data.domain.Sort",
      "ApiException": "ca.magex.crm.api.exceptions",
      "Crm": "ca.magex.crm.api.services",
      "Lang": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": [
      "Pageable",
      "Serializable"
    ],
    "constructors": [
      {
        "name": "Paging",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "pageNumber",
            "type": "int"
          },
          {
            "name": "pageSize",
            "type": "int"
          },
          {
            "name": "sort",
            "type": "Sort"
          }
        ],
        "body": "{\n    super();\n    // if we ask for a page before 1, return the first page\n    this.pageNumber = (pageNumber < 1 ? 1 : pageNumber);\n    this.pageSize = pageSize;\n    this.sort = sort;\n    /* calculate the offset */\n    this.offset = this.pageSize * (this.pageNumber - 1);\n}"
      },
      {
        "name": "Paging",
        "modifiers": ["public"],
        "parameters": [{
          "name": "sort",
          "type": "Sort"
        }],
        "body": "{\n    this(1, 10, sort);\n}"
      }
    ],
    "fields": [
      {
        "name": "offset",
        "modifiers": ["private"]
      },
      {
        "name": "pageSize",
        "modifiers": ["private"]
      },
      {
        "name": "pageNumber",
        "modifiers": ["private"]
      },
      {
        "name": "sort",
        "modifiers": ["private"],
        "type": "Sort"
      }
    ],
    "methods": [
      {
        "name": "singleInstance",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Paging",
        "body": "{\n    return new Paging(1, 1, Sort.unsorted());\n}"
      },
      {
        "name": "getPageNumber",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return pageNumber;\n}"
      },
      {
        "name": "withPageNumber",
        "modifiers": ["public"],
        "type": "Paging",
        "parameters": [{
          "name": "pageNumber",
          "type": "int"
        }],
        "body": "{\n    return new Paging(pageNumber, pageSize, sort);\n}"
      },
      {
        "name": "getPageSize",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return pageSize;\n}"
      },
      {
        "name": "withPageSize",
        "modifiers": ["public"],
        "type": "Paging",
        "parameters": [{
          "name": "pageSize",
          "type": "int"
        }],
        "body": "{\n    return new Paging(pageNumber, pageSize, sort);\n}"
      },
      {
        "name": "allItems",
        "modifiers": ["public"],
        "type": "Paging",
        "body": "{\n    return new Paging(1, Integer.MAX_VALUE, sort);\n}"
      },
      {
        "name": "getOffset",
        "modifiers": ["public"],
        "type": "long",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return offset;\n}"
      },
      {
        "name": "getSort",
        "modifiers": ["public"],
        "type": "Sort",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return sort;\n}"
      },
      {
        "name": "withSort",
        "modifiers": ["public"],
        "type": "Paging",
        "parameters": [{
          "name": "sort",
          "type": "Sort"
        }],
        "body": "{\n    return new Paging(pageNumber, pageSize, sort);\n}"
      },
      {
        "name": "hasPrevious",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return getPageNumber() > 1;\n}"
      },
      {
        "name": "next",
        "modifiers": ["public"],
        "type": "Paging",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return new Paging(getPageNumber() + 1, getPageSize(), getSort());\n}"
      },
      {
        "name": "previousOrFirst",
        "modifiers": ["public"],
        "type": "Paging",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return new Paging(getPageNumber() - 1, getPageSize(), getSort());\n}"
      },
      {
        "name": "first",
        "modifiers": ["public"],
        "type": "Paging",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return new Paging(1, getPageSize(), getSort());\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.filters.PersonsFilter": {
    "name": "PersonsFilter",
    "imports": {
      "List": "java.util",
      "Map": "java.util",
      "StringUtils": "org.apache.commons.lang3",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Sort": "org.springframework.data.domain",
      "Direction": "org.springframework.data.domain.Sort",
      "Order": "org.springframework.data.domain.Sort",
      "PersonSummary": "ca.magex.crm.api.crm",
      "ApiException": "ca.magex.crm.api.exceptions",
      "Crm": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": [{
      "class": "CrmFilter",
      "generics": ["PersonSummary"]
    }],
    "constructors": [
      {
        "name": "PersonsFilter",
        "modifiers": ["public"],
        "body": "{\n    this(null, null, null);\n}"
      },
      {
        "name": "PersonsFilter",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier"
          },
          {
            "name": "displayName",
            "type": "String"
          },
          {
            "name": "status",
            "type": "Status"
          }
        ],
        "body": "{\n    this.organizationId = organizationId;\n    this.displayName = displayName;\n    this.status = status;\n}"
      },
      {
        "name": "PersonsFilter",
        "modifiers": ["public"],
        "parameters": [{
          "name": "filterCriteria",
          "type": {
            "class": "Map",
            "generics": [
              "String",
              "Object"
            ]
          }
        }],
        "body": "{\n    try {\n        this.displayName = (String) filterCriteria.get(\"displayName\");\n        this.organizationId = filterCriteria.containsKey(\"organizationId\") ? new Identifier((String) filterCriteria.get(\"organizationId\")) : null;\n        this.status = null;\n        if (filterCriteria.containsKey(\"status\") && StringUtils.isNotBlank((String) filterCriteria.get(\"status\"))) {\n            try {\n                this.status = Status.valueOf(StringUtils.upperCase((String) filterCriteria.get(\"status\")));\n            } catch (IllegalArgumentException e) {\n                throw new ApiException(\"Invalid status value '\" + filterCriteria.get(\"status\") + \"' expected one of {\" + StringUtils.join(Status.values(), \",\") + \"}\");\n            }\n        }\n    } catch (ClassCastException cce) {\n        throw new ApiException(\"Unable to instantiate persons filter\", cce);\n    }\n}"
      }
    ],
    "fields": [
      {
        "name": "SORT_OPTIONS",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": {
          "class": "List",
          "generics": ["Sort"]
        }
      },
      {
        "name": "organizationId",
        "modifiers": ["private"],
        "type": "Identifier"
      },
      {
        "name": "displayName",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "status",
        "modifiers": ["private"],
        "type": "Status"
      }
    ],
    "methods": [
      {
        "name": "getOrganizationId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return organizationId;\n}"
      },
      {
        "name": "getStatus",
        "modifiers": ["public"],
        "type": "Status",
        "body": "{\n    return status;\n}"
      },
      {
        "name": "getDisplayName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return displayName;\n}"
      },
      {
        "name": "withOrganizationId",
        "modifiers": ["public"],
        "type": "PersonsFilter",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    return new PersonsFilter(organizationId, displayName, status);\n}"
      },
      {
        "name": "withDisplayName",
        "modifiers": ["public"],
        "type": "PersonsFilter",
        "parameters": [{
          "name": "displayName",
          "type": "String"
        }],
        "body": "{\n    return new PersonsFilter(organizationId, displayName, status);\n}"
      },
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "PersonsFilter",
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new PersonsFilter(organizationId, displayName, status);\n}"
      },
      {
        "name": "getSortOptions",
        "modifiers": [
          "public",
          "static"
        ],
        "type": {
          "class": "List",
          "generics": ["Sort"]
        },
        "body": "{\n    return SORT_OPTIONS;\n}"
      },
      {
        "name": "getDefaultSort",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Sort",
        "body": "{\n    return Sort.by(Direction.ASC, \"displayName\");\n}"
      },
      {
        "name": "getDefaultPaging",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Paging",
        "body": "{\n    return new Paging(getDefaultSort());\n}"
      },
      {
        "name": "apply",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "instance",
          "type": "PersonSummary"
        }],
        "body": "{\n    return List.of(instance).stream().filter(p -> this.getDisplayName() == null || StringUtils.containsIgnoreCase(p.getDisplayName(), this.getDisplayName())).filter(p -> this.getStatus() == null || this.getStatus().equals(p.getStatus())).filter(p -> this.getOrganizationId() == null || this.getOrganizationId().equals(p.getOrganizationId())).findAny().isPresent();\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.filters.RolesFilter": {
    "name": "RolesFilter",
    "imports": {
      "List": "java.util",
      "Map": "java.util",
      "StringUtils": "org.apache.commons.lang3",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Sort": "org.springframework.data.domain",
      "Direction": "org.springframework.data.domain.Sort",
      "Order": "org.springframework.data.domain.Sort",
      "ApiException": "ca.magex.crm.api.exceptions",
      "Role": "ca.magex.crm.api.roles",
      "Crm": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Lang": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": [{
      "class": "CrmFilter",
      "generics": ["Role"]
    }],
    "constructors": [
      {
        "name": "RolesFilter",
        "modifiers": ["public"],
        "body": "{\n    this(null, null, null, null, null);\n}"
      },
      {
        "name": "RolesFilter",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "groupId",
            "type": "Identifier"
          },
          {
            "name": "englishName",
            "type": "String"
          },
          {
            "name": "frenchName",
            "type": "String"
          },
          {
            "name": "code",
            "type": "String"
          },
          {
            "name": "status",
            "type": "Status"
          }
        ],
        "body": "{\n    this.groupId = groupId;\n    this.englishName = englishName;\n    this.frenchName = frenchName;\n    this.code = code;\n    this.status = status;\n}"
      },
      {
        "name": "RolesFilter",
        "modifiers": ["public"],
        "parameters": [{
          "name": "filterCriteria",
          "type": {
            "class": "Map",
            "generics": [
              "String",
              "Object"
            ]
          }
        }],
        "body": "{\n    try {\n        this.groupId = filterCriteria.containsKey(\"groupId\") ? new Identifier((String) filterCriteria.get(\"groupId\")) : null;\n        this.englishName = (String) filterCriteria.get(\"englishName\");\n        this.frenchName = (String) filterCriteria.get(\"frenchName\");\n        this.code = (String) filterCriteria.get(\"code\");\n        this.status = null;\n        if (filterCriteria.containsKey(\"status\") && StringUtils.isNotBlank((String) filterCriteria.get(\"status\"))) {\n            try {\n                this.status = Status.valueOf(StringUtils.upperCase((String) filterCriteria.get(\"status\")));\n            } catch (IllegalArgumentException e) {\n                throw new ApiException(\"Invalid status value '\" + filterCriteria.get(\"status\") + \"' expected one of {\" + StringUtils.join(Status.values(), \",\") + \"}\");\n            }\n        }\n    } catch (ClassCastException cce) {\n        throw new ApiException(\"Unable to instantiate roles filter\", cce);\n    }\n}"
      }
    ],
    "fields": [
      {
        "name": "SORT_OPTIONS",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": {
          "class": "List",
          "generics": ["Sort"]
        }
      },
      {
        "name": "groupId",
        "modifiers": ["private"],
        "type": "Identifier"
      },
      {
        "name": "englishName",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "frenchName",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "code",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "status",
        "modifiers": ["private"],
        "type": "Status"
      }
    ],
    "methods": [
      {
        "name": "getGroupId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return groupId;\n}"
      },
      {
        "name": "getEnglishName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return englishName;\n}"
      },
      {
        "name": "getFrenchName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return frenchName;\n}"
      },
      {
        "name": "getCode",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return code;\n}"
      },
      {
        "name": "getStatus",
        "modifiers": ["public"],
        "type": "Status",
        "body": "{\n    return status;\n}"
      },
      {
        "name": "withGroupId",
        "modifiers": ["public"],
        "type": "RolesFilter",
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    return new RolesFilter(groupId, englishName, frenchName, code, status);\n}"
      },
      {
        "name": "withEnglishName",
        "modifiers": ["public"],
        "type": "RolesFilter",
        "parameters": [{
          "name": "englishName",
          "type": "String"
        }],
        "body": "{\n    return new RolesFilter(groupId, englishName, frenchName, code, status);\n}"
      },
      {
        "name": "withFrenchName",
        "modifiers": ["public"],
        "type": "RolesFilter",
        "parameters": [{
          "name": "frenchName",
          "type": "String"
        }],
        "body": "{\n    return new RolesFilter(groupId, englishName, frenchName, code, status);\n}"
      },
      {
        "name": "withCode",
        "modifiers": ["public"],
        "type": "RolesFilter",
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    return new RolesFilter(groupId, englishName, frenchName, code, status);\n}"
      },
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "RolesFilter",
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new RolesFilter(groupId, englishName, frenchName, code, status);\n}"
      },
      {
        "name": "getSortOptions",
        "modifiers": [
          "public",
          "static"
        ],
        "type": {
          "class": "List",
          "generics": ["Sort"]
        },
        "body": "{\n    return SORT_OPTIONS;\n}"
      },
      {
        "name": "getDefaultSort",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Sort",
        "body": "{\n    return Sort.by(Direction.ASC, \"code\");\n}"
      },
      {
        "name": "getDefaultPaging",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Paging",
        "body": "{\n    return new Paging(getDefaultSort());\n}"
      },
      {
        "name": "apply",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "instance",
          "type": "Role"
        }],
        "body": "{\n    return List.of(instance).stream().filter(r -> this.getGroupId() == null || this.getGroupId().equals(r.getGroupId())).filter(r -> this.getCode() == null || StringUtils.equalsIgnoreCase(this.getCode(), r.getCode())).filter(r -> this.getEnglishName() == null || StringUtils.containsIgnoreCase(r.getName(Lang.ENGLISH), this.getEnglishName())).filter(r -> this.getFrenchName() == null || StringUtils.containsIgnoreCase(r.getName(Lang.FRENCH), this.getFrenchName())).filter(r -> this.getStatus() == null || this.getStatus().equals(r.getStatus())).findAny().isPresent();\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.filters.UsersFilter": {
    "name": "UsersFilter",
    "imports": {
      "List": "java.util",
      "Map": "java.util",
      "StringUtils": "org.apache.commons.lang3",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Sort": "org.springframework.data.domain",
      "Direction": "org.springframework.data.domain.Sort",
      "Order": "org.springframework.data.domain.Sort",
      "ApiException": "ca.magex.crm.api.exceptions",
      "User": "ca.magex.crm.api.roles",
      "Crm": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": [{
      "class": "CrmFilter",
      "generics": ["User"]
    }],
    "constructors": [
      {
        "name": "UsersFilter",
        "modifiers": ["public"],
        "body": "{\n    this(null, null, null, null, null);\n}"
      },
      {
        "name": "UsersFilter",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier"
          },
          {
            "name": "personId",
            "type": "Identifier"
          },
          {
            "name": "status",
            "type": "Status"
          },
          {
            "name": "username",
            "type": "String"
          },
          {
            "name": "role",
            "type": "String"
          }
        ],
        "body": "{\n    this.organizationId = organizationId;\n    this.personId = personId;\n    this.status = status;\n    this.username = username;\n    this.role = role;\n}"
      },
      {
        "name": "UsersFilter",
        "modifiers": ["public"],
        "parameters": [{
          "name": "filterCriteria",
          "type": {
            "class": "Map",
            "generics": [
              "String",
              "Object"
            ]
          }
        }],
        "body": "{\n    try {\n        this.personId = filterCriteria.containsKey(\"personId\") ? new Identifier((String) filterCriteria.get(\"personId\")) : null;\n        this.organizationId = filterCriteria.containsKey(\"organizationId\") ? new Identifier((String) filterCriteria.get(\"organizationId\")) : null;\n        this.role = (String) filterCriteria.get(\"role\");\n        this.username = (String) filterCriteria.get(\"username\");\n        this.status = null;\n        if (filterCriteria.containsKey(\"status\") && StringUtils.isNotBlank((String) filterCriteria.get(\"status\"))) {\n            try {\n                this.status = Status.valueOf(StringUtils.upperCase((String) filterCriteria.get(\"status\")));\n            } catch (IllegalArgumentException e) {\n                throw new ApiException(\"Invalid status value '\" + filterCriteria.get(\"status\") + \"' expected one of {\" + StringUtils.join(Status.values(), \",\") + \"}\");\n            }\n        }\n    } catch (ClassCastException cce) {\n        throw new ApiException(\"Unable to instantiate users filter\", cce);\n    }\n}"
      }
    ],
    "fields": [
      {
        "name": "SORT_OPTIONS",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": {
          "class": "List",
          "generics": ["Sort"]
        }
      },
      {
        "name": "organizationId",
        "modifiers": ["private"],
        "type": "Identifier"
      },
      {
        "name": "personId",
        "modifiers": ["private"],
        "type": "Identifier"
      },
      {
        "name": "status",
        "modifiers": ["private"],
        "type": "Status"
      },
      {
        "name": "username",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "role",
        "modifiers": ["private"],
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "getPersonId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return personId;\n}"
      },
      {
        "name": "withPersonId",
        "modifiers": ["public"],
        "type": "UsersFilter",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    return new UsersFilter(organizationId, personId, status, username, role);\n}"
      },
      {
        "name": "getOrganizationId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return organizationId;\n}"
      },
      {
        "name": "withOrganizationId",
        "modifiers": ["public"],
        "type": "UsersFilter",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    return new UsersFilter(organizationId, personId, status, username, role);\n}"
      },
      {
        "name": "getStatus",
        "modifiers": ["public"],
        "type": "Status",
        "body": "{\n    return status;\n}"
      },
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "UsersFilter",
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new UsersFilter(organizationId, personId, status, username, role);\n}"
      },
      {
        "name": "getUsername",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return username;\n}"
      },
      {
        "name": "withUsername",
        "modifiers": ["public"],
        "type": "UsersFilter",
        "parameters": [{
          "name": "username",
          "type": "String"
        }],
        "body": "{\n    return new UsersFilter(organizationId, personId, status, username, role);\n}"
      },
      {
        "name": "getRole",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return role;\n}"
      },
      {
        "name": "withRole",
        "modifiers": ["public"],
        "type": "UsersFilter",
        "parameters": [{
          "name": "role",
          "type": "String"
        }],
        "body": "{\n    return new UsersFilter(organizationId, personId, status, username, role);\n}"
      },
      {
        "name": "getSortOptions",
        "modifiers": [
          "public",
          "static"
        ],
        "type": {
          "class": "List",
          "generics": ["Sort"]
        },
        "body": "{\n    return SORT_OPTIONS;\n}"
      },
      {
        "name": "getDefaultSort",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Sort",
        "body": "{\n    return Sort.by(Direction.ASC, \"username\");\n}"
      },
      {
        "name": "getDefaultPaging",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Paging",
        "body": "{\n    return new Paging(getDefaultSort());\n}"
      },
      {
        "name": "apply",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "instance",
          "type": "User"
        }],
        "body": "{\n    return List.of(instance).stream().filter(u -> this.getUsername() == null || StringUtils.containsIgnoreCase(u.getUsername(), this.getUsername())).filter(u -> this.getRole() == null || u.getRoles().contains(this.getRole())).filter(u -> this.getStatus() == null || this.getStatus().equals(u.getStatus())).filter(u -> this.getPersonId() == null || this.getPersonId().equals(u.getPerson().getPersonId())).filter(u -> this.getOrganizationId() == null || this.getOrganizationId().equals(u.getPerson().getOrganizationId())).findAny().isPresent();\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.lookup.BusinessClassification": {
    "name": "BusinessClassification",
    "imports": {
      "Locale": "java.util",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services",
      "Lang": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "extends": ["Localized"],
    "implements": ["CrmLookupItem"],
    "constructors": [{
      "name": "BusinessClassification",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "code",
          "type": "String"
        },
        {
          "name": "english",
          "type": "String"
        },
        {
          "name": "french",
          "type": "String"
        }
      ],
      "body": "{\n    super(code, english, french);\n}"
    }],
    "methods": [
      {
        "name": "getCode",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return get(Lang.ROOT);\n}"
      },
      {
        "name": "getName",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locale",
          "type": "Locale"
        }],
        "body": "{\n    return get(locale);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.lookup.BusinessSector": {
    "name": "BusinessSector",
    "imports": {
      "Locale": "java.util",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services",
      "Lang": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "extends": ["Localized"],
    "implements": ["CrmLookupItem"],
    "constructors": [{
      "name": "BusinessSector",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "code",
          "type": "String"
        },
        {
          "name": "english",
          "type": "String"
        },
        {
          "name": "french",
          "type": "String"
        }
      ],
      "body": "{\n    super(code, english, french);\n}"
    }],
    "methods": [
      {
        "name": "getCode",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return get(Lang.ROOT);\n}"
      },
      {
        "name": "getName",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locale",
          "type": "Locale"
        }],
        "body": "{\n    return get(locale);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.lookup.BusinessUnit": {
    "name": "BusinessUnit",
    "imports": {
      "Locale": "java.util",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services",
      "Lang": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "extends": ["Localized"],
    "implements": ["CrmLookupItem"],
    "constructors": [{
      "name": "BusinessUnit",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "code",
          "type": "String"
        },
        {
          "name": "english",
          "type": "String"
        },
        {
          "name": "french",
          "type": "String"
        }
      ],
      "body": "{\n    super(code, english, french);\n}"
    }],
    "methods": [
      {
        "name": "getCode",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return get(Lang.ROOT);\n}"
      },
      {
        "name": "getName",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locale",
          "type": "Locale"
        }],
        "body": "{\n    return get(locale);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.lookup.Country": {
    "name": "Country",
    "imports": {
      "Locale": "java.util",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services",
      "Lang": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "extends": ["Localized"],
    "implements": ["CrmLookupItem"],
    "constructors": [{
      "name": "Country",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "code",
          "type": "String"
        },
        {
          "name": "english",
          "type": "String"
        },
        {
          "name": "french",
          "type": "String"
        }
      ],
      "body": "{\n    super(code, english, french);\n}"
    }],
    "methods": [
      {
        "name": "getCode",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return get(Lang.ROOT);\n}"
      },
      {
        "name": "getName",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locale",
          "type": "Locale"
        }],
        "body": "{\n    return get(locale);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.lookup.CrmLookupItem": {
    "name": "CrmLookupItem",
    "imports": {
      "Serializable": "java.io",
      "Locale": "java.util"
    },
    "type": "interface",
    "modifiers": ["public"],
    "extends": ["Serializable"],
    "methods": [
      {
        "name": "getCode",
        "modifiers": ["public"],
        "type": "String"
      },
      {
        "name": "getName",
        "modifiers": ["public"],
        "type": "String",
        "parameters": [{
          "name": "locale",
          "type": "Locale"
        }]
      },
      {
        "name": "getParent",
        "modifiers": ["default"],
        "type": "CrmLookupItem",
        "body": "{\n    return null;\n}"
      },
      {
        "name": "hasParent",
        "modifiers": ["default"],
        "type": "boolean",
        "body": "{\n    return getParent() == null;\n}"
      }
    ]
  },
  "ca.magex.crm.api.lookup.Language": {
    "name": "Language",
    "imports": {
      "Locale": "java.util",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services",
      "Lang": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "extends": ["Localized"],
    "implements": ["CrmLookupItem"],
    "constructors": [{
      "name": "Language",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "code",
          "type": "String"
        },
        {
          "name": "english",
          "type": "String"
        },
        {
          "name": "french",
          "type": "String"
        }
      ],
      "body": "{\n    super(code, english, french);\n}"
    }],
    "methods": [
      {
        "name": "getCode",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return get(Lang.ROOT);\n}"
      },
      {
        "name": "getName",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locale",
          "type": "Locale"
        }],
        "body": "{\n    return get(locale);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.lookup.Province": {
    "name": "Province",
    "imports": {
      "Locale": "java.util",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services",
      "Lang": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "extends": ["Localized"],
    "implements": ["CrmLookupItem"],
    "constructors": [{
      "name": "Province",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "country",
          "type": "Country"
        },
        {
          "name": "code",
          "type": "String"
        },
        {
          "name": "english",
          "type": "String"
        },
        {
          "name": "french",
          "type": "String"
        }
      ],
      "body": "{\n    super(code, english, french);\n    this.country = country;\n}"
    }],
    "fields": [{
      "name": "country",
      "modifiers": ["private"],
      "type": "Country"
    }],
    "methods": [
      {
        "name": "getCode",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return get(Lang.ROOT);\n}"
      },
      {
        "name": "getName",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locale",
          "type": "Locale"
        }],
        "body": "{\n    return get(locale);\n}"
      },
      {
        "name": "getParent",
        "modifiers": ["public"],
        "type": "Country",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return country;\n}"
      },
      {
        "name": "hasParent",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return true;\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.lookup.Salutation": {
    "name": "Salutation",
    "imports": {
      "Locale": "java.util",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services",
      "Lang": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "extends": ["Localized"],
    "implements": ["CrmLookupItem"],
    "constructors": [{
      "name": "Salutation",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "code",
          "type": "String"
        },
        {
          "name": "english",
          "type": "String"
        },
        {
          "name": "french",
          "type": "String"
        }
      ],
      "body": "{\n    super(code, english, french);\n}"
    }],
    "methods": [
      {
        "name": "getCode",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return get(Lang.ROOT);\n}"
      },
      {
        "name": "getName",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locale",
          "type": "Locale"
        }],
        "body": "{\n    return get(locale);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.observer.CrmDataObserver": {
    "name": "CrmDataObserver",
    "imports": {"Identifier": "ca.magex.crm.api.system"},
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "groupUpdate",
        "type": "CrmDataObserver",
        "parameters": [
          {
            "name": "timestamp",
            "type": "Long"
          },
          {
            "name": "groupCode",
            "type": "String"
          }
        ]
      },
      {
        "name": "roleUpdate",
        "type": "CrmDataObserver",
        "parameters": [
          {
            "name": "timestamp",
            "type": "Long"
          },
          {
            "name": "roleCode",
            "type": "String"
          }
        ]
      },
      {
        "name": "organizationUpdate",
        "type": "CrmDataObserver",
        "parameters": [
          {
            "name": "timestamp",
            "type": "Long"
          },
          {
            "name": "organizationId",
            "type": "Identifier"
          }
        ]
      },
      {
        "name": "locationUpdate",
        "type": "CrmDataObserver",
        "parameters": [
          {
            "name": "timestamp",
            "type": "Long"
          },
          {
            "name": "locationId",
            "type": "Identifier"
          }
        ]
      },
      {
        "name": "personUpdate",
        "type": "CrmDataObserver",
        "parameters": [
          {
            "name": "timestamp",
            "type": "Long"
          },
          {
            "name": "personId",
            "type": "Identifier"
          }
        ]
      }
    ]
  },
  "ca.magex.crm.api.policies.CrmLocationPolicy": {
    "name": "CrmLocationPolicy",
    "imports": {"Identifier": "ca.magex.crm.api.system"},
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "canCreateLocationForOrganization",
        "type": "boolean",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canViewLocation",
        "type": "boolean",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canUpdateLocation",
        "type": "boolean",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canEnableLocation",
        "type": "boolean",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canDisableLocation",
        "type": "boolean",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }]
      }
    ]
  },
  "ca.magex.crm.api.policies.CrmLookupPolicy": {
    "name": "CrmLookupPolicy",
    "imports": {"Locale": "java.util"},
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "canViewStatusLookup",
        "type": "boolean",
        "parameters": [
          {
            "name": "StatusLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ]
      },
      {
        "name": "canViewCountryLookup",
        "type": "boolean",
        "parameters": [
          {
            "name": "CountryLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ]
      },
      {
        "name": "canViewProvinceLookup",
        "type": "boolean",
        "parameters": [
          {
            "name": "countryLookup",
            "type": "String"
          },
          {
            "name": "provinceLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ]
      },
      {
        "name": "canViewLanguageLookup",
        "type": "boolean",
        "parameters": [
          {
            "name": "languageLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ]
      },
      {
        "name": "canViewSalutationLookup",
        "type": "boolean",
        "parameters": [
          {
            "name": "salutationLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ]
      },
      {
        "name": "canViewBusinessSectorLookup",
        "type": "boolean",
        "parameters": [
          {
            "name": "sectorLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ]
      },
      {
        "name": "canViewBusinessUnitLookup",
        "type": "boolean",
        "parameters": [
          {
            "name": "unitLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ]
      },
      {
        "name": "canViewBusinessClassificationLookup",
        "type": "boolean",
        "parameters": [
          {
            "name": "classificationLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ]
      }
    ]
  },
  "ca.magex.crm.api.policies.CrmOrganizationPolicy": {
    "name": "CrmOrganizationPolicy",
    "imports": {"Identifier": "ca.magex.crm.api.system"},
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "canCreateOrganization",
        "type": "boolean"
      },
      {
        "name": "canViewOrganization",
        "type": "boolean",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canUpdateOrganization",
        "type": "boolean",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canEnableOrganization",
        "type": "boolean",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canDisableOrganization",
        "type": "boolean",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }]
      }
    ]
  },
  "ca.magex.crm.api.policies.CrmPermissionPolicy": {
    "name": "CrmPermissionPolicy",
    "imports": {"Identifier": "ca.magex.crm.api.system"},
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "canCreateGroup",
        "type": "boolean"
      },
      {
        "name": "canViewGroup",
        "type": "boolean",
        "parameters": [{
          "name": "group",
          "type": "String"
        }]
      },
      {
        "name": "canViewGroup",
        "type": "boolean",
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canUpdateGroup",
        "type": "boolean",
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canEnableGroup",
        "type": "boolean",
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canDisableGroup",
        "type": "boolean",
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canCreateRole",
        "type": "boolean",
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canViewRoles",
        "type": "boolean"
      },
      {
        "name": "canViewRole",
        "type": "boolean",
        "parameters": [{
          "name": "code",
          "type": "String"
        }]
      },
      {
        "name": "canViewRole",
        "type": "boolean",
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canUpdateRole",
        "type": "boolean",
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canEnableRole",
        "type": "boolean",
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canDisableRole",
        "type": "boolean",
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }]
      }
    ]
  },
  "ca.magex.crm.api.policies.CrmPersonPolicy": {
    "name": "CrmPersonPolicy",
    "imports": {"Identifier": "ca.magex.crm.api.system"},
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "canCreatePersonForOrganization",
        "type": "boolean",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canViewPerson",
        "type": "boolean",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canUpdatePerson",
        "type": "boolean",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canEnablePerson",
        "type": "boolean",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canDisablePerson",
        "type": "boolean",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }]
      }
    ]
  },
  "ca.magex.crm.api.policies.CrmPolicies": {
    "name": "CrmPolicies",
    "type": "interface",
    "modifiers": ["public"],
    "extends": [
      "CrmLookupPolicy",
      "CrmOrganizationPolicy",
      "CrmLocationPolicy",
      "CrmPersonPolicy",
      "CrmUserPolicy",
      "CrmPermissionPolicy"
    ]
  },
  "ca.magex.crm.api.policies.CrmUserPolicy": {
    "name": "CrmUserPolicy",
    "imports": {"Identifier": "ca.magex.crm.api.system"},
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "canCreateUserForPerson",
        "type": "boolean",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canViewUser",
        "type": "boolean",
        "parameters": [{
          "name": "username",
          "type": "String"
        }]
      },
      {
        "name": "canViewUser",
        "type": "boolean",
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canUpdateUserPassword",
        "type": "boolean",
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canUpdateUserRole",
        "type": "boolean",
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canEnableUser",
        "type": "boolean",
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }]
      },
      {
        "name": "canDisableUser",
        "type": "boolean",
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }]
      }
    ]
  },
  "ca.magex.crm.api.policies.authenticated.AuthenticatedLocationPolicy": {
    "name": "AuthenticatedLocationPolicy",
    "imports": {
      "CRM_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
      "ORG_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
      "CrmLocationPolicy": "ca.magex.crm.api.policies",
      "BasicLocationPolicy": "ca.magex.crm.api.policies.basic",
      "CrmAuthenticationService": "ca.magex.crm.api.services",
      "CrmLocationService": "ca.magex.crm.api.services",
      "CrmOrganizationService": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["CrmLocationPolicy"],
    "constructors": [{
      "name": "AuthenticatedLocationPolicy",
      "description": "Authenticated Location Policy handles roles and association checks required for policy approval\n\n@param auth\n@param organizations\n@param locations\n@param userService",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "auth",
          "type": "CrmAuthenticationService"
        },
        {
          "name": "organizations",
          "type": "CrmOrganizationService"
        },
        {
          "name": "locations",
          "type": "CrmLocationService"
        }
      ],
      "body": "{\n    this.auth = auth;\n    this.locations = locations;\n    this.delegate = new BasicLocationPolicy(organizations, locations);\n}"
    }],
    "fields": [
      {
        "name": "auth",
        "modifiers": ["private"],
        "type": "CrmAuthenticationService"
      },
      {
        "name": "delegate",
        "modifiers": ["private"],
        "type": "CrmLocationPolicy"
      },
      {
        "name": "locations",
        "modifiers": ["private"],
        "type": "CrmLocationService"
      }
    ],
    "methods": [
      {
        "name": "canCreateLocationForOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canCreateLocationForOrganization(organizationId)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* if the current user is associated with the organization, then return true if they are an RE Admin */\n    if (auth.getOrganizationId().equals(organizationId)) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user doesn't belong to the organization that this location is associated with */\n    return false;\n}"
      },
      {
        "name": "canViewLocation",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canViewLocation(locationId)) {\n        return false;\n    }\n    /* if the user is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure this location is associated with the organization the current user is associated with */\n    return auth.getOrganizationId().equals(locations.findLocationSummary(locationId).getOrganizationId());\n}"
      },
      {
        "name": "canUpdateLocation",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canUpdateLocation(locationId)) {\n        return false;\n    }\n    /* if the user is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure this location is associated with the organization the current user is associated with, then return true if they are an RE Admin */\n    if (auth.getOrganizationId().equals(locations.findLocationSummary(locationId).getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user doesn't belong to the organization that this location is associated with */\n    return false;\n}"
      },
      {
        "name": "canEnableLocation",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canEnableLocation(locationId)) {\n        return false;\n    }\n    /* if the user is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure this location is associated with the organization the current user is associated with, then return true if they are an RE Admin */\n    if (auth.getOrganizationId().equals(locations.findLocationSummary(locationId).getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user doesn't belong to the organization that this location is associated with */\n    return false;\n}"
      },
      {
        "name": "canDisableLocation",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canDisableLocation(locationId)) {\n        return false;\n    }\n    /* if the user is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure this location is associated with the organization the current user is associated with, then return true if they are an RE Admin */\n    if (auth.getOrganizationId().equals(locations.findLocationSummary(locationId).getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user doesn't belong to the organization that this location is associated with */\n    return false;\n}"
      }
    ]
  },
  "ca.magex.crm.api.policies.authenticated.AuthenticatedLookupPolicy": {
    "name": "AuthenticatedLookupPolicy",
    "imports": {
      "Locale": "java.util",
      "CrmLookupPolicy": "ca.magex.crm.api.policies",
      "BasicLookupPolicy": "ca.magex.crm.api.policies.basic",
      "CrmAuthenticationService": "ca.magex.crm.api.services",
      "CrmLookupService": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["CrmLookupPolicy"],
    "constructors": [{
      "name": "AuthenticatedLookupPolicy",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "auth",
          "type": "CrmAuthenticationService"
        },
        {
          "name": "lookups",
          "type": "CrmLookupService"
        }
      ],
      "body": "{\n    this.auth = auth;\n    this.delegate = new BasicLookupPolicy(lookups);\n}"
    }],
    "fields": [
      {
        "name": "auth",
        "modifiers": ["private"],
        "type": "CrmAuthenticationService",
        "annotations": [{"name": "SuppressWarnings"}]
      },
      {
        "name": "delegate",
        "modifiers": ["private"],
        "type": "CrmLookupPolicy"
      }
    ],
    "methods": [
      {
        "name": "canViewStatusLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "StatusLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return delegate.canViewStatusLookup(StatusLookup, locale);\n}"
      },
      {
        "name": "canViewCountryLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "CountryLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return delegate.canViewCountryLookup(CountryLookup, locale);\n}"
      },
      {
        "name": "canViewProvinceLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "countryLookup",
            "type": "String"
          },
          {
            "name": "provinceLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return delegate.canViewProvinceLookup(countryLookup, provinceLookup, locale);\n}"
      },
      {
        "name": "canViewLanguageLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "languageLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return delegate.canViewLanguageLookup(languageLookup, locale);\n}"
      },
      {
        "name": "canViewSalutationLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "salutationLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return delegate.canViewSalutationLookup(salutationLookup, locale);\n}"
      },
      {
        "name": "canViewBusinessSectorLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "sectorLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return delegate.canViewBusinessSectorLookup(sectorLookup, locale);\n}"
      },
      {
        "name": "canViewBusinessUnitLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "unitLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return delegate.canViewBusinessUnitLookup(unitLookup, locale);\n}"
      },
      {
        "name": "canViewBusinessClassificationLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "classificationLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return delegate.canViewBusinessClassificationLookup(classificationLookup, locale);\n}"
      }
    ]
  },
  "ca.magex.crm.api.policies.authenticated.AuthenticatedOrganizationPolicy": {
    "name": "AuthenticatedOrganizationPolicy",
    "imports": {
      "CRM_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
      "ORG_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
      "CrmOrganizationPolicy": "ca.magex.crm.api.policies",
      "BasicOrganizationPolicy": "ca.magex.crm.api.policies.basic",
      "CrmAuthenticationService": "ca.magex.crm.api.services",
      "CrmOrganizationService": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["CrmOrganizationPolicy"],
    "constructors": [{
      "name": "AuthenticatedOrganizationPolicy",
      "description": "Authenticated Organization Policy handles roles and association checks required for policy approval\n\n@param auth\n@param organizations\n@param locationService\n@param userService",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "auth",
          "type": "CrmAuthenticationService"
        },
        {
          "name": "organizations",
          "type": "CrmOrganizationService"
        }
      ],
      "body": "{\n    this.auth = auth;\n    this.delegate = new BasicOrganizationPolicy(organizations);\n}"
    }],
    "fields": [
      {
        "name": "auth",
        "modifiers": ["private"],
        "type": "CrmAuthenticationService"
      },
      {
        "name": "delegate",
        "modifiers": ["private"],
        "type": "CrmOrganizationPolicy"
      }
    ],
    "methods": [
      {
        "name": "canCreateOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "body": "{\n    if (!delegate.canCreateOrganization()) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    return auth.isUserInRole(CRM_ADMIN);\n}"
      },
      {
        "name": "canViewOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canViewOrganization(organizationId)) {\n        return false;\n    }\n    /* if the currentUser is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* return true if the person is associated with the organization */\n    return auth.getOrganizationId().equals(organizationId);\n}"
      },
      {
        "name": "canUpdateOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canUpdateOrganization(organizationId)) {\n        return false;\n    }\n    /* if the currentUser is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure the current user is associated with the organization, and return true if they are an RE Admin */\n    if (auth.getOrganizationId().equals(organizationId)) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user is not associated with the organization */\n    return false;\n}"
      },
      {
        "name": "canEnableOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canEnableOrganization(organizationId)) {\n        return false;\n    }\n    /* only CRM_ADMIN can enable an organization */\n    return auth.isUserInRole(CRM_ADMIN);\n}"
      },
      {
        "name": "canDisableOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canDisableOrganization(organizationId)) {\n        return false;\n    }\n    /* only CRM_ADMIN can disable an organization */\n    return auth.isUserInRole(CRM_ADMIN);\n}"
      }
    ]
  },
  "ca.magex.crm.api.policies.authenticated.AuthenticatedPermissionPolicy": {
    "name": "AuthenticatedPermissionPolicy",
    "imports": {
      "CRM_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
      "CrmPermissionPolicy": "ca.magex.crm.api.policies",
      "BasicPermissionPolicy": "ca.magex.crm.api.policies.basic",
      "CrmAuthenticationService": "ca.magex.crm.api.services",
      "CrmPermissionService": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["CrmPermissionPolicy"],
    "constructors": [{
      "name": "AuthenticatedPermissionPolicy",
      "description": "Authenticated Permission Policy handles roles and association checks required for policy approval\n\n@param auth\n@param permissions\n@param users",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "auth",
          "type": "CrmAuthenticationService"
        },
        {
          "name": "permissions",
          "type": "CrmPermissionService"
        }
      ],
      "body": "{\n    this.auth = auth;\n    this.delegate = new BasicPermissionPolicy(permissions);\n}"
    }],
    "fields": [
      {
        "name": "auth",
        "modifiers": ["private"],
        "type": "CrmAuthenticationService"
      },
      {
        "name": "delegate",
        "modifiers": ["private"],
        "type": "CrmPermissionPolicy"
      }
    ],
    "methods": [
      {
        "name": "canCreateGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "body": "{\n    if (!delegate.canCreateGroup()) {\n        return false;\n    }\n    /* only a CRM Admin can create a Group */\n    return auth.isUserInRole(CRM_ADMIN);\n}"
      },
      {
        "name": "canViewGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "group",
          "type": "String"
        }],
        "body": "{\n    if (!delegate.canViewGroup(group)) {\n        return false;\n    }\n    /* anybody can view a group */\n    return true;\n}"
      },
      {
        "name": "canViewGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canViewGroup(groupId)) {\n        return false;\n    }\n    /* anybody can view a group */\n    return true;\n}"
      },
      {
        "name": "canUpdateGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canUpdateGroup(groupId)) {\n        return false;\n    }\n    /* only a CRM Admin can update a Group */\n    return auth.isUserInRole(CRM_ADMIN);\n}"
      },
      {
        "name": "canEnableGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canEnableGroup(groupId)) {\n        return false;\n    }\n    /* only a CRM Admin can enable a Group */\n    return auth.isUserInRole(CRM_ADMIN);\n}"
      },
      {
        "name": "canDisableGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canDisableGroup(groupId)) {\n        return false;\n    }\n    /* only a CRM Admin can disable a Group */\n    return auth.isUserInRole(CRM_ADMIN);\n}"
      },
      {
        "name": "canCreateRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canCreateRole(groupId)) {\n        return false;\n    }\n    /* only a CRM Admin can create a Role */\n    return auth.isUserInRole(CRM_ADMIN);\n}"
      },
      {
        "name": "canViewRoles",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "body": "{\n    if (!delegate.canViewRoles()) {\n        return false;\n    }\n    /* anybody can view roles */\n    return true;\n}"
      },
      {
        "name": "canViewRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    if (!delegate.canViewRole(code)) {\n        return false;\n    }\n    /* anybody can view a role */\n    return true;\n}"
      },
      {
        "name": "canViewRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canViewRole(roleId)) {\n        return false;\n    }\n    /* anybody can view a role */\n    return true;\n}"
      },
      {
        "name": "canUpdateRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canUpdateRole(roleId)) {\n        return false;\n    }\n    /* only a CRM Admin can update a Role */\n    return auth.isUserInRole(CRM_ADMIN);\n}"
      },
      {
        "name": "canEnableRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canEnableRole(roleId)) {\n        return false;\n    }\n    /* only a CRM Admin can enable a Role */\n    return auth.isUserInRole(CRM_ADMIN);\n}"
      },
      {
        "name": "canDisableRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canDisableRole(roleId)) {\n        return false;\n    }\n    /* only a CRM Admin can disable a Role */\n    return auth.isUserInRole(CRM_ADMIN);\n}"
      }
    ]
  },
  "ca.magex.crm.api.policies.authenticated.AuthenticatedPersonPolicy": {
    "name": "AuthenticatedPersonPolicy",
    "imports": {
      "CRM_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
      "ORG_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
      "CrmPersonPolicy": "ca.magex.crm.api.policies",
      "BasicPersonPolicy": "ca.magex.crm.api.policies.basic",
      "CrmAuthenticationService": "ca.magex.crm.api.services",
      "CrmOrganizationService": "ca.magex.crm.api.services",
      "CrmPersonService": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["CrmPersonPolicy"],
    "constructors": [{
      "name": "AuthenticatedPersonPolicy",
      "description": "Authenticated Person Policy handles roles and association checks required for policy approval\n\n@param auth\n@param organizations\n@param persons\n@param userService",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "auth",
          "type": "CrmAuthenticationService"
        },
        {
          "name": "organizations",
          "type": "CrmOrganizationService"
        },
        {
          "name": "persons",
          "type": "CrmPersonService"
        }
      ],
      "body": "{\n    this.auth = auth;\n    this.persons = persons;\n    this.delegate = new BasicPersonPolicy(organizations, persons);\n}"
    }],
    "fields": [
      {
        "name": "auth",
        "modifiers": ["private"],
        "type": "CrmAuthenticationService"
      },
      {
        "name": "delegate",
        "modifiers": ["private"],
        "type": "CrmPersonPolicy"
      },
      {
        "name": "persons",
        "modifiers": ["private"],
        "type": "CrmPersonService"
      }
    ],
    "methods": [
      {
        "name": "canCreatePersonForOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canCreatePersonForOrganization(organizationId)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* if the current user is associated to the organization, then return true if RE Admin */\n    if (auth.getOrganizationId().equals(organizationId)) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user is not associated with the organization */\n    return false;\n}"
      },
      {
        "name": "canViewPerson",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canViewPerson(personId)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure the current user is associated to the organization this person belongs to */\n    return auth.getOrganizationId().equals(persons.findPersonSummary(personId).getOrganizationId());\n}"
      },
      {
        "name": "canUpdatePerson",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canUpdatePerson(personId)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* can always update yourself */\n    if (auth.getPersonId().equals(personId)) {\n        return true;\n    }\n    /* ensure the current user is associated to the organization this person belongs to and they are an RE Admin */\n    if (auth.getOrganizationId().equals(persons.findPersonSummary(personId).getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user is not associated with the organization */\n    return false;\n}"
      },
      {
        "name": "canEnablePerson",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canEnablePerson(personId)) {\n        return false;\n    }\n    /* if the user is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure the current user is associated to the organization this person belongs to and they are an RE Admin */\n    if (auth.getOrganizationId().equals(persons.findPersonSummary(personId).getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user is not associated with the organization */\n    return false;\n}"
      },
      {
        "name": "canDisablePerson",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canDisablePerson(personId)) {\n        return false;\n    }\n    /* cannot disable yourself!! */\n    if (auth.getPersonId().equals(personId)) {\n        return false;\n    }\n    /* if the user is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure the current user is associated to the organization this person belongs to and they are an RE Admin */\n    if (auth.getOrganizationId().equals(persons.findPersonSummary(personId).getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user is not associated with the organization */\n    return false;\n}"
      }
    ]
  },
  "ca.magex.crm.api.policies.authenticated.AuthenticatedPolicies": {
    "name": "AuthenticatedPolicies",
    "imports": {
      "CrmPolicyDelegate": "ca.magex.crm.api.policies",
      "CrmAuthenticationService": "ca.magex.crm.api.services",
      "CrmLocationService": "ca.magex.crm.api.services",
      "CrmLookupService": "ca.magex.crm.api.services",
      "CrmOrganizationService": "ca.magex.crm.api.services",
      "CrmPermissionService": "ca.magex.crm.api.services",
      "CrmPersonService": "ca.magex.crm.api.services",
      "CrmUserService": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "extends": ["CrmPolicyDelegate"],
    "constructors": [{
      "name": "AuthenticatedPolicies",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "auth",
          "type": "CrmAuthenticationService"
        },
        {
          "name": "lookups",
          "type": "CrmLookupService"
        },
        {
          "name": "permissions",
          "type": "CrmPermissionService"
        },
        {
          "name": "organizations",
          "type": "CrmOrganizationService"
        },
        {
          "name": "locations",
          "type": "CrmLocationService"
        },
        {
          "name": "persons",
          "type": "CrmPersonService"
        },
        {
          "name": "users",
          "type": "CrmUserService"
        }
      ],
      "body": "{\n    super(new AuthenticatedLookupPolicy(auth, lookups), new AuthenticatedPermissionPolicy(auth, permissions), new AuthenticatedOrganizationPolicy(auth, organizations), new AuthenticatedLocationPolicy(auth, organizations, locations), new AuthenticatedPersonPolicy(auth, organizations, persons), new AuthenticatedUserPolicy(auth, persons, users));\n}"
    }]
  },
  "ca.magex.crm.api.policies.authenticated.AuthenticatedUserPolicy": {
    "name": "AuthenticatedUserPolicy",
    "imports": {
      "CRM_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
      "ORG_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
      "CrmUserPolicy": "ca.magex.crm.api.policies",
      "BasicUserPolicy": "ca.magex.crm.api.policies.basic",
      "CrmAuthenticationService": "ca.magex.crm.api.services",
      "CrmPersonService": "ca.magex.crm.api.services",
      "CrmUserService": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["CrmUserPolicy"],
    "constructors": [{
      "name": "AuthenticatedUserPolicy",
      "description": "Authenticated User Policy handles roles and association checks required for policy approval\n\n@param auth\n@param persons\n@param users",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "auth",
          "type": "CrmAuthenticationService"
        },
        {
          "name": "persons",
          "type": "CrmPersonService"
        },
        {
          "name": "users",
          "type": "CrmUserService"
        }
      ],
      "body": "{\n    this.auth = auth;\n    this.persons = persons;\n    this.users = users;\n    this.delegate = new BasicUserPolicy(persons, users);\n}"
    }],
    "fields": [
      {
        "name": "auth",
        "modifiers": ["private"],
        "type": "CrmAuthenticationService"
      },
      {
        "name": "delegate",
        "modifiers": ["private"],
        "type": "CrmUserPolicy"
      },
      {
        "name": "persons",
        "modifiers": ["private"],
        "type": "CrmPersonService"
      },
      {
        "name": "users",
        "modifiers": ["private"],
        "type": "CrmUserService"
      }
    ],
    "methods": [
      {
        "name": "canCreateUserForPerson",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canCreateUserForPerson(personId)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure the current user is associated with the organization the person belongs to */\n    if (auth.getOrganizationId().equals(persons.findPersonSummary(personId).getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* current user not associated to the organization of the person */\n    return false;\n}"
      },
      {
        "name": "canViewUser",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "username",
          "type": "String"
        }],
        "body": "{\n    if (!delegate.canViewUser(username)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure the current user is associated to the users organization */\n    return auth.getOrganizationId().equals(users.findUserByUsername(username).getPerson().getOrganizationId());\n}"
      },
      {
        "name": "canViewUser",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canViewUser(userId)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure the current user is associated to the users organization */\n    return auth.getOrganizationId().equals(users.findUser(userId).getPerson().getOrganizationId());\n}"
      },
      {
        "name": "canUpdateUserRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canUpdateUserRole(userId)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure the current user is associated to the users organization */\n    if (auth.getOrganizationId().equals(users.findUser(userId).getPerson().getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* ensure the current user is associated to the users organization */\n    return false;\n}"
      },
      {
        "name": "canUpdateUserPassword",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canUpdateUserPassword(userId)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* current user can update their own password */\n    if (auth.getUserId().equals(userId)) {\n        return true;\n    }\n    /* ensure the current user is associated to the users organization */\n    if (auth.getOrganizationId().equals(users.findUser(userId).getPerson().getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* ensure the current user is associated to the users organization */\n    return false;\n}"
      },
      {
        "name": "canEnableUser",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canEnableUser(userId)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure the current user is associated to the users organization */\n    if (auth.getOrganizationId().equals(users.findUser(userId).getPerson().getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* ensure the current user is associated to the users organization */\n    return false;\n}"
      },
      {
        "name": "canDisableUser",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!delegate.canDisableUser(userId)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure the current user is associated to the users organization */\n    if (auth.getOrganizationId().equals(users.findUser(userId).getPerson().getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* ensure the current user is associated to the users organization */\n    return false;\n}"
      }
    ]
  },
  "ca.magex.crm.api.policies.basic.BasicLocationPolicy": {
    "name": "BasicLocationPolicy",
    "imports": {
      "LocationSummary": "ca.magex.crm.api.crm",
      "OrganizationSummary": "ca.magex.crm.api.crm",
      "ItemNotFoundException": "ca.magex.crm.api.exceptions",
      "CrmLocationPolicy": "ca.magex.crm.api.policies",
      "CrmLocationService": "ca.magex.crm.api.services",
      "CrmOrganizationService": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["CrmLocationPolicy"],
    "constructors": [{
      "name": "BasicLocationPolicy",
      "description": "Basic Location Policy handles presence and status checks require for policy approval\n\n@param organizations\n@param locations",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "organizations",
          "type": "CrmOrganizationService"
        },
        {
          "name": "locations",
          "type": "CrmLocationService"
        }
      ],
      "body": "{\n    this.organizations = organizations;\n    this.locations = locations;\n}"
    }],
    "fields": [
      {
        "name": "organizations",
        "modifiers": ["private"],
        "type": "CrmOrganizationService"
      },
      {
        "name": "locations",
        "modifiers": ["private"],
        "type": "CrmLocationService"
      }
    ],
    "methods": [
      {
        "name": "canCreateLocationForOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can only create a location for the organization, if the organization exists, and is active */\n    OrganizationSummary summary = organizations.findOrganizationSummary(organizationId);\n    if (summary == null) {\n        throw new ItemNotFoundException(\"Organization ID '\" + organizationId + \"'\");\n    }\n    return summary.getStatus() == Status.ACTIVE;\n}"
      },
      {
        "name": "canViewLocation",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can only view a location if it exists */\n    if (locations.findLocationSummary(locationId) == null) {\n        throw new ItemNotFoundException(\"Location ID '\" + locationId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canUpdateLocation",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can only update a location if it exists, and is active */\n    LocationSummary summary = locations.findLocationSummary(locationId);\n    if (summary == null) {\n        throw new ItemNotFoundException(\"Location ID '\" + locationId + \"'\");\n    }\n    return summary.getStatus() == Status.ACTIVE;\n}"
      },
      {
        "name": "canEnableLocation",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can only enable a location if it exists */\n    LocationSummary summary = locations.findLocationSummary(locationId);\n    if (summary == null) {\n        throw new ItemNotFoundException(\"Location ID '\" + locationId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canDisableLocation",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can only disable a location if it exists */\n    LocationSummary summary = locations.findLocationSummary(locationId);\n    if (summary == null) {\n        throw new ItemNotFoundException(\"Location ID '\" + locationId + \"'\");\n    }\n    return true;\n}"
      }
    ]
  },
  "ca.magex.crm.api.policies.basic.BasicLookupPolicy": {
    "name": "BasicLookupPolicy",
    "imports": {
      "Locale": "java.util",
      "ItemNotFoundException": "ca.magex.crm.api.exceptions",
      "CrmLookupPolicy": "ca.magex.crm.api.policies",
      "CrmLookupService": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["CrmLookupPolicy"],
    "constructors": [{
      "name": "BasicLookupPolicy",
      "description": "Basic Lookup Policy handles presence and status checks require for policy approval\n\n@param organizations",
      "modifiers": ["public"],
      "parameters": [{
        "name": "lookups",
        "type": "CrmLookupService"
      }],
      "body": "{\n    this.lookups = lookups;\n}"
    }],
    "fields": [{
      "name": "lookups",
      "modifiers": ["private"],
      "type": "CrmLookupService"
    }],
    "methods": [
      {
        "name": "canViewStatusLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "StatusLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    if (lookups.findStatusByLocalizedName(locale, StatusLookup) == null) {\n        throw new ItemNotFoundException(\"Status[\" + locale + \"] '\" + StatusLookup + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canViewCountryLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "CountryLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    if (lookups.findCountryByLocalizedName(locale, CountryLookup) == null) {\n        throw new ItemNotFoundException(\"Country[\" + locale + \"] '\" + CountryLookup + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canViewProvinceLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "countryLookup",
            "type": "String"
          },
          {
            "name": "provinceLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    if (lookups.findProvinceByLocalizedName(locale, provinceLookup, countryLookup) == null) {\n        throw new ItemNotFoundException(\"Province[\" + locale + \"] '\" + provinceLookup + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canViewLanguageLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "languageLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    if (lookups.findLanguageByLocalizedName(locale, languageLookup) == null) {\n        throw new ItemNotFoundException(\"Language[\" + locale + \"] '\" + languageLookup + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canViewSalutationLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "salutationLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    if (lookups.findSalutationByLocalizedName(locale, salutationLookup) == null) {\n        throw new ItemNotFoundException(\"Salutation[\" + locale + \"] '\" + salutationLookup + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canViewBusinessSectorLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "sectorLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    if (lookups.findBusinessSectorByLocalizedName(locale, sectorLookup) == null) {\n        throw new ItemNotFoundException(\"BusinessSector[\" + locale + \"] '\" + sectorLookup + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canViewBusinessUnitLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "unitLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    if (lookups.findBusinessUnitByLocalizedName(locale, unitLookup) == null) {\n        throw new ItemNotFoundException(\"BusinessUnit[\" + locale + \"] '\" + unitLookup + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canViewBusinessClassificationLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "classificationLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    if (lookups.findBusinessClassificationByLocalizedName(locale, classificationLookup) == null) {\n        throw new ItemNotFoundException(\"BusinessClassification[\" + locale + \"] '\" + classificationLookup + \"'\");\n    }\n    return true;\n}"
      }
    ]
  },
  "ca.magex.crm.api.policies.basic.BasicOrganizationPolicy": {
    "name": "BasicOrganizationPolicy",
    "imports": {
      "OrganizationSummary": "ca.magex.crm.api.crm",
      "ItemNotFoundException": "ca.magex.crm.api.exceptions",
      "CrmOrganizationPolicy": "ca.magex.crm.api.policies",
      "CrmOrganizationService": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["CrmOrganizationPolicy"],
    "constructors": [{
      "name": "BasicOrganizationPolicy",
      "description": "Basic Organization Policy handles presence and status checks require for policy approval\n\n@param organizations",
      "modifiers": ["public"],
      "parameters": [{
        "name": "organizations",
        "type": "CrmOrganizationService"
      }],
      "body": "{\n    this.organizations = organizations;\n}"
    }],
    "fields": [{
      "name": "organizations",
      "modifiers": ["private"],
      "type": "CrmOrganizationService"
    }],
    "methods": [
      {
        "name": "canCreateOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "body": "{\n    /* always can create an organization */\n    return true;\n}"
      },
      {
        "name": "canViewOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can only view an organization if it exists */\n    if (organizations.findOrganizationSummary(organizationId) == null) {\n        throw new ItemNotFoundException(\"Organization ID '\" + organizationId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canUpdateOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can only update an organization if it exists, and is active */\n    OrganizationSummary summary = organizations.findOrganizationSummary(organizationId);\n    if (summary == null) {\n        throw new ItemNotFoundException(\"Organization ID '\" + organizationId + \"'\");\n    }\n    return summary.getStatus() == Status.ACTIVE;\n}"
      },
      {
        "name": "canEnableOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can only update an organization if it exists, and is active */\n    OrganizationSummary summary = organizations.findOrganizationSummary(organizationId);\n    if (summary == null) {\n        throw new ItemNotFoundException(\"Organization ID '\" + organizationId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canDisableOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can only update an organization if it exists, and is active */\n    OrganizationSummary summary = organizations.findOrganizationSummary(organizationId);\n    if (summary == null) {\n        throw new ItemNotFoundException(\"Organization ID '\" + organizationId + \"'\");\n    }\n    return true;\n}"
      }
    ]
  },
  "ca.magex.crm.api.policies.basic.BasicPermissionPolicy": {
    "name": "BasicPermissionPolicy",
    "imports": {
      "ItemNotFoundException": "ca.magex.crm.api.exceptions",
      "CrmPermissionPolicy": "ca.magex.crm.api.policies",
      "Group": "ca.magex.crm.api.roles",
      "Role": "ca.magex.crm.api.roles",
      "CrmPermissionService": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["CrmPermissionPolicy"],
    "constructors": [{
      "name": "BasicPermissionPolicy",
      "description": "Basic Permission Policy handles presence and status checks require for policy approval\n\n@param permissions",
      "modifiers": ["public"],
      "parameters": [{
        "name": "permissions",
        "type": "CrmPermissionService"
      }],
      "body": "{\n    this.permissions = permissions;\n}"
    }],
    "fields": [{
      "name": "permissions",
      "modifiers": ["private"],
      "type": "CrmPermissionService"
    }],
    "methods": [
      {
        "name": "canCreateGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "body": "{\n    /* always return true */\n    return true;\n}"
      },
      {
        "name": "canViewGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "group",
          "type": "String"
        }],
        "body": "{\n    /* can view a group if it exists */\n    if (permissions.findGroupByCode(group) == null) {\n        throw new ItemNotFoundException(\"Group Code '\" + group + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canViewGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can view a group if it exists */\n    if (permissions.findGroup(groupId) == null) {\n        throw new ItemNotFoundException(\"Group ID '\" + groupId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canUpdateGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can update a group if it exists and is active */\n    Group group = permissions.findGroup(groupId);\n    if (group == null) {\n        throw new ItemNotFoundException(\"Group ID '\" + groupId + \"'\");\n    }\n    return group.getStatus() == Status.ACTIVE;\n}"
      },
      {
        "name": "canEnableGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can enable a group if it exists */\n    if (permissions.findGroup(groupId) == null) {\n        throw new ItemNotFoundException(\"Group ID '\" + groupId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canDisableGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can disable a group if it exists */\n    if (permissions.findGroup(groupId) == null) {\n        throw new ItemNotFoundException(\"Group ID '\" + groupId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canCreateRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can create a role for this group if it exists */\n    if (permissions.findGroup(groupId) == null) {\n        throw new ItemNotFoundException(\"Group ID '\" + groupId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canViewRoles",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "body": "{\n    /* can always view roles */\n    return true;\n}"
      },
      {
        "name": "canViewRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    /* can view a specific role if it exists */\n    if (permissions.findRoleByCode(code) == null) {\n        throw new ItemNotFoundException(\"Role Code '\" + code + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canViewRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can view a specific role if it exists */\n    if (permissions.findRole(roleId) == null) {\n        throw new ItemNotFoundException(\"Role ID '\" + roleId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canUpdateRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can view a specific role if it exists and is active */\n    Role role = permissions.findRole(roleId);\n    if (role == null) {\n        throw new ItemNotFoundException(\"Role ID '\" + roleId + \"'\");\n    }\n    return permissions.findRole(roleId).getStatus() == Status.ACTIVE;\n}"
      },
      {
        "name": "canEnableRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can enable a specific role if it exists */\n    if (permissions.findRole(roleId) == null) {\n        throw new ItemNotFoundException(\"Role ID '\" + roleId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canDisableRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can disable a specific role if it exists */\n    if (permissions.findRole(roleId) == null) {\n        throw new ItemNotFoundException(\"Role ID '\" + roleId + \"'\");\n    }\n    return true;\n}"
      }
    ]
  },
  "ca.magex.crm.api.policies.basic.BasicPersonPolicy": {
    "name": "BasicPersonPolicy",
    "imports": {
      "OrganizationSummary": "ca.magex.crm.api.crm",
      "PersonSummary": "ca.magex.crm.api.crm",
      "ItemNotFoundException": "ca.magex.crm.api.exceptions",
      "CrmPersonPolicy": "ca.magex.crm.api.policies",
      "CrmOrganizationService": "ca.magex.crm.api.services",
      "CrmPersonService": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["CrmPersonPolicy"],
    "constructors": [{
      "name": "BasicPersonPolicy",
      "description": "Basic Person Policy handles presence and status checks require for policy approval\n\n@param organizations\n@param persons",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "organizations",
          "type": "CrmOrganizationService"
        },
        {
          "name": "persons",
          "type": "CrmPersonService"
        }
      ],
      "body": "{\n    this.organizations = organizations;\n    this.persons = persons;\n}"
    }],
    "fields": [
      {
        "name": "organizations",
        "modifiers": ["private"],
        "type": "CrmOrganizationService"
      },
      {
        "name": "persons",
        "modifiers": ["private"],
        "type": "CrmPersonService"
      }
    ],
    "methods": [
      {
        "name": "canCreatePersonForOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can only create a location for the organization, if the organization exists, and is active */\n    OrganizationSummary summary = organizations.findOrganizationSummary(organizationId);\n    if (summary == null) {\n        throw new ItemNotFoundException(\"Organization ID '\" + organizationId + \"'\");\n    }\n    return organizations.findOrganizationSummary(organizationId).getStatus() == Status.ACTIVE;\n}"
      },
      {
        "name": "canViewPerson",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can view a person if the person exists */\n    if (persons.findPersonSummary(personId) == null) {\n        throw new ItemNotFoundException(\"Person ID '\" + personId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canUpdatePerson",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can only update a location if it exists, and is active */\n    PersonSummary summary = persons.findPersonSummary(personId);\n    if (summary == null) {\n        throw new ItemNotFoundException(\"Person ID '\" + personId + \"'\");\n    }\n    /* can only update a person if the person exists, and is active */\n    return persons.findPersonSummary(personId).getStatus() == Status.ACTIVE;\n}"
      },
      {
        "name": "canEnablePerson",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    // * can view a person if the person exists */\n    if (persons.findPersonSummary(personId) == null) {\n        throw new ItemNotFoundException(\"Person ID '\" + personId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canDisablePerson",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can view a person if the person exists */\n    if (persons.findPersonSummary(personId) == null) {\n        throw new ItemNotFoundException(\"Person ID '\" + personId + \"'\");\n    }\n    return true;\n}"
      }
    ]
  },
  "ca.magex.crm.api.policies.basic.BasicPolicies": {
    "name": "BasicPolicies",
    "imports": {
      "CrmPolicies": "ca.magex.crm.api.adapters",
      "CrmLocationService": "ca.magex.crm.api.services",
      "CrmLookupService": "ca.magex.crm.api.services",
      "CrmOrganizationService": "ca.magex.crm.api.services",
      "CrmPermissionService": "ca.magex.crm.api.services",
      "CrmPersonService": "ca.magex.crm.api.services",
      "CrmUserService": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "extends": ["CrmPolicies"],
    "constructors": [{
      "name": "BasicPolicies",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "lookups",
          "type": "CrmLookupService"
        },
        {
          "name": "permissions",
          "type": "CrmPermissionService"
        },
        {
          "name": "organizations",
          "type": "CrmOrganizationService"
        },
        {
          "name": "locations",
          "type": "CrmLocationService"
        },
        {
          "name": "persons",
          "type": "CrmPersonService"
        },
        {
          "name": "users",
          "type": "CrmUserService"
        }
      ],
      "body": "{\n    super(new BasicLookupPolicy(lookups), new BasicPermissionPolicy(permissions), new BasicOrganizationPolicy(organizations), new BasicLocationPolicy(organizations, locations), new BasicPersonPolicy(organizations, persons), new BasicUserPolicy(persons, users));\n}"
    }]
  },
  "ca.magex.crm.api.policies.basic.BasicUserPolicy": {
    "name": "BasicUserPolicy",
    "imports": {
      "PersonSummary": "ca.magex.crm.api.crm",
      "ItemNotFoundException": "ca.magex.crm.api.exceptions",
      "CrmUserPolicy": "ca.magex.crm.api.policies",
      "User": "ca.magex.crm.api.roles",
      "CrmPersonService": "ca.magex.crm.api.services",
      "CrmUserService": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["CrmUserPolicy"],
    "constructors": [{
      "name": "BasicUserPolicy",
      "description": "Basic User Policy handles presence and status checks require for policy approval\n\n@param users\n@param persons",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "persons",
          "type": "CrmPersonService"
        },
        {
          "name": "users",
          "type": "CrmUserService"
        }
      ],
      "body": "{\n    this.users = users;\n    this.persons = persons;\n}"
    }],
    "fields": [
      {
        "name": "persons",
        "modifiers": ["private"],
        "type": "CrmPersonService"
      },
      {
        "name": "users",
        "modifiers": ["private"],
        "type": "CrmUserService"
      }
    ],
    "methods": [
      {
        "name": "canCreateUserForPerson",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can create a user for a given person if the person exists */\n    PersonSummary summary = persons.findPersonSummary(personId);\n    if (summary == null) {\n        throw new ItemNotFoundException(\"Person ID '\" + personId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canViewUser",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "username",
          "type": "String"
        }],
        "body": "{\n    if (users.findUserByUsername(username) == null) {\n        throw new ItemNotFoundException(\"Username '\" + username + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canViewUser",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can view a user if it exists */\n    if (users.findUser(userId) == null) {\n        throw new ItemNotFoundException(\"User ID '\" + userId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canUpdateUserRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can view a user if it exists and is active */\n    User user = users.findUser(userId);\n    if (user == null) {\n        throw new ItemNotFoundException(\"User ID '\" + userId + \"'\");\n    }\n    return user.getStatus() == Status.ACTIVE;\n}"
      },
      {
        "name": "canUpdateUserPassword",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can view a user password if it exists and is active */\n    User user = users.findUser(userId);\n    if (user == null) {\n        throw new ItemNotFoundException(\"User ID '\" + userId + \"'\");\n    }\n    return user.getStatus() == Status.ACTIVE;\n}"
      },
      {
        "name": "canEnableUser",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can enable a user if it exists */\n    if (users.findUser(userId) == null) {\n        throw new ItemNotFoundException(\"User ID '\" + userId + \"'\");\n    }\n    return true;\n}"
      },
      {
        "name": "canDisableUser",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    /* can disable a user if it exists */\n    if (users.findUser(userId) == null) {\n        throw new ItemNotFoundException(\"User ID '\" + userId + \"'\");\n    }\n    return true;\n}"
      }
    ]
  },
  "ca.magex.crm.api.roles.Group": {
    "name": "Group",
    "imports": {
      "Serializable": "java.io",
      "Locale": "java.util",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Lang": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [{
      "name": "Group",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "groupId",
          "type": "Identifier"
        },
        {
          "name": "status",
          "type": "Status"
        },
        {
          "name": "name",
          "type": "Localized"
        }
      ],
      "body": "{\n    super();\n    this.groupId = groupId;\n    this.status = status;\n    this.name = name;\n}"
    }],
    "fields": [
      {
        "name": "groupId",
        "modifiers": ["private"],
        "type": "Identifier"
      },
      {
        "name": "status",
        "modifiers": ["private"],
        "type": "Status"
      },
      {
        "name": "name",
        "modifiers": ["private"],
        "type": "Localized"
      }
    ],
    "methods": [
      {
        "name": "getGroupId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return groupId;\n}"
      },
      {
        "name": "getCode",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return name.get(Lang.ROOT);\n}"
      },
      {
        "name": "getStatus",
        "modifiers": ["public"],
        "type": "Status",
        "body": "{\n    return status;\n}"
      },
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "Group",
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new Group(groupId, status, name);\n}"
      },
      {
        "name": "getName",
        "modifiers": ["public"],
        "type": "Localized",
        "body": "{\n    return name;\n}"
      },
      {
        "name": "getName",
        "modifiers": ["public"],
        "type": "String",
        "parameters": [{
          "name": "locale",
          "type": "Locale"
        }],
        "body": "{\n    return name.get(locale);\n}"
      },
      {
        "name": "withName",
        "modifiers": ["public"],
        "type": "Group",
        "parameters": [{
          "name": "name",
          "type": "Localized"
        }],
        "body": "{\n    return new Group(groupId, status, name);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.roles.Role": {
    "name": "Role",
    "imports": {
      "Serializable": "java.io",
      "Locale": "java.util",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Lang": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [{
      "name": "Role",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "roleId",
          "type": "Identifier"
        },
        {
          "name": "groupId",
          "type": "Identifier"
        },
        {
          "name": "status",
          "type": "Status"
        },
        {
          "name": "name",
          "type": "Localized"
        }
      ],
      "body": "{\n    super();\n    this.roleId = roleId;\n    this.groupId = groupId;\n    this.status = status;\n    this.name = name;\n}"
    }],
    "fields": [
      {
        "name": "roleId",
        "modifiers": ["private"],
        "type": "Identifier"
      },
      {
        "name": "groupId",
        "modifiers": ["private"],
        "type": "Identifier"
      },
      {
        "name": "status",
        "modifiers": ["private"],
        "type": "Status"
      },
      {
        "name": "name",
        "modifiers": ["private"],
        "type": "Localized"
      }
    ],
    "methods": [
      {
        "name": "getRoleId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return roleId;\n}"
      },
      {
        "name": "getGroupId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return groupId;\n}"
      },
      {
        "name": "getCode",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return name.get(Lang.ROOT);\n}"
      },
      {
        "name": "getStatus",
        "modifiers": ["public"],
        "type": "Status",
        "body": "{\n    return status;\n}"
      },
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "Role",
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new Role(roleId, groupId, status, name);\n}"
      },
      {
        "name": "getName",
        "modifiers": ["public"],
        "type": "Localized",
        "body": "{\n    return name;\n}"
      },
      {
        "name": "getName",
        "modifiers": ["public"],
        "type": "String",
        "parameters": [{
          "name": "locale",
          "type": "Locale"
        }],
        "body": "{\n    return name.get(locale);\n}"
      },
      {
        "name": "withName",
        "modifiers": ["public"],
        "type": "Role",
        "parameters": [{
          "name": "name",
          "type": "Localized"
        }],
        "body": "{\n    return new Role(roleId, groupId, status, name);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.roles.User": {
    "name": "User",
    "imports": {
      "Serializable": "java.io",
      "ArrayList": "java.util",
      "List": "java.util",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "PersonSummary": "ca.magex.crm.api.crm",
      "Crm": "ca.magex.crm.api.services",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [{
      "name": "User",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "userId",
          "type": "Identifier"
        },
        {
          "name": "username",
          "type": "String"
        },
        {
          "name": "person",
          "type": "PersonSummary"
        },
        {
          "name": "status",
          "type": "Status"
        },
        {
          "name": "roles",
          "type": {
            "class": "List",
            "generics": ["String"]
          }
        }
      ],
      "body": "{\n    super();\n    this.userId = userId;\n    this.username = username;\n    this.person = person;\n    this.status = status;\n    this.roles = new ArrayList<String>(roles);\n}"
    }],
    "fields": [
      {
        "name": "userId",
        "modifiers": ["private"],
        "type": "Identifier"
      },
      {
        "name": "username",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "person",
        "modifiers": ["private"],
        "type": "PersonSummary"
      },
      {
        "name": "status",
        "modifiers": ["private"],
        "type": "Status"
      },
      {
        "name": "roles",
        "modifiers": ["private"],
        "type": {
          "class": "List",
          "generics": ["String"]
        }
      }
    ],
    "methods": [
      {
        "name": "getUserId",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return userId;\n}"
      },
      {
        "name": "getUsername",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return username;\n}"
      },
      {
        "name": "getPerson",
        "modifiers": ["public"],
        "type": "PersonSummary",
        "body": "{\n    return person;\n}"
      },
      {
        "name": "getStatus",
        "modifiers": ["public"],
        "type": "Status",
        "body": "{\n    return status;\n}"
      },
      {
        "name": "withStatus",
        "modifiers": ["public"],
        "type": "User",
        "parameters": [{
          "name": "status",
          "type": "Status"
        }],
        "body": "{\n    return new User(userId, username, person, status, roles);\n}"
      },
      {
        "name": "getRoles",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["String"]
        },
        "body": "{\n    return roles;\n}"
      },
      {
        "name": "withRoles",
        "modifiers": ["public"],
        "type": "User",
        "parameters": [{
          "name": "roles",
          "type": {
            "class": "List",
            "generics": ["String"]
          }
        }],
        "body": "{\n    return new User(userId, username, person, status, roles);\n}"
      },
      {
        "name": "isInRole",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "role",
          "type": "String"
        }],
        "body": "{\n    return roles.contains(role);\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.services.Crm": {
    "name": "Crm",
    "imports": {
      "OutputStream": "java.io",
      "List": "java.util",
      "Locale": "java.util",
      "BusinessPosition": "ca.magex.crm.api.common",
      "Communication": "ca.magex.crm.api.common",
      "MailingAddress": "ca.magex.crm.api.common",
      "PersonName": "ca.magex.crm.api.common",
      "LocationDetails": "ca.magex.crm.api.crm",
      "LocationSummary": "ca.magex.crm.api.crm",
      "OrganizationDetails": "ca.magex.crm.api.crm",
      "OrganizationSummary": "ca.magex.crm.api.crm",
      "PersonDetails": "ca.magex.crm.api.crm",
      "PersonSummary": "ca.magex.crm.api.crm",
      "BadRequestException": "ca.magex.crm.api.exceptions",
      "DuplicateItemFoundException": "ca.magex.crm.api.exceptions",
      "PermissionDeniedException": "ca.magex.crm.api.exceptions",
      "GroupsFilter": "ca.magex.crm.api.filters",
      "LocationsFilter": "ca.magex.crm.api.filters",
      "OrganizationsFilter": "ca.magex.crm.api.filters",
      "Paging": "ca.magex.crm.api.filters",
      "PersonsFilter": "ca.magex.crm.api.filters",
      "RolesFilter": "ca.magex.crm.api.filters",
      "UsersFilter": "ca.magex.crm.api.filters",
      "BusinessClassification": "ca.magex.crm.api.lookup",
      "BusinessSector": "ca.magex.crm.api.lookup",
      "BusinessUnit": "ca.magex.crm.api.lookup",
      "Country": "ca.magex.crm.api.lookup",
      "Language": "ca.magex.crm.api.lookup",
      "Province": "ca.magex.crm.api.lookup",
      "Salutation": "ca.magex.crm.api.lookup",
      "CrmLocationPolicy": "ca.magex.crm.api.policies",
      "CrmLookupPolicy": "ca.magex.crm.api.policies",
      "CrmOrganizationPolicy": "ca.magex.crm.api.policies",
      "CrmPermissionPolicy": "ca.magex.crm.api.policies",
      "CrmPersonPolicy": "ca.magex.crm.api.policies",
      "CrmPolicies": "ca.magex.crm.api.policies",
      "CrmUserPolicy": "ca.magex.crm.api.policies",
      "Group": "ca.magex.crm.api.roles",
      "Role": "ca.magex.crm.api.roles",
      "User": "ca.magex.crm.api.roles",
      "FilteredPage": "ca.magex.crm.api.system",
      "Identifier": "ca.magex.crm.api.system",
      "Lang": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system",
      "Message": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system",
      "CrmValidation": "ca.magex.crm.api.validation"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": [
      "CrmInitializationService",
      "CrmServices",
      "CrmPolicies"
    ],
    "constructors": [
      {
        "name": "Crm",
        "modifiers": ["public"],
        "parameters": [{
          "name": "crm",
          "type": "Crm"
        }],
        "body": "{\n    this(crm.initializationService, crm.lookupService, crm.lookupPolicy, crm.permissionsService, crm.permissionsPolicy, crm.organizationService, crm.organizationPolicy, crm.locationService, crm.locationPolicy, crm.personService, crm.personPolicy, crm.userService, crm.userPolicy);\n}"
      },
      {
        "name": "Crm",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "initializationService",
            "type": "CrmInitializationService"
          },
          {
            "name": "lookupService",
            "type": "CrmLookupService"
          },
          {
            "name": "permissionsService",
            "type": "CrmPermissionService"
          },
          {
            "name": "organizationService",
            "type": "CrmOrganizationService"
          },
          {
            "name": "locationService",
            "type": "CrmLocationService"
          },
          {
            "name": "personService",
            "type": "CrmPersonService"
          },
          {
            "name": "userService",
            "type": "CrmUserService"
          },
          {
            "name": "policies",
            "type": "CrmPolicies"
          }
        ],
        "body": "{\n    this(initializationService, lookupService, policies, permissionsService, policies, organizationService, policies, locationService, policies, personService, policies, userService, policies);\n}"
      },
      {
        "name": "Crm",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "initializationService",
            "type": "CrmInitializationService"
          },
          {
            "name": "lookupService",
            "type": "CrmLookupService"
          },
          {
            "name": "lookupPolicy",
            "type": "CrmLookupPolicy"
          },
          {
            "name": "permissionsService",
            "type": "CrmPermissionService"
          },
          {
            "name": "permissionsPolicy",
            "type": "CrmPermissionPolicy"
          },
          {
            "name": "organizationService",
            "type": "CrmOrganizationService"
          },
          {
            "name": "organizationPolicy",
            "type": "CrmOrganizationPolicy"
          },
          {
            "name": "locationService",
            "type": "CrmLocationService"
          },
          {
            "name": "locationPolicy",
            "type": "CrmLocationPolicy"
          },
          {
            "name": "personService",
            "type": "CrmPersonService"
          },
          {
            "name": "personPolicy",
            "type": "CrmPersonPolicy"
          },
          {
            "name": "userService",
            "type": "CrmUserService"
          },
          {
            "name": "userPolicy",
            "type": "CrmUserPolicy"
          }
        ],
        "body": "{\n    super();\n    this.initializationService = initializationService;\n    this.lookupService = lookupService;\n    this.lookupPolicy = lookupPolicy;\n    this.organizationService = organizationService;\n    this.organizationPolicy = organizationPolicy;\n    this.locationService = locationService;\n    this.locationPolicy = locationPolicy;\n    this.personService = personService;\n    this.personPolicy = personPolicy;\n    this.userService = userService;\n    this.userPolicy = userPolicy;\n    this.permissionsService = permissionsService;\n    this.permissionsPolicy = permissionsPolicy;\n    this.validation = new CrmValidation(this);\n}"
      }
    ],
    "fields": [
      {
        "name": "SERIAL_UID_VERSION",
        "modifiers": [
          "public",
          "static",
          "final"
        ]
      },
      {
        "name": "PREVIOUS_API_VERSION",
        "modifiers": [
          "public",
          "static",
          "final"
        ]
      },
      {
        "name": "PREVIOUS_API_PREFIX",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "String"
      },
      {
        "name": "CURRENT_API_VERSION",
        "modifiers": [
          "public",
          "static",
          "final"
        ]
      },
      {
        "name": "CURRENT_API_PREFIX",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "String"
      },
      {
        "name": "initializationService",
        "modifiers": [
          "private",
          "final"
        ],
        "type": "CrmInitializationService"
      },
      {
        "name": "lookupService",
        "modifiers": [
          "private",
          "final"
        ],
        "type": "CrmLookupService"
      },
      {
        "name": "lookupPolicy",
        "modifiers": [
          "private",
          "final"
        ],
        "type": "CrmLookupPolicy"
      },
      {
        "name": "permissionsService",
        "modifiers": [
          "private",
          "final"
        ],
        "type": "CrmPermissionService"
      },
      {
        "name": "permissionsPolicy",
        "modifiers": [
          "private",
          "final"
        ],
        "type": "CrmPermissionPolicy"
      },
      {
        "name": "organizationService",
        "modifiers": [
          "private",
          "final"
        ],
        "type": "CrmOrganizationService"
      },
      {
        "name": "organizationPolicy",
        "modifiers": [
          "private",
          "final"
        ],
        "type": "CrmOrganizationPolicy"
      },
      {
        "name": "locationService",
        "modifiers": [
          "private",
          "final"
        ],
        "type": "CrmLocationService"
      },
      {
        "name": "locationPolicy",
        "modifiers": [
          "private",
          "final"
        ],
        "type": "CrmLocationPolicy"
      },
      {
        "name": "personService",
        "modifiers": [
          "private",
          "final"
        ],
        "type": "CrmPersonService"
      },
      {
        "name": "personPolicy",
        "modifiers": [
          "private",
          "final"
        ],
        "type": "CrmPersonPolicy"
      },
      {
        "name": "userService",
        "modifiers": [
          "private",
          "final"
        ],
        "type": "CrmUserService"
      },
      {
        "name": "userPolicy",
        "modifiers": [
          "private",
          "final"
        ],
        "type": "CrmUserPolicy"
      },
      {
        "name": "validation",
        "modifiers": [
          "private",
          "final"
        ],
        "type": "CrmValidation"
      }
    ],
    "methods": [
      {
        "name": "isInitialized",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return initializationService.isInitialized();\n}"
      },
      {
        "name": "initializeSystem",
        "modifiers": ["public"],
        "type": "User",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "organization",
            "type": "String"
          },
          {
            "name": "name",
            "type": "PersonName"
          },
          {
            "name": "email",
            "type": "String"
          },
          {
            "name": "username",
            "type": "String"
          },
          {
            "name": "password",
            "type": "String"
          }
        ],
        "body": "{\n    if (isInitialized())\n        throw new DuplicateItemFoundException(\"The system is already initialized\");\n    return initializationService.initializeSystem(organization, name, email, username, password);\n}"
      },
      {
        "name": "reset",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return initializationService.reset();\n}"
      },
      {
        "name": "dump",
        "modifiers": ["public"],
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "os",
          "type": "OutputStream"
        }],
        "body": "{\n    initializationService.dump(os);\n}"
      },
      {
        "name": "findStatuses",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["Status"]
        },
        "annotations": [{"name": "Override"}],
        "body": "{\n    return lookupService.findStatuses();\n}"
      },
      {
        "name": "findStatusByCode",
        "modifiers": ["public"],
        "type": "Status",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    if (!lookupPolicy.canViewStatusLookup(code, Lang.ROOT)) {\n        throw new PermissionDeniedException(\"findStatusByCode\");\n    }\n    return lookupService.findStatusByCode(code);\n}"
      },
      {
        "name": "findStatusByLocalizedName",
        "modifiers": ["public"],
        "type": "Status",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "locale",
            "type": "Locale"
          },
          {
            "name": "name",
            "type": "String"
          }
        ],
        "body": "{\n    if (!lookupPolicy.canViewStatusLookup(name, locale)) {\n        throw new PermissionDeniedException(\"findStatusByLocalizedName\");\n    }\n    return lookupService.findStatusByLocalizedName(locale, name);\n}"
      },
      {
        "name": "findCountries",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["Country"]
        },
        "annotations": [{"name": "Override"}],
        "body": "{\n    return lookupService.findCountries();\n}"
      },
      {
        "name": "findCountryByCode",
        "modifiers": ["public"],
        "type": "Country",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    if (!lookupPolicy.canViewCountryLookup(code, Lang.ROOT)) {\n        throw new PermissionDeniedException(\"findCountryByCode\");\n    }\n    return lookupService.findCountryByCode(code);\n}"
      },
      {
        "name": "findCountryByLocalizedName",
        "modifiers": ["public"],
        "type": "Country",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "locale",
            "type": "Locale"
          },
          {
            "name": "name",
            "type": "String"
          }
        ],
        "body": "{\n    if (!lookupPolicy.canViewCountryLookup(name, locale)) {\n        throw new PermissionDeniedException(\"findCountryByLocalizedName\");\n    }\n    return lookupService.findCountryByLocalizedName(locale, name);\n}"
      },
      {
        "name": "findProvinces",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["Province"]
        },
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "country",
          "type": "String"
        }],
        "body": "{\n    return lookupService.findProvinces(country);\n}"
      },
      {
        "name": "findProvinceByCode",
        "modifiers": ["public"],
        "type": "Province",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "province",
            "type": "String"
          },
          {
            "name": "country",
            "type": "String"
          }
        ],
        "body": "{\n    if (!lookupPolicy.canViewProvinceLookup(country, province, Lang.ROOT)) {\n        throw new PermissionDeniedException(\"findProvinceByCode\");\n    }\n    return lookupService.findProvinceByCode(province, country);\n}"
      },
      {
        "name": "findProvinceByLocalizedName",
        "modifiers": ["public"],
        "type": "Province",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "locale",
            "type": "Locale"
          },
          {
            "name": "province",
            "type": "String"
          },
          {
            "name": "country",
            "type": "String"
          }
        ],
        "body": "{\n    if (!lookupPolicy.canViewProvinceLookup(country, province, locale)) {\n        throw new PermissionDeniedException(\"findProvinceByLocalizedName\");\n    }\n    return lookupService.findProvinceByLocalizedName(locale, province, country);\n}"
      },
      {
        "name": "findSalutations",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["Salutation"]
        },
        "annotations": [{"name": "Override"}],
        "body": "{\n    return lookupService.findSalutations();\n}"
      },
      {
        "name": "findSalutationByCode",
        "modifiers": ["public"],
        "type": "Salutation",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    if (!lookupPolicy.canViewSalutationLookup(code, Lang.ROOT)) {\n        throw new PermissionDeniedException(\"findSalutationByCode\");\n    }\n    return lookupService.findSalutationByCode(code);\n}"
      },
      {
        "name": "findSalutationByLocalizedName",
        "modifiers": ["public"],
        "type": "Salutation",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "locale",
            "type": "Locale"
          },
          {
            "name": "name",
            "type": "String"
          }
        ],
        "body": "{\n    if (!lookupPolicy.canViewSalutationLookup(name, locale)) {\n        throw new PermissionDeniedException(\"findSalutationByLocalizedName\");\n    }\n    return lookupService.findSalutationByLocalizedName(locale, name);\n}"
      },
      {
        "name": "findLanguages",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["Language"]
        },
        "annotations": [{"name": "Override"}],
        "body": "{\n    return lookupService.findLanguages();\n}"
      },
      {
        "name": "findLanguageByCode",
        "modifiers": ["public"],
        "type": "Language",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    if (!lookupPolicy.canViewLanguageLookup(code, Lang.ROOT)) {\n        throw new PermissionDeniedException(\"findLanguageByCode\");\n    }\n    return lookupService.findLanguageByCode(code);\n}"
      },
      {
        "name": "findLanguageByLocalizedName",
        "modifiers": ["public"],
        "type": "Language",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "locale",
            "type": "Locale"
          },
          {
            "name": "name",
            "type": "String"
          }
        ],
        "body": "{\n    if (!lookupPolicy.canViewLanguageLookup(name, locale)) {\n        throw new PermissionDeniedException(\"findLanguageByLocalizedName\");\n    }\n    return lookupService.findLanguageByLocalizedName(locale, name);\n}"
      },
      {
        "name": "findBusinessSectors",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["BusinessSector"]
        },
        "annotations": [{"name": "Override"}],
        "body": "{\n    return lookupService.findBusinessSectors();\n}"
      },
      {
        "name": "findBusinessSectorByCode",
        "modifiers": ["public"],
        "type": "BusinessSector",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    if (!lookupPolicy.canViewBusinessSectorLookup(code, Lang.ROOT)) {\n        throw new PermissionDeniedException(\"findBusinessSectorByCode\");\n    }\n    return lookupService.findBusinessSectorByCode(code);\n}"
      },
      {
        "name": "findBusinessSectorByLocalizedName",
        "modifiers": ["public"],
        "type": "BusinessSector",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "locale",
            "type": "Locale"
          },
          {
            "name": "name",
            "type": "String"
          }
        ],
        "body": "{\n    if (!lookupPolicy.canViewBusinessSectorLookup(name, locale)) {\n        throw new PermissionDeniedException(\"findBusinessSectorByLocalizedName\");\n    }\n    return lookupService.findBusinessSectorByLocalizedName(locale, name);\n}"
      },
      {
        "name": "findBusinessUnits",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["BusinessUnit"]
        },
        "annotations": [{"name": "Override"}],
        "body": "{\n    return lookupService.findBusinessUnits();\n}"
      },
      {
        "name": "findBusinessUnitByCode",
        "modifiers": ["public"],
        "type": "BusinessUnit",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    if (!lookupPolicy.canViewBusinessUnitLookup(code, Lang.ROOT)) {\n        throw new PermissionDeniedException(\"findBusinessUnitByCode\");\n    }\n    return lookupService.findBusinessUnitByCode(code);\n}"
      },
      {
        "name": "findBusinessUnitByLocalizedName",
        "modifiers": ["public"],
        "type": "BusinessUnit",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "locale",
            "type": "Locale"
          },
          {
            "name": "name",
            "type": "String"
          }
        ],
        "body": "{\n    if (!lookupPolicy.canViewBusinessUnitLookup(name, locale)) {\n        throw new PermissionDeniedException(\"findBusinessUnitByLocalizedName\");\n    }\n    return lookupService.findBusinessUnitByLocalizedName(locale, name);\n}"
      },
      {
        "name": "findBusinessClassifications",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["BusinessClassification"]
        },
        "annotations": [{"name": "Override"}],
        "body": "{\n    return lookupService.findBusinessClassifications();\n}"
      },
      {
        "name": "findBusinessClassificationByCode",
        "modifiers": ["public"],
        "type": "BusinessClassification",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    if (!lookupPolicy.canViewBusinessClassificationLookup(code, Lang.ROOT)) {\n        throw new PermissionDeniedException(\"findBusinessClassificationByCode\");\n    }\n    return lookupService.findBusinessClassificationByCode(code);\n}"
      },
      {
        "name": "findBusinessClassificationByLocalizedName",
        "modifiers": ["public"],
        "type": "BusinessClassification",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "locale",
            "type": "Locale"
          },
          {
            "name": "name",
            "type": "String"
          }
        ],
        "body": "{\n    if (!lookupPolicy.canViewBusinessClassificationLookup(name, locale)) {\n        throw new PermissionDeniedException(\"findBusinessClassificationByLocalizedName\");\n    }\n    return lookupService.findBusinessClassificationByLocalizedName(locale, name);\n}"
      },
      {
        "name": "validate",
        "modifiers": ["public"],
        "type": "OrganizationDetails",
        "parameters": [{
          "name": "organization",
          "type": "OrganizationDetails"
        }],
        "body": "{\n    List<Message> messages = validation.validate(organization);\n    if (!messages.isEmpty())\n        throw new BadRequestException(\"Organization has validation errors\", messages);\n    return organization;\n}"
      },
      {
        "name": "createOrganization",
        "modifiers": ["public"],
        "type": "OrganizationDetails",
        "parameters": [
          {
            "name": "displayName",
            "type": "String"
          },
          {
            "name": "groups",
            "type": {
              "class": "List",
              "generics": ["String"]
            }
          }
        ],
        "body": "{\n    if (!canCreateOrganization())\n        throw new PermissionDeniedException(\"createOrganization\");\n    return organizationService.createOrganization(validate(prototypeOrganization(displayName, groups)));\n}"
      },
      {
        "name": "updateOrganizationDisplayName",
        "modifiers": ["public"],
        "type": "OrganizationDetails",
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier"
          },
          {
            "name": "name",
            "type": "String"
          }
        ],
        "body": "{\n    if (!canUpdateOrganization(organizationId))\n        throw new PermissionDeniedException(\"updateOrganizationDisplayName: \" + organizationId);\n    return organizationService.updateOrganizationDisplayName(organizationId, validate(organizationService.findOrganizationDetails(organizationId).withDisplayName(name)).getDisplayName());\n}"
      },
      {
        "name": "updateOrganizationMainLocation",
        "modifiers": ["public"],
        "type": "OrganizationDetails",
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier"
          },
          {
            "name": "locationId",
            "type": "Identifier"
          }
        ],
        "body": "{\n    if (!canUpdateOrganization(organizationId))\n        throw new PermissionDeniedException(\"updateMainLocation: \" + organizationId);\n    return organizationService.updateOrganizationMainLocation(organizationId, validate(organizationService.findOrganizationDetails(organizationId).withMainLocationId(locationId)).getMainLocationId());\n}"
      },
      {
        "name": "updateOrganizationMainContact",
        "modifiers": ["public"],
        "type": "OrganizationDetails",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier"
          },
          {
            "name": "personId",
            "type": "Identifier"
          }
        ],
        "body": "{\n    if (!canUpdateOrganization(organizationId))\n        throw new PermissionDeniedException(\"updateOrganizationMainContact: \" + organizationId);\n    return organizationService.updateOrganizationMainContact(organizationId, validate(organizationService.findOrganizationDetails(organizationId).withMainContactId(personId)).getMainContactId());\n}"
      },
      {
        "name": "updateOrganizationGroups",
        "modifiers": ["public"],
        "type": "OrganizationDetails",
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier"
          },
          {
            "name": "groups",
            "type": {
              "class": "List",
              "generics": ["String"]
            }
          }
        ],
        "body": "{\n    if (!canUpdateOrganization(organizationId))\n        throw new PermissionDeniedException(\"setGroups: \" + organizationId + \", \" + groups);\n    return organizationService.updateOrganizationGroups(organizationId, validate(organizationService.findOrganizationDetails(organizationId).withGroups(groups)).getGroups());\n}"
      },
      {
        "name": "enableOrganization",
        "modifiers": ["public"],
        "type": "OrganizationSummary",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canEnableOrganization(organizationId))\n        throw new PermissionDeniedException(\"enableOrganization: \" + organizationId);\n    return organizationService.enableOrganization(validate(organizationService.findOrganizationDetails(organizationId).withStatus(Status.ACTIVE)).getOrganizationId());\n}"
      },
      {
        "name": "disableOrganization",
        "modifiers": ["public"],
        "type": "OrganizationSummary",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canDisableOrganization(organizationId))\n        throw new PermissionDeniedException(\"disableOrganization: \" + organizationId);\n    return organizationService.disableOrganization(validate(organizationService.findOrganizationDetails(organizationId).withStatus(Status.INACTIVE)).getOrganizationId());\n}"
      },
      {
        "name": "findOrganizationSummary",
        "modifiers": ["public"],
        "type": "OrganizationSummary",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canViewOrganization(organizationId))\n        throw new PermissionDeniedException(\"findOrganization: \" + organizationId);\n    return organizationService.findOrganizationDetails(organizationId);\n}"
      },
      {
        "name": "findOrganizationDetails",
        "modifiers": ["public"],
        "type": "OrganizationDetails",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canViewOrganization(organizationId))\n        throw new PermissionDeniedException(\"findOrganization: \" + organizationId);\n    return organizationService.findOrganizationDetails(organizationId);\n}"
      },
      {
        "name": "countOrganizations",
        "modifiers": ["public"],
        "type": "long",
        "parameters": [{
          "name": "filter",
          "type": "OrganizationsFilter"
        }],
        "body": "{\n    return organizationService.countOrganizations(filter);\n}"
      },
      {
        "name": "findOrganizationDetails",
        "modifiers": ["public"],
        "type": {
          "class": "FilteredPage",
          "generics": ["OrganizationDetails"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "OrganizationsFilter"
          },
          {
            "name": "paging",
            "type": "Paging"
          }
        ],
        "body": "{\n    return organizationService.findOrganizationDetails(filter, paging);\n}"
      },
      {
        "name": "findOrganizationSummaries",
        "modifiers": ["public"],
        "type": {
          "class": "FilteredPage",
          "generics": ["OrganizationSummary"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "OrganizationsFilter"
          },
          {
            "name": "paging",
            "type": "Paging"
          }
        ],
        "body": "{\n    return organizationService.findOrganizationSummaries(filter, paging);\n}"
      },
      {
        "name": "validate",
        "modifiers": ["public"],
        "type": "LocationDetails",
        "parameters": [{
          "name": "location",
          "type": "LocationDetails"
        }],
        "body": "{\n    List<Message> messages = validation.validate(location);\n    if (!messages.isEmpty())\n        throw new BadRequestException(\"Location has validation errors\", messages);\n    return location;\n}"
      },
      {
        "name": "createLocation",
        "modifiers": ["public"],
        "type": "LocationDetails",
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier"
          },
          {
            "name": "reference",
            "type": "String"
          },
          {
            "name": "displayName",
            "type": "String"
          },
          {
            "name": "address",
            "type": "MailingAddress"
          }
        ],
        "body": "{\n    if (!canCreateLocationForOrganization(organizationId))\n        throw new PermissionDeniedException(\"createLocation: \" + organizationId);\n    return locationService.createLocation(validate(prototypeLocation(organizationId, reference, displayName, address)));\n}"
      },
      {
        "name": "updateLocationName",
        "modifiers": ["public"],
        "type": "LocationDetails",
        "parameters": [
          {
            "name": "locationId",
            "type": "Identifier"
          },
          {
            "name": "displayName",
            "type": "String"
          }
        ],
        "body": "{\n    if (!canUpdateLocation(locationId))\n        throw new PermissionDeniedException(\"updateLocationName: \" + locationId);\n    return locationService.updateLocationName(locationId, validate(locationService.findLocationDetails(locationId).withDisplayName(displayName)).getDisplayName());\n}"
      },
      {
        "name": "updateLocationAddress",
        "modifiers": ["public"],
        "type": "LocationDetails",
        "parameters": [
          {
            "name": "locationId",
            "type": "Identifier"
          },
          {
            "name": "address",
            "type": "MailingAddress"
          }
        ],
        "body": "{\n    if (!canUpdateLocation(locationId))\n        throw new PermissionDeniedException(\"updateLocationAddress: \" + locationId);\n    return locationService.updateLocationAddress(locationId, validate(findLocationDetails(locationId).withAddress(address)).getAddress());\n}"
      },
      {
        "name": "enableLocation",
        "modifiers": ["public"],
        "type": "LocationSummary",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canEnableLocation(locationId))\n        throw new PermissionDeniedException(\"enableLocation: \" + locationId);\n    return locationService.enableLocation(validate(locationService.findLocationDetails(locationId).withStatus(Status.ACTIVE)).getLocationId());\n}"
      },
      {
        "name": "disableLocation",
        "modifiers": ["public"],
        "type": "LocationSummary",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canDisableLocation(locationId))\n        throw new PermissionDeniedException(\"disableLocation: \" + locationId);\n    return locationService.disableLocation(validate(locationService.findLocationDetails(locationId).withStatus(Status.INACTIVE)).getLocationId());\n}"
      },
      {
        "name": "findLocationSummary",
        "modifiers": ["public"],
        "type": "LocationSummary",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canViewLocation(locationId))\n        throw new PermissionDeniedException(\"findLocation: \" + locationId);\n    return locationService.findLocationSummary(locationId);\n}"
      },
      {
        "name": "findLocationDetails",
        "modifiers": ["public"],
        "type": "LocationDetails",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canViewLocation(locationId))\n        throw new PermissionDeniedException(\"findLocation: \" + locationId);\n    return locationService.findLocationDetails(locationId);\n}"
      },
      {
        "name": "countLocations",
        "modifiers": ["public"],
        "type": "long",
        "parameters": [{
          "name": "filter",
          "type": "LocationsFilter"
        }],
        "body": "{\n    return locationService.countLocations(filter);\n}"
      },
      {
        "name": "findLocationDetails",
        "modifiers": ["public"],
        "type": {
          "class": "FilteredPage",
          "generics": ["LocationDetails"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "LocationsFilter"
          },
          {
            "name": "paging",
            "type": "Paging"
          }
        ],
        "body": "{\n    return locationService.findLocationDetails(filter, paging);\n}"
      },
      {
        "name": "findLocationSummaries",
        "modifiers": ["public"],
        "type": {
          "class": "FilteredPage",
          "generics": ["LocationSummary"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "LocationsFilter"
          },
          {
            "name": "paging",
            "type": "Paging"
          }
        ],
        "body": "{\n    return locationService.findLocationSummaries(filter, paging);\n}"
      },
      {
        "name": "validate",
        "modifiers": ["public"],
        "type": "PersonDetails",
        "parameters": [{
          "name": "person",
          "type": "PersonDetails"
        }],
        "body": "{\n    List<Message> messages = validation.validate(person);\n    if (!messages.isEmpty())\n        throw new BadRequestException(\"Person has validation errors\", messages);\n    return person;\n}"
      },
      {
        "name": "createPerson",
        "modifiers": ["public"],
        "type": "PersonDetails",
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier"
          },
          {
            "name": "name",
            "type": "PersonName"
          },
          {
            "name": "address",
            "type": "MailingAddress"
          },
          {
            "name": "communication",
            "type": "Communication"
          },
          {
            "name": "position",
            "type": "BusinessPosition"
          }
        ],
        "body": "{\n    if (!canCreatePersonForOrganization(organizationId))\n        throw new PermissionDeniedException(\"createPerson: \" + organizationId);\n    return personService.createPerson(validate(prototypePerson(organizationId, name, address, communication, position)));\n}"
      },
      {
        "name": "updatePersonName",
        "modifiers": ["public"],
        "type": "PersonDetails",
        "parameters": [
          {
            "name": "personId",
            "type": "Identifier"
          },
          {
            "name": "name",
            "type": "PersonName"
          }
        ],
        "body": "{\n    if (!canUpdatePerson(personId))\n        throw new PermissionDeniedException(\"updatePersonName: \" + personId);\n    return personService.updatePersonName(personId, validate(findPersonDetails(personId).withLegalName(name)).getLegalName());\n}"
      },
      {
        "name": "updatePersonAddress",
        "modifiers": ["public"],
        "type": "PersonDetails",
        "parameters": [
          {
            "name": "personId",
            "type": "Identifier"
          },
          {
            "name": "address",
            "type": "MailingAddress"
          }
        ],
        "body": "{\n    if (!canUpdatePerson(personId))\n        throw new PermissionDeniedException(\"updatePersonAddress: \" + personId);\n    return personService.updatePersonAddress(personId, validate(findPersonDetails(personId).withAddress(address)).getAddress());\n}"
      },
      {
        "name": "updatePersonCommunication",
        "modifiers": ["public"],
        "type": "PersonDetails",
        "parameters": [
          {
            "name": "personId",
            "type": "Identifier"
          },
          {
            "name": "communication",
            "type": "Communication"
          }
        ],
        "body": "{\n    if (!canUpdatePerson(personId))\n        throw new PermissionDeniedException(\"updatePersonCommunication: \" + personId);\n    return personService.updatePersonCommunication(personId, validate(findPersonDetails(personId).withCommunication(communication)).getCommunication());\n}"
      },
      {
        "name": "updatePersonBusinessPosition",
        "modifiers": ["public"],
        "type": "PersonDetails",
        "parameters": [
          {
            "name": "personId",
            "type": "Identifier"
          },
          {
            "name": "position",
            "type": "BusinessPosition"
          }
        ],
        "body": "{\n    if (!canUpdatePerson(personId))\n        throw new PermissionDeniedException(\"updatePersonBusinessPosition: \" + personId);\n    return personService.updatePersonBusinessPosition(personId, validate(findPersonDetails(personId).withPosition(position)).getPosition());\n}"
      },
      {
        "name": "enablePerson",
        "modifiers": ["public"],
        "type": "PersonSummary",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canEnablePerson(personId))\n        throw new PermissionDeniedException(\"enablePerson: \" + personId);\n    return personService.enablePerson(validate(personService.findPersonDetails(personId).withStatus(Status.ACTIVE)).getPersonId());\n}"
      },
      {
        "name": "disablePerson",
        "modifiers": ["public"],
        "type": "PersonSummary",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canDisablePerson(personId))\n        throw new PermissionDeniedException(\"disablePerson: \" + personId);\n    return personService.disablePerson(validate(personService.findPersonDetails(personId).withStatus(Status.INACTIVE)).getPersonId());\n}"
      },
      {
        "name": "findPersonSummary",
        "modifiers": ["public"],
        "type": "PersonSummary",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canViewPerson(personId))\n        throw new PermissionDeniedException(\"findPerson: \" + personId);\n    return personService.findPersonSummary(personId);\n}"
      },
      {
        "name": "findPersonDetails",
        "modifiers": ["public"],
        "type": "PersonDetails",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canViewPerson(personId))\n        throw new PermissionDeniedException(\"findPerson: \" + personId);\n    return personService.findPersonDetails(personId);\n}"
      },
      {
        "name": "countPersons",
        "modifiers": ["public"],
        "type": "long",
        "parameters": [{
          "name": "filter",
          "type": "PersonsFilter"
        }],
        "body": "{\n    return personService.countPersons(filter);\n}"
      },
      {
        "name": "findPersonDetails",
        "modifiers": ["public"],
        "type": {
          "class": "FilteredPage",
          "generics": ["PersonDetails"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "PersonsFilter"
          },
          {
            "name": "paging",
            "type": "Paging"
          }
        ],
        "body": "{\n    return personService.findPersonDetails(filter, paging);\n}"
      },
      {
        "name": "findPersonSummaries",
        "modifiers": ["public"],
        "type": {
          "class": "FilteredPage",
          "generics": ["PersonSummary"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "PersonsFilter"
          },
          {
            "name": "paging",
            "type": "Paging"
          }
        ],
        "body": "{\n    return personService.findPersonSummaries(filter, paging);\n}"
      },
      {
        "name": "validate",
        "modifiers": ["public"],
        "type": "User",
        "parameters": [{
          "name": "user",
          "type": "User"
        }],
        "body": "{\n    List<Message> messages = validation.validate(user);\n    if (!messages.isEmpty())\n        throw new BadRequestException(\"User has validation errors\", messages);\n    return user;\n}"
      },
      {
        "name": "createUser",
        "modifiers": ["public"],
        "type": "User",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "personId",
            "type": "Identifier"
          },
          {
            "name": "username",
            "type": "String"
          },
          {
            "name": "roles",
            "type": {
              "class": "List",
              "generics": ["String"]
            }
          }
        ],
        "body": "{\n    if (!canCreateUserForPerson(personId))\n        throw new PermissionDeniedException(\"createUser: \" + personId);\n    return userService.createUser(validate(prototypeUser(personId, username, roles)));\n}"
      },
      {
        "name": "enableUser",
        "modifiers": ["public"],
        "type": "User",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canEnableUser(userId))\n        throw new PermissionDeniedException(\"enableUser: \" + userId);\n    return userService.enableUser(validate(userService.findUser(userId).withStatus(Status.ACTIVE)).getUserId());\n}"
      },
      {
        "name": "disableUser",
        "modifiers": ["public"],
        "type": "User",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canDisableUser(userId))\n        throw new PermissionDeniedException(\"enableUser: \" + userId);\n    return userService.disableUser(validate(userService.findUser(userId).withStatus(Status.INACTIVE)).getUserId());\n}"
      },
      {
        "name": "findUser",
        "modifiers": ["public"],
        "type": "User",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canViewUser(userId))\n        throw new PermissionDeniedException(\"findUser: \" + userId);\n    return userService.findUser(userId);\n}"
      },
      {
        "name": "findUserByUsername",
        "modifiers": ["public"],
        "type": "User",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "username",
          "type": "String"
        }],
        "body": "{\n    if (!canViewUser(username))\n        throw new PermissionDeniedException(\"findUserByUsername: \" + username);\n    return userService.findUserByUsername(username);\n}"
      },
      {
        "name": "updateUserRoles",
        "modifiers": ["public"],
        "type": "User",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "userId",
            "type": "Identifier"
          },
          {
            "name": "roles",
            "type": {
              "class": "List",
              "generics": ["String"]
            }
          }
        ],
        "body": "{\n    if (!canUpdateUserRole(userId))\n        throw new PermissionDeniedException(\"setRoles: \" + userId);\n    return userService.updateUserRoles(userId, validate(findUser(userId).withRoles(roles)).getRoles());\n}"
      },
      {
        "name": "changePassword",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "userId",
            "type": "Identifier"
          },
          {
            "name": "currentPassword",
            "type": "String"
          },
          {
            "name": "newPassword",
            "type": "String"
          }
        ],
        "body": "{\n    return userService.changePassword(userId, currentPassword, newPassword);\n}"
      },
      {
        "name": "resetPassword",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canUpdateUserPassword(userId)) {\n        throw new PermissionDeniedException(\"resetPassword:\" + userId);\n    }\n    return userService.resetPassword(userId);\n}"
      },
      {
        "name": "countUsers",
        "modifiers": ["public"],
        "type": "long",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "filter",
          "type": "UsersFilter"
        }],
        "body": "{\n    return userService.countUsers(filter);\n}"
      },
      {
        "name": "findUsers",
        "modifiers": ["public"],
        "type": {
          "class": "FilteredPage",
          "generics": ["User"]
        },
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "filter",
            "type": "UsersFilter"
          },
          {
            "name": "paging",
            "type": "Paging"
          }
        ],
        "body": "{\n    return userService.findUsers(filter, paging);\n}"
      },
      {
        "name": "canEnableUser",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    return userPolicy.canEnableUser(userId);\n}"
      },
      {
        "name": "canDisableUser",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    return userPolicy.canDisableUser(userId);\n}"
      },
      {
        "name": "canViewUser",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "username",
          "type": "String"
        }],
        "body": "{\n    return userPolicy.canViewUser(username);\n}"
      },
      {
        "name": "canViewUser",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    return userPolicy.canViewUser(userId);\n}"
      },
      {
        "name": "canUpdateUserRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    return userPolicy.canUpdateUserRole(userId);\n}"
      },
      {
        "name": "canUpdateUserPassword",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "userId",
          "type": "Identifier"
        }],
        "body": "{\n    return userPolicy.canUpdateUserPassword(userId);\n}"
      },
      {
        "name": "canCreateOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "body": "{\n    return organizationPolicy.canCreateOrganization();\n}"
      },
      {
        "name": "canViewOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    return organizationPolicy.canViewOrganization(organizationId);\n}"
      },
      {
        "name": "canUpdateOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    return organizationPolicy.canUpdateOrganization(organizationId);\n}"
      },
      {
        "name": "canEnableOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    return organizationPolicy.canEnableOrganization(organizationId);\n}"
      },
      {
        "name": "canDisableOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier"
        }],
        "body": "{\n    return organizationPolicy.canDisableOrganization(organizationId);\n}"
      },
      {
        "name": "canCreateLocationForOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    return locationPolicy.canCreateLocationForOrganization(locationId);\n}"
      },
      {
        "name": "canViewLocation",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    return locationPolicy.canViewLocation(locationId);\n}"
      },
      {
        "name": "canUpdateLocation",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    return locationPolicy.canUpdateLocation(locationId);\n}"
      },
      {
        "name": "canEnableLocation",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    return locationPolicy.canEnableLocation(locationId);\n}"
      },
      {
        "name": "canDisableLocation",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier"
        }],
        "body": "{\n    return locationPolicy.canDisableLocation(locationId);\n}"
      },
      {
        "name": "canCreatePersonForOrganization",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    return personPolicy.canCreatePersonForOrganization(personId);\n}"
      },
      {
        "name": "canViewPerson",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    return personPolicy.canViewPerson(personId);\n}"
      },
      {
        "name": "canUpdatePerson",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    return personPolicy.canUpdatePerson(personId);\n}"
      },
      {
        "name": "canEnablePerson",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    return personPolicy.canEnablePerson(personId);\n}"
      },
      {
        "name": "canDisablePerson",
        "modifiers": ["public"],
        "type": "boolean",
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    return personPolicy.canDisablePerson(personId);\n}"
      },
      {
        "name": "canCreateUserForPerson",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "personId",
          "type": "Identifier"
        }],
        "body": "{\n    return userPolicy.canCreateUserForPerson(personId);\n}"
      },
      {
        "name": "validate",
        "modifiers": ["public"],
        "type": "Group",
        "parameters": [{
          "name": "group",
          "type": "Group"
        }],
        "body": "{\n    List<Message> messages = validation.validate(group);\n    if (!messages.isEmpty())\n        throw new BadRequestException(\"Group has validation errors\", messages);\n    return group;\n}"
      },
      {
        "name": "createGroup",
        "modifiers": ["public"],
        "type": "Group",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "name",
          "type": "Localized"
        }],
        "body": "{\n    if (!canCreateGroup())\n        throw new PermissionDeniedException(\"createGroup: \" + name);\n    return permissionsService.createGroup(validate(prototypeGroup(name)));\n}"
      },
      {
        "name": "findGroups",
        "modifiers": ["public"],
        "type": {
          "class": "FilteredPage",
          "generics": ["Group"]
        },
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "filter",
            "type": "GroupsFilter"
          },
          {
            "name": "paging",
            "type": "Paging"
          }
        ],
        "body": "{\n    return permissionsService.findGroups(filter, paging);\n}"
      },
      {
        "name": "findGroup",
        "modifiers": ["public"],
        "type": "Group",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canViewGroup(groupId))\n        throw new PermissionDeniedException(\"findGroup: \" + groupId);\n    return permissionsService.findGroup(groupId);\n}"
      },
      {
        "name": "findGroupByCode",
        "modifiers": ["public"],
        "type": "Group",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    if (!canViewGroup(code))\n        throw new PermissionDeniedException(\"findGroupByCode: \" + code);\n    return permissionsService.findGroupByCode(code);\n}"
      },
      {
        "name": "updateGroupName",
        "modifiers": ["public"],
        "type": "Group",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "groupId",
            "type": "Identifier"
          },
          {
            "name": "name",
            "type": "Localized"
          }
        ],
        "body": "{\n    if (!canUpdateGroup(groupId))\n        throw new PermissionDeniedException(\"updateGroupName: \" + groupId);\n    return permissionsService.updateGroupName(groupId, validate(findGroup(groupId).withName(name)).getName());\n}"
      },
      {
        "name": "enableGroup",
        "modifiers": ["public"],
        "type": "Group",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canEnableGroup(groupId))\n        throw new PermissionDeniedException(\"enableGroup: \" + groupId);\n    return permissionsService.enableGroup(validate(findGroup(groupId).withStatus(Status.ACTIVE)).getGroupId());\n}"
      },
      {
        "name": "disableGroup",
        "modifiers": ["public"],
        "type": "Group",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canDisableGroup(groupId))\n        throw new PermissionDeniedException(\"disableGroup: \" + groupId);\n    return permissionsService.disableGroup(validate(findGroup(groupId).withStatus(Status.INACTIVE)).getGroupId());\n}"
      },
      {
        "name": "validate",
        "modifiers": ["public"],
        "type": "Role",
        "parameters": [{
          "name": "role",
          "type": "Role"
        }],
        "body": "{\n    List<Message> messages = validation.validate(role);\n    if (!messages.isEmpty())\n        throw new BadRequestException(\"Role has validation errors\", messages);\n    return role;\n}"
      },
      {
        "name": "findRoles",
        "modifiers": ["public"],
        "type": {
          "class": "FilteredPage",
          "generics": ["Role"]
        },
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "filter",
            "type": "RolesFilter"
          },
          {
            "name": "paging",
            "type": "Paging"
          }
        ],
        "body": "{\n    if (!canViewRoles())\n        throw new PermissionDeniedException(\"findRoles: \" + filter);\n    return permissionsService.findRoles(filter, paging);\n}"
      },
      {
        "name": "findRole",
        "modifiers": ["public"],
        "type": "Role",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canViewRole(roleId))\n        throw new PermissionDeniedException(\"findRole: \" + roleId);\n    return permissionsService.findRole(roleId);\n}"
      },
      {
        "name": "findRoleByCode",
        "modifiers": ["public"],
        "type": "Role",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    if (!canViewRole(code))\n        throw new PermissionDeniedException(\"findRoleByCode: \" + code);\n    return permissionsService.findRoleByCode(code);\n}"
      },
      {
        "name": "createRole",
        "modifiers": ["public"],
        "type": "Role",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "groupId",
            "type": "Identifier"
          },
          {
            "name": "name",
            "type": "Localized"
          }
        ],
        "body": "{\n    if (!canCreateRole(groupId))\n        throw new PermissionDeniedException(\"createRole: \" + groupId);\n    return permissionsService.createRole(validate(prototypeRole(groupId, name)));\n}"
      },
      {
        "name": "updateRoleName",
        "modifiers": ["public"],
        "type": "Role",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "roleId",
            "type": "Identifier"
          },
          {
            "name": "name",
            "type": "Localized"
          }
        ],
        "body": "{\n    if (!canUpdateRole(roleId))\n        throw new PermissionDeniedException(\"updateRoleName: \" + roleId);\n    return permissionsService.updateRoleName(roleId, validate(findRole(roleId).withName(name)).getName());\n}"
      },
      {
        "name": "enableRole",
        "modifiers": ["public"],
        "type": "Role",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canEnableRole(roleId))\n        throw new PermissionDeniedException(\"enableRole: \" + roleId);\n    return permissionsService.enableRole(validate(findRole(roleId).withStatus(Status.ACTIVE)).getRoleId());\n}"
      },
      {
        "name": "disableRole",
        "modifiers": ["public"],
        "type": "Role",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    if (!canDisableRole(roleId))\n        throw new PermissionDeniedException(\"disableRole: \" + roleId);\n    return permissionsService.disableRole(validate(findRole(roleId).withStatus(Status.INACTIVE)).getRoleId());\n}"
      },
      {
        "name": "canCreateGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return permissionsPolicy.canCreateGroup();\n}"
      },
      {
        "name": "canViewGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "group",
          "type": "String"
        }],
        "body": "{\n    return permissionsPolicy.canViewGroup(group);\n}"
      },
      {
        "name": "canViewGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    return permissionsPolicy.canViewGroup(groupId);\n}"
      },
      {
        "name": "canUpdateGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    return permissionsPolicy.canUpdateGroup(groupId);\n}"
      },
      {
        "name": "canEnableGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    return permissionsPolicy.canEnableGroup(groupId);\n}"
      },
      {
        "name": "canDisableGroup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    return permissionsPolicy.canDisableGroup(groupId);\n}"
      },
      {
        "name": "canCreateRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "groupId",
          "type": "Identifier"
        }],
        "body": "{\n    return permissionsPolicy.canCreateRole(groupId);\n}"
      },
      {
        "name": "canViewRoles",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return permissionsPolicy.canViewRoles();\n}"
      },
      {
        "name": "canViewRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "code",
          "type": "String"
        }],
        "body": "{\n    return permissionsPolicy.canViewRole(code);\n}"
      },
      {
        "name": "canViewRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    return permissionsPolicy.canViewRole(roleId);\n}"
      },
      {
        "name": "canUpdateRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    return permissionsPolicy.canUpdateRole(roleId);\n}"
      },
      {
        "name": "canEnableRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    return permissionsPolicy.canEnableRole(roleId);\n}"
      },
      {
        "name": "canDisableRole",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "roleId",
          "type": "Identifier"
        }],
        "body": "{\n    return permissionsPolicy.canDisableRole(roleId);\n}"
      },
      {
        "name": "canViewBusinessClassificationLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "classificationLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return lookupPolicy.canViewBusinessClassificationLookup(classificationLookup, locale);\n}"
      },
      {
        "name": "canViewBusinessSectorLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "sectorLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return lookupPolicy.canViewBusinessSectorLookup(sectorLookup, locale);\n}"
      },
      {
        "name": "canViewBusinessUnitLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "unitLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return lookupPolicy.canViewBusinessUnitLookup(unitLookup, locale);\n}"
      },
      {
        "name": "canViewCountryLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "CountryLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return lookupPolicy.canViewCountryLookup(CountryLookup, locale);\n}"
      },
      {
        "name": "canViewLanguageLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "languageLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return lookupPolicy.canViewLanguageLookup(languageLookup, locale);\n}"
      },
      {
        "name": "canViewProvinceLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "countryLookup",
            "type": "String"
          },
          {
            "name": "provinceLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return lookupPolicy.canViewProvinceLookup(countryLookup, provinceLookup, locale);\n}"
      },
      {
        "name": "canViewSalutationLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "salutationLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return lookupPolicy.canViewSalutationLookup(salutationLookup, locale);\n}"
      },
      {
        "name": "canViewStatusLookup",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "StatusLookup",
            "type": "String"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ],
        "body": "{\n    return lookupPolicy.canViewStatusLookup(StatusLookup, locale);\n}"
      }
    ]
  },
  "ca.magex.crm.api.services.CrmAuthenticationService": {
    "name": "CrmAuthenticationService",
    "imports": {
      "User": "ca.magex.crm.api.roles",
      "Identifier": "ca.magex.crm.api.system"
    },
    "type": "interface",
    "modifiers": ["public"],
    "fields": [
      {
        "name": "SYS_ADMIN",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "String"
      },
      {
        "name": "CRM_ADMIN",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "String"
      },
      {
        "name": "CRM_USER",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "String"
      },
      {
        "name": "ORG_ADMIN",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "String"
      },
      {
        "name": "ORG_USER",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "isAuthenticated",
        "type": "boolean"
      },
      {
        "name": "getCurrentUser",
        "type": "User"
      },
      {
        "name": "isUserInRole",
        "type": "boolean",
        "parameters": [{
          "name": "role",
          "type": "String"
        }]
      },
      {
        "name": "getUserId",
        "type": "Identifier"
      },
      {
        "name": "getPersonId",
        "type": "Identifier"
      },
      {
        "name": "getOrganizationId",
        "type": "Identifier"
      }
    ]
  },
  "ca.magex.crm.api.services.CrmClient": {
    "name": "CrmClient",
    "imports": {"CrmPolicies": "ca.magex.crm.api.policies"},
    "type": "interface",
    "modifiers": ["public"],
    "extends": [
      "CrmInitializationService",
      "CrmServices",
      "CrmPolicies"
    ],
    "methods": [
      {
        "name": "login",
        "type": "boolean",
        "parameters": [
          {
            "name": "username",
            "type": "String"
          },
          {
            "name": "password",
            "type": "String"
          }
        ]
      },
      {
        "name": "logout",
        "type": "boolean"
      }
    ]
  },
  "ca.magex.crm.api.services.CrmInitializationService": {
    "name": "CrmInitializationService",
    "imports": {
      "OutputStream": "java.io",
      "PersonName": "ca.magex.crm.api.common",
      "User": "ca.magex.crm.api.roles"
    },
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "isInitialized",
        "type": "boolean"
      },
      {
        "name": "initializeSystem",
        "type": "User",
        "parameters": [
          {
            "name": "organization",
            "type": "String"
          },
          {
            "name": "name",
            "type": "PersonName"
          },
          {
            "name": "email",
            "type": "String"
          },
          {
            "name": "username",
            "type": "String"
          },
          {
            "name": "password",
            "type": "String"
          }
        ]
      },
      {
        "name": "reset",
        "type": "boolean"
      },
      {
        "name": "dump",
        "parameters": [{
          "name": "os",
          "type": "OutputStream"
        }]
      },
      {
        "name": "dump",
        "modifiers": ["default"],
        "body": "{\n    dump(System.out);\n}"
      }
    ]
  },
  "ca.magex.crm.api.services.CrmLocationService": {
    "name": "CrmLocationService",
    "imports": {
      "NotNull": "javax.validation.constraints",
      "MailingAddress": "ca.magex.crm.api.common",
      "LocationDetails": "ca.magex.crm.api.crm",
      "LocationSummary": "ca.magex.crm.api.crm",
      "LocationsFilter": "ca.magex.crm.api.filters",
      "Paging": "ca.magex.crm.api.filters",
      "FilteredPage": "ca.magex.crm.api.system",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "prototypeLocation",
        "modifiers": ["default"],
        "type": "LocationDetails",
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "reference",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "displayName",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "address",
            "type": "MailingAddress",
            "annotations": [{"name": "NotNull"}]
          }
        ],
        "body": "{\n    return new LocationDetails(null, organizationId, Status.PENDING, reference, displayName, address);\n}"
      },
      {
        "name": "createLocation",
        "modifiers": ["default"],
        "type": "LocationDetails",
        "parameters": [{
          "name": "prototype",
          "type": "LocationDetails"
        }],
        "body": "{\n    return createLocation(prototype.getOrganizationId(), prototype.getReference(), prototype.getDisplayName(), prototype.getAddress());\n}"
      },
      {
        "name": "createLocation",
        "type": "LocationDetails",
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "reference",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "displayName",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "address",
            "type": "MailingAddress",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "enableLocation",
        "type": "LocationSummary",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "disableLocation",
        "type": "LocationSummary",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "updateLocationName",
        "type": "LocationDetails",
        "parameters": [
          {
            "name": "locationId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "displaysName",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "updateLocationAddress",
        "type": "LocationDetails",
        "parameters": [
          {
            "name": "locationId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "address",
            "type": "MailingAddress",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findLocationSummary",
        "type": "LocationSummary",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findLocationDetails",
        "type": "LocationDetails",
        "parameters": [{
          "name": "locationId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "countLocations",
        "type": "long",
        "parameters": [{
          "name": "filter",
          "type": "LocationsFilter",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findLocationDetails",
        "type": {
          "class": "FilteredPage",
          "generics": ["LocationDetails"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "LocationsFilter",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "paging",
            "type": "Paging",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findLocationSummaries",
        "type": {
          "class": "FilteredPage",
          "generics": ["LocationSummary"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "LocationsFilter",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "paging",
            "type": "Paging",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findLocationDetails",
        "modifiers": ["default"],
        "type": {
          "class": "FilteredPage",
          "generics": ["LocationDetails"]
        },
        "parameters": [{
          "name": "filter",
          "type": "LocationsFilter",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return findLocationDetails(filter, defaultLocationsPaging());\n}"
      },
      {
        "name": "findLocationSummaries",
        "modifiers": ["default"],
        "type": {
          "class": "FilteredPage",
          "generics": ["LocationSummary"]
        },
        "parameters": [{
          "name": "filter",
          "type": "LocationsFilter",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return findLocationSummaries(filter, defaultLocationsPaging());\n}"
      },
      {
        "name": "findActiveLocationSummariesForOrg",
        "modifiers": ["default"],
        "type": {
          "class": "FilteredPage",
          "generics": ["LocationSummary"]
        },
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return findLocationSummaries(new LocationsFilter(organizationId, null, null, Status.ACTIVE));\n}"
      },
      {
        "name": "defaultLocationsFilter",
        "modifiers": ["default"],
        "type": "LocationsFilter",
        "body": "{\n    return new LocationsFilter();\n}"
      },
      {
        "name": "defaultLocationsPaging",
        "modifiers": ["default"],
        "type": "Paging",
        "body": "{\n    return new Paging(LocationsFilter.getSortOptions().get(0));\n}"
      }
    ]
  },
  "ca.magex.crm.api.services.CrmLookupService": {
    "name": "CrmLookupService",
    "imports": {
      "List": "java.util",
      "Locale": "java.util",
      "NotNull": "javax.validation.constraints",
      "BusinessClassification": "ca.magex.crm.api.lookup",
      "BusinessSector": "ca.magex.crm.api.lookup",
      "BusinessUnit": "ca.magex.crm.api.lookup",
      "Country": "ca.magex.crm.api.lookup",
      "Language": "ca.magex.crm.api.lookup",
      "Province": "ca.magex.crm.api.lookup",
      "Salutation": "ca.magex.crm.api.lookup",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "findStatuses",
        "type": {
          "class": "List",
          "generics": ["Status"]
        }
      },
      {
        "name": "findStatusByCode",
        "type": "Status",
        "parameters": [{
          "name": "code",
          "type": "String",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findStatusByLocalizedName",
        "type": "Status",
        "parameters": [
          {
            "name": "locale",
            "type": "Locale",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findCountries",
        "type": {
          "class": "List",
          "generics": ["Country"]
        }
      },
      {
        "name": "findCountryByCode",
        "type": "Country",
        "parameters": [{
          "name": "code",
          "type": "String",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findCountryByLocalizedName",
        "type": "Country",
        "parameters": [
          {
            "name": "locale",
            "type": "Locale",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findProvinces",
        "type": {
          "class": "List",
          "generics": ["Province"]
        },
        "parameters": [{
          "name": "country",
          "type": "String"
        }]
      },
      {
        "name": "findProvinceByCode",
        "type": "Province",
        "parameters": [
          {
            "name": "province",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "country",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findProvinceByLocalizedName",
        "type": "Province",
        "parameters": [
          {
            "name": "locale",
            "type": "Locale",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "province",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "country",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findLanguages",
        "type": {
          "class": "List",
          "generics": ["Language"]
        }
      },
      {
        "name": "findLanguageByCode",
        "type": "Language",
        "parameters": [{
          "name": "code",
          "type": "String",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findLanguageByLocalizedName",
        "type": "Language",
        "parameters": [
          {
            "name": "locale",
            "type": "Locale",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findSalutations",
        "type": {
          "class": "List",
          "generics": ["Salutation"]
        }
      },
      {
        "name": "findSalutationByCode",
        "type": "Salutation",
        "parameters": [{
          "name": "code",
          "type": "String",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findSalutationByLocalizedName",
        "type": "Salutation",
        "parameters": [
          {
            "name": "locale",
            "type": "Locale",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findBusinessSectors",
        "type": {
          "class": "List",
          "generics": ["BusinessSector"]
        }
      },
      {
        "name": "findBusinessSectorByCode",
        "type": "BusinessSector",
        "parameters": [{
          "name": "code",
          "type": "String",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findBusinessSectorByLocalizedName",
        "type": "BusinessSector",
        "parameters": [
          {
            "name": "locale",
            "type": "Locale",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findBusinessUnits",
        "type": {
          "class": "List",
          "generics": ["BusinessUnit"]
        }
      },
      {
        "name": "findBusinessUnitByCode",
        "type": "BusinessUnit",
        "parameters": [{
          "name": "code",
          "type": "String",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findBusinessUnitByLocalizedName",
        "type": "BusinessUnit",
        "parameters": [
          {
            "name": "locale",
            "type": "Locale",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findBusinessClassifications",
        "type": {
          "class": "List",
          "generics": ["BusinessClassification"]
        }
      },
      {
        "name": "findBusinessClassificationByCode",
        "type": "BusinessClassification",
        "parameters": [{
          "name": "code",
          "type": "String",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findBusinessClassificationByLocalizedName",
        "type": "BusinessClassification",
        "parameters": [
          {
            "name": "locale",
            "type": "Locale",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      }
    ]
  },
  "ca.magex.crm.api.services.CrmOrganizationService": {
    "name": "CrmOrganizationService",
    "description": "The CRM Organization service is used to manage organizations that are owned\nby business customers.\n\nThere are must be at least one organization in the system with the \"CRM\"\ngroup assigned to it in order to create and manage new organizations in the\nsystem. Organizations with the \"CRM\" group can then create users with the\n\"CRM_ADMIN\" role which will be able to manage the customers organizations.\nUsers in this org with the \"CRM_USER\" role will have some limited\nfunctionality to search and maintain some of the organization information.\n\nAll customer organizations should have the \"ORG\" group assigned to them in\norder to keep their own organization information up to date. There should be\none main location and one main contact that are used for communication\ninformation in case information needs to be mailed or an email / phone call\nis required to get information. All users with the \"ORG_ADMIN\" role will be\nable to keep their locations and persons up to date for their organization.\n\nNote that organizations are never deleted from the system just enabled and\ndisabled, so it is important to make sure that the organization does not\nalready exist in the system before creating a new one.\n\n@author scott",
    "imports": {
      "List": "java.util",
      "NotNull": "javax.validation.constraints",
      "OrganizationDetails": "ca.magex.crm.api.crm",
      "OrganizationSummary": "ca.magex.crm.api.crm",
      "OrganizationsFilter": "ca.magex.crm.api.filters",
      "Paging": "ca.magex.crm.api.filters",
      "FilteredPage": "ca.magex.crm.api.system",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "prototypeOrganization",
        "modifiers": ["default"],
        "type": "OrganizationDetails",
        "parameters": [
          {
            "name": "displayName",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "groups",
            "type": {
              "class": "List",
              "generics": ["String"]
            },
            "annotations": [{"name": "NotNull"}]
          }
        ],
        "body": "{\n    return new OrganizationDetails(null, Status.PENDING, displayName, null, null, groups);\n}"
      },
      {
        "name": "createOrganization",
        "modifiers": ["default"],
        "type": "OrganizationDetails",
        "parameters": [{
          "name": "prototype",
          "type": "OrganizationDetails"
        }],
        "body": "{\n    return createOrganization(prototype.getDisplayName(), prototype.getGroups());\n}"
      },
      {
        "name": "createOrganization",
        "description": "Create a new organization for a customer or the system.\n\nThe \"SYS\" group should be assigned for system users.\nThe \"APP\" group should be assigned for background applications.\nThe \"CRM\" group should be assigned for internal users.\nThe \"ORG\" group should be assigned for customer users.\n\n@param organizationDisplayName The name the organization should be displayed in.\n@param groups The list of permission groups the users can be assigned to.\n@return Details about the new organization",
        "type": "OrganizationDetails",
        "parameters": [
          {
            "name": "displayName",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "groups",
            "type": {
              "class": "List",
              "generics": ["String"]
            },
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "enableOrganization",
        "description": "Enable an existing organization that was disabled. If the organization is\nalready enabled then nothing will be modified.\n\n@param organizationId The organization id to enable.\n@return The organization that was enabled.",
        "type": "OrganizationSummary",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "disableOrganization",
        "description": "Disable an existing organization that is active. If the organization is\nalready disabled then nothing will be modified.\n\nNote that SYS, APP and CRM organizations cannot be disabled as they are required\nfor the system to function.\n\n@param organizationId The organization id to disable.\n@return The organization that was disabled.",
        "type": "OrganizationSummary",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "updateOrganizationDisplayName",
        "type": "OrganizationDetails",
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "updateOrganizationMainLocation",
        "type": "OrganizationDetails",
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "locationId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "updateOrganizationMainContact",
        "type": "OrganizationDetails",
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "personId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "updateOrganizationGroups",
        "type": "OrganizationDetails",
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "groups",
            "type": {
              "class": "List",
              "generics": ["String"]
            },
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findOrganizationSummary",
        "type": "OrganizationSummary",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findOrganizationDetails",
        "type": "OrganizationDetails",
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "countOrganizations",
        "type": "long",
        "parameters": [{
          "name": "filter",
          "type": "OrganizationsFilter",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findOrganizationDetails",
        "type": {
          "class": "FilteredPage",
          "generics": ["OrganizationDetails"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "OrganizationsFilter",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "paging",
            "type": "Paging",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findOrganizationSummaries",
        "type": {
          "class": "FilteredPage",
          "generics": ["OrganizationSummary"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "OrganizationsFilter",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "paging",
            "type": "Paging",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findOrganizationDetails",
        "modifiers": ["default"],
        "type": {
          "class": "FilteredPage",
          "generics": ["OrganizationDetails"]
        },
        "parameters": [{
          "name": "filter",
          "type": "OrganizationsFilter",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return findOrganizationDetails(filter, OrganizationsFilter.getDefaultPaging());\n}"
      },
      {
        "name": "findOrganizationSummaries",
        "modifiers": ["default"],
        "type": {
          "class": "FilteredPage",
          "generics": ["OrganizationSummary"]
        },
        "parameters": [{
          "name": "filter",
          "type": "OrganizationsFilter",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return findOrganizationSummaries(filter, OrganizationsFilter.getDefaultPaging());\n}"
      },
      {
        "name": "defaultOrganizationsFilter",
        "modifiers": ["default"],
        "type": "OrganizationsFilter",
        "body": "{\n    return new OrganizationsFilter();\n}"
      }
    ]
  },
  "ca.magex.crm.api.services.CrmPermissionService": {
    "name": "CrmPermissionService",
    "imports": {
      "List": "java.util",
      "Collectors": "java.util.stream",
      "NotNull": "javax.validation.constraints",
      "GroupsFilter": "ca.magex.crm.api.filters",
      "Paging": "ca.magex.crm.api.filters",
      "RolesFilter": "ca.magex.crm.api.filters",
      "Group": "ca.magex.crm.api.roles",
      "Role": "ca.magex.crm.api.roles",
      "FilteredPage": "ca.magex.crm.api.system",
      "Identifier": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "prototypeGroup",
        "modifiers": ["default"],
        "type": "Group",
        "parameters": [{
          "name": "name",
          "type": "Localized",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return new Group(null, Status.PENDING, name);\n}"
      },
      {
        "name": "createGroup",
        "modifiers": ["default"],
        "type": "Group",
        "parameters": [{
          "name": "group",
          "type": "Group",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return createGroup(group.getName());\n}"
      },
      {
        "name": "createGroup",
        "type": "Group",
        "parameters": [{
          "name": "name",
          "type": "Localized",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findGroup",
        "type": "Group",
        "parameters": [{
          "name": "groupId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findGroupByCode",
        "modifiers": ["default"],
        "type": "Group",
        "parameters": [{
          "name": "code",
          "type": "String",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return findGroups(defaultGroupsFilter().withCode(code), GroupsFilter.getDefaultPaging()).getSingleItem();\n}"
      },
      {
        "name": "updateGroupName",
        "type": "Group",
        "parameters": [
          {
            "name": "groupId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "Localized",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "enableGroup",
        "type": "Group",
        "parameters": [{
          "name": "groupId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "disableGroup",
        "type": "Group",
        "parameters": [{
          "name": "groupId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "defaultGroupsFilter",
        "modifiers": ["default"],
        "type": "GroupsFilter",
        "body": "{\n    return new GroupsFilter();\n}"
      },
      {
        "name": "findGroups",
        "type": {
          "class": "FilteredPage",
          "generics": ["Group"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "GroupsFilter",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "paging",
            "type": "Paging",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findGroups",
        "modifiers": ["default"],
        "type": {
          "class": "FilteredPage",
          "generics": ["Group"]
        },
        "parameters": [{
          "name": "filter",
          "type": "GroupsFilter",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return findGroups(filter, defaultGroupPaging());\n}"
      },
      {
        "name": "findActiveGroupCodes",
        "modifiers": ["default"],
        "type": {
          "class": "List",
          "generics": ["String"]
        },
        "body": "{\n    return findGroups(defaultGroupsFilter().withStatus(Status.ACTIVE), GroupsFilter.getDefaultPaging().allItems()).stream().map(g -> g.getCode()).collect(Collectors.toList());\n}"
      },
      {
        "name": "prototypeRole",
        "modifiers": ["default"],
        "type": "Role",
        "parameters": [
          {
            "name": "groupId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "Localized",
            "annotations": [{"name": "NotNull"}]
          }
        ],
        "body": "{\n    return new Role(null, groupId, Status.PENDING, name);\n}"
      },
      {
        "name": "createRole",
        "modifiers": ["default"],
        "type": "Role",
        "parameters": [{
          "name": "role",
          "type": "Role",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return createRole(role.getGroupId(), role.getName());\n}"
      },
      {
        "name": "createRole",
        "type": "Role",
        "parameters": [
          {
            "name": "groupId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "Localized",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findRole",
        "type": "Role",
        "parameters": [{
          "name": "roleId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findRoleByCode",
        "modifiers": ["default"],
        "type": "Role",
        "parameters": [{
          "name": "code",
          "type": "String",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return findRoles(defaultRolesFilter().withCode(code), RolesFilter.getDefaultPaging()).getSingleItem();\n}"
      },
      {
        "name": "updateRoleName",
        "type": "Role",
        "parameters": [
          {
            "name": "roleId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "Localized",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "enableRole",
        "type": "Role",
        "parameters": [{
          "name": "roleId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "disableRole",
        "type": "Role",
        "parameters": [{
          "name": "roleId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findRoles",
        "type": {
          "class": "FilteredPage",
          "generics": ["Role"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "RolesFilter",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "paging",
            "type": "Paging",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findRoles",
        "modifiers": ["default"],
        "type": {
          "class": "FilteredPage",
          "generics": ["Role"]
        },
        "parameters": [{
          "name": "filter",
          "type": "RolesFilter",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return findRoles(filter, defaultRolePaging());\n}"
      },
      {
        "name": "findRoles",
        "modifiers": ["default"],
        "type": {
          "class": "List",
          "generics": ["Role"]
        },
        "body": "{\n    return findRoles(defaultRolesFilter(), RolesFilter.getDefaultPaging().allItems()).getContent();\n}"
      },
      {
        "name": "findActiveRoleCodesForGroup",
        "modifiers": ["default"],
        "type": {
          "class": "List",
          "generics": ["String"]
        },
        "parameters": [{
          "name": "group",
          "type": "String"
        }],
        "body": "{\n    return findRoles(defaultRolesFilter().withStatus(Status.ACTIVE).withGroupId(findGroupByCode(group).getGroupId()), RolesFilter.getDefaultPaging().allItems()).stream().map(r -> r.getCode()).collect(Collectors.toList());\n}"
      },
      {
        "name": "defaultRolesFilter",
        "modifiers": ["default"],
        "type": "RolesFilter",
        "body": "{\n    return new RolesFilter();\n}"
      },
      {
        "name": "defaultGroupPaging",
        "modifiers": ["default"],
        "type": "Paging",
        "body": "{\n    return new Paging(GroupsFilter.getSortOptions().get(0));\n}"
      },
      {
        "name": "defaultRolePaging",
        "modifiers": ["default"],
        "type": "Paging",
        "body": "{\n    return new Paging(RolesFilter.getSortOptions().get(0));\n}"
      }
    ]
  },
  "ca.magex.crm.api.services.CrmPersonService": {
    "name": "CrmPersonService",
    "imports": {
      "NotNull": "javax.validation.constraints",
      "BusinessPosition": "ca.magex.crm.api.common",
      "Communication": "ca.magex.crm.api.common",
      "MailingAddress": "ca.magex.crm.api.common",
      "PersonName": "ca.magex.crm.api.common",
      "PersonDetails": "ca.magex.crm.api.crm",
      "PersonSummary": "ca.magex.crm.api.crm",
      "Paging": "ca.magex.crm.api.filters",
      "PersonsFilter": "ca.magex.crm.api.filters",
      "FilteredPage": "ca.magex.crm.api.system",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "prototypePerson",
        "modifiers": ["default"],
        "type": "PersonDetails",
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "PersonName",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "address",
            "type": "MailingAddress",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "communication",
            "type": "Communication",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "position",
            "type": "BusinessPosition",
            "annotations": [{"name": "NotNull"}]
          }
        ],
        "body": "{\n    return new PersonDetails(null, organizationId, Status.PENDING, name.getDisplayName(), name, address, communication, position);\n}"
      },
      {
        "name": "createPerson",
        "modifiers": ["default"],
        "type": "PersonDetails",
        "parameters": [{
          "name": "prototype",
          "type": "PersonDetails"
        }],
        "body": "{\n    return createPerson(prototype.getOrganizationId(), prototype.getLegalName(), prototype.getAddress(), prototype.getCommunication(), prototype.getPosition());\n}"
      },
      {
        "name": "createPerson",
        "type": "PersonDetails",
        "parameters": [
          {
            "name": "organizationId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "PersonName",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "address",
            "type": "MailingAddress",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "communication",
            "type": "Communication",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "position",
            "type": "BusinessPosition",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "enablePerson",
        "type": "PersonSummary",
        "parameters": [{
          "name": "personId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "disablePerson",
        "type": "PersonSummary",
        "parameters": [{
          "name": "personId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "updatePersonName",
        "type": "PersonDetails",
        "parameters": [
          {
            "name": "personId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "name",
            "type": "PersonName",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "updatePersonAddress",
        "type": "PersonDetails",
        "parameters": [
          {
            "name": "personId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "address",
            "type": "MailingAddress",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "updatePersonCommunication",
        "type": "PersonDetails",
        "parameters": [
          {
            "name": "personId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "communication",
            "type": "Communication",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "updatePersonBusinessPosition",
        "type": "PersonDetails",
        "parameters": [
          {
            "name": "personId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "position",
            "type": "BusinessPosition",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findPersonSummary",
        "type": "PersonSummary",
        "parameters": [{
          "name": "personId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findPersonDetails",
        "type": "PersonDetails",
        "parameters": [{
          "name": "personId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "countPersons",
        "type": "long",
        "parameters": [{
          "name": "filter",
          "type": "PersonsFilter",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findPersonSummaries",
        "type": {
          "class": "FilteredPage",
          "generics": ["PersonSummary"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "PersonsFilter",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "paging",
            "type": "Paging",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findPersonDetails",
        "type": {
          "class": "FilteredPage",
          "generics": ["PersonDetails"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "PersonsFilter",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "paging",
            "type": "Paging",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "findPersonDetails",
        "modifiers": ["default"],
        "type": {
          "class": "FilteredPage",
          "generics": ["PersonDetails"]
        },
        "parameters": [{
          "name": "filter",
          "type": "PersonsFilter",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return findPersonDetails(filter, PersonsFilter.getDefaultPaging());\n}"
      },
      {
        "name": "findPersonSummaries",
        "modifiers": ["default"],
        "type": {
          "class": "FilteredPage",
          "generics": ["PersonSummary"]
        },
        "parameters": [{
          "name": "filter",
          "type": "PersonsFilter",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return findPersonSummaries(filter, PersonsFilter.getDefaultPaging());\n}"
      },
      {
        "name": "findActivePersonSummariesForOrg",
        "modifiers": ["default"],
        "type": {
          "class": "FilteredPage",
          "generics": ["PersonSummary"]
        },
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return findPersonSummaries(new PersonsFilter(organizationId, null, Status.ACTIVE), PersonsFilter.getDefaultPaging());\n}"
      },
      {
        "name": "defaultPersonsFilter",
        "modifiers": ["default"],
        "type": "PersonsFilter",
        "body": "{\n    return new PersonsFilter();\n}"
      }
    ]
  },
  "ca.magex.crm.api.services.CrmServices": {
    "name": "CrmServices",
    "type": "interface",
    "modifiers": ["public"],
    "extends": [
      "CrmLookupService",
      "CrmOrganizationService",
      "CrmLocationService",
      "CrmPersonService",
      "CrmUserService",
      "CrmPermissionService"
    ]
  },
  "ca.magex.crm.api.services.CrmUserService": {
    "name": "CrmUserService",
    "imports": {
      "List": "java.util",
      "NotNull": "javax.validation.constraints",
      "StringUtils": "org.apache.commons.lang3",
      "PersonSummary": "ca.magex.crm.api.crm",
      "Paging": "ca.magex.crm.api.filters",
      "UsersFilter": "ca.magex.crm.api.filters",
      "User": "ca.magex.crm.api.roles",
      "FilteredPage": "ca.magex.crm.api.system",
      "Identifier": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "prototypeUser",
        "modifiers": ["default"],
        "type": "User",
        "parameters": [
          {
            "name": "personId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "username",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "roles",
            "type": {
              "class": "List",
              "generics": ["String"]
            },
            "annotations": [{"name": "NotNull"}]
          }
        ],
        "body": "{\n    return new User(null, username, new PersonSummary(personId, null, null, null), Status.PENDING, roles);\n}"
      },
      {
        "name": "createUser",
        "modifiers": ["default"],
        "type": "User",
        "parameters": [{
          "name": "prototype",
          "type": "User"
        }],
        "body": "{\n    return createUser(prototype.getPerson().getPersonId(), prototype.getUsername(), prototype.getRoles());\n}"
      },
      {
        "name": "createUser",
        "type": "User",
        "parameters": [
          {
            "name": "personId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "username",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "roles",
            "type": {
              "class": "List",
              "generics": ["String"]
            },
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "enableUser",
        "type": "User",
        "parameters": [{
          "name": "userId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "disableUser",
        "type": "User",
        "parameters": [{
          "name": "userId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "updateUserRoles",
        "type": "User",
        "parameters": [
          {
            "name": "userId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "roles",
            "type": {
              "class": "List",
              "generics": ["String"]
            },
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "changePassword",
        "type": "boolean",
        "parameters": [
          {
            "name": "userId",
            "type": "Identifier",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "currentPassword",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "newPassword",
            "type": "String",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "resetPassword",
        "type": "String",
        "parameters": [{
          "name": "userId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findUser",
        "type": "User",
        "parameters": [{
          "name": "userId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findUserByUsername",
        "type": "User",
        "parameters": [{
          "name": "username",
          "type": "String",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "countUsers",
        "type": "long",
        "parameters": [{
          "name": "filter",
          "type": "UsersFilter",
          "annotations": [{"name": "NotNull"}]
        }]
      },
      {
        "name": "findUsers",
        "type": {
          "class": "FilteredPage",
          "generics": ["User"]
        },
        "parameters": [
          {
            "name": "filter",
            "type": "UsersFilter",
            "annotations": [{"name": "NotNull"}]
          },
          {
            "name": "paging",
            "type": "Paging",
            "annotations": [{"name": "NotNull"}]
          }
        ]
      },
      {
        "name": "isValidPasswordFormat",
        "modifiers": ["default"],
        "type": "boolean",
        "parameters": [{
          "name": "password",
          "type": "String"
        }],
        "body": "{\n    if (StringUtils.isBlank(password))\n        return false;\n    if (password.length() < 5 || password.length() > 255)\n        return false;\n    if (!password.matches(\"[A-Za-z0-9\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)]+\"))\n        return false;\n    return true;\n}"
      },
      {
        "name": "findUsers",
        "modifiers": ["default"],
        "type": {
          "class": "FilteredPage",
          "generics": ["User"]
        },
        "parameters": [{
          "name": "filter",
          "type": "UsersFilter",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return findUsers(filter, defaultUsersPaging());\n}"
      },
      {
        "name": "findActiveUserForOrg",
        "modifiers": ["default"],
        "type": {
          "class": "FilteredPage",
          "generics": ["User"]
        },
        "parameters": [{
          "name": "organizationId",
          "type": "Identifier",
          "annotations": [{"name": "NotNull"}]
        }],
        "body": "{\n    return findUsers(new UsersFilter(organizationId, null, Status.ACTIVE, null, null));\n}"
      },
      {
        "name": "defaultUsersFilter",
        "modifiers": ["default"],
        "type": "UsersFilter",
        "body": "{\n    return new UsersFilter();\n}"
      },
      {
        "name": "defaultUsersPaging",
        "modifiers": ["default"],
        "type": "Paging",
        "body": "{\n    return new Paging(UsersFilter.getSortOptions().get(0));\n}"
      }
    ]
  },
  "ca.magex.crm.api.system.Activation": {
    "name": "Activation",
    "imports": {
      "Serializable": "java.io",
      "LocalDateTime": "java.time",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [{
      "name": "Activation",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "identifier",
          "type": "Identifier"
        },
        {
          "name": "enabled",
          "type": "LocalDateTime"
        },
        {
          "name": "disabled",
          "type": "LocalDateTime"
        }
      ],
      "body": "{\n    this.identifier = identifier;\n    this.enabled = enabled;\n    this.disabled = disabled;\n}"
    }],
    "fields": [
      {
        "name": "identifier",
        "modifiers": ["private"],
        "type": "Identifier"
      },
      {
        "name": "enabled",
        "modifiers": ["private"],
        "type": "LocalDateTime"
      },
      {
        "name": "disabled",
        "modifiers": ["private"],
        "type": "LocalDateTime"
      }
    ],
    "methods": [
      {
        "name": "getIdentifier",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return identifier;\n}"
      },
      {
        "name": "getEnabled",
        "modifiers": ["public"],
        "type": "LocalDateTime",
        "body": "{\n    return enabled;\n}"
      },
      {
        "name": "getDisabled",
        "modifiers": ["public"],
        "type": "LocalDateTime",
        "body": "{\n    return disabled;\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      }
    ]
  },
  "ca.magex.crm.api.system.FilteredPage": {
    "name": "FilteredPage",
    "generics": ["T"],
    "imports": {
      "Serializable": "java.io",
      "List": "java.util",
      "SerializationUtils": "org.apache.commons.lang3",
      "PageImpl": "org.springframework.data.domain",
      "DuplicateItemFoundException": "ca.magex.crm.api.exceptions",
      "ItemNotFoundException": "ca.magex.crm.api.exceptions",
      "Paging": "ca.magex.crm.api.filters",
      "Crm": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "extends": [{
      "class": "PageImpl",
      "generics": ["T"]
    }],
    "constructors": [{
      "name": "FilteredPage",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "filter",
          "type": "Serializable"
        },
        {
          "name": "paging",
          "type": "Paging"
        },
        {
          "name": "content",
          "type": {
            "class": "List",
            "generics": ["T"]
          }
        },
        {
          "name": "total",
          "type": "long"
        }
      ],
      "body": "{\n    super(content, paging, total);\n    this.filter = SerializationUtils.clone(filter);\n    this.paging = SerializationUtils.clone(paging);\n}"
    }],
    "fields": [
      {
        "name": "filter",
        "modifiers": ["private"],
        "type": "Serializable"
      },
      {
        "name": "paging",
        "modifiers": ["private"],
        "type": "Paging"
      }
    ],
    "methods": [
      {
        "name": "getFilter",
        "modifiers": ["public"],
        "type": "Serializable",
        "body": "{\n    return filter;\n}"
      },
      {
        "name": "getPaging",
        "modifiers": ["public"],
        "type": "Paging",
        "body": "{\n    return paging;\n}"
      },
      {
        "name": "getSingleItem",
        "modifiers": ["public"],
        "type": "T",
        "body": "{\n    if (getTotalElements() < 1)\n        throw new ItemNotFoundException(\"No items found: \" + filter);\n    if (getTotalElements() > 1)\n        throw new DuplicateItemFoundException(\"Duplicate items found: \" + filter);\n    return getContent().get(0);\n}"
      },
      {
        "name": "hasPrevious",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return getNumber() > 1;\n}"
      },
      {
        "name": "hasNext",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return getNumber() < getTotalPages();\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    String contentType = \"UNKNOWN\";\n    List<T> content = getContent();\n    if (content.size() > 0) {\n        contentType = content.get(0).getClass().getName();\n    }\n    return String.format(\"Page %s of %d containing %s instances\", getNumber(), getTotalPages(), contentType);\n}"
      }
    ]
  },
  "ca.magex.crm.api.system.Identifier": {
    "name": "Identifier",
    "imports": {
      "Serializable": "java.io",
      "StringUtils": "org.apache.commons.lang3",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": [
      "CharSequence",
      "Serializable"
    ],
    "constructors": [
      {
        "name": "Identifier",
        "modifiers": ["public"],
        "parameters": [{
          "name": "id",
          "type": "String"
        }],
        "body": "{\n    if (StringUtils.isBlank(id))\n        throw new IllegalArgumentException(\"Id cannot be blank\");\n    if (!id.matches(PATTERN))\n        throw new IllegalArgumentException(\"Id must match the pattern \" + PATTERN);\n    this.id = id;\n}"
      },
      {
        "name": "Identifier",
        "modifiers": ["public"],
        "parameters": [{
          "name": "identifier",
          "type": "Identifier"
        }],
        "body": "{\n    this(identifier.id);\n}"
      }
    ],
    "fields": [
      {
        "name": "UNDEFINED",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "Identifier"
      },
      {
        "name": "PATTERN",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "String"
      },
      {
        "name": "id",
        "modifiers": ["private"],
        "type": "String"
      }
    ],
    "methods": [
      {
        "name": "length",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return id.length();\n}"
      },
      {
        "name": "charAt",
        "modifiers": ["public"],
        "type": "char",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "index",
          "type": "int"
        }],
        "body": "{\n    return id.charAt(index);\n}"
      },
      {
        "name": "subSequence",
        "modifiers": ["public"],
        "type": "CharSequence",
        "annotations": [{"name": "Override"}],
        "parameters": [
          {
            "name": "start",
            "type": "int"
          },
          {
            "name": "end",
            "type": "int"
          }
        ],
        "body": "{\n    return id.subSequence(start, end);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return id;\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      }
    ]
  },
  "ca.magex.crm.api.system.Lang": {
    "name": "Lang",
    "imports": {
      "Arrays": "java.util",
      "List": "java.util",
      "Locale": "java.util"
    },
    "type": "class",
    "modifiers": ["public"],
    "fields": [
      {
        "name": "ENGLISH",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "Locale"
      },
      {
        "name": "FRENCH",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "Locale"
      },
      {
        "name": "ROOT",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": "Locale"
      },
      {
        "name": "SUPPORTED",
        "modifiers": [
          "public",
          "static",
          "final"
        ],
        "type": {
          "class": "List",
          "generics": ["Locale"]
        }
      }
    ],
    "methods": [
      {
        "name": "isEnglish",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "boolean",
        "parameters": [{
          "name": "locale",
          "type": "Locale"
        }],
        "body": "{\n    if (locale == null)\n        throw new IllegalArgumentException(\"Locale is null\");\n    if (locale == ENGLISH)\n        return true;\n    if (locale == FRENCH)\n        return false;\n    throw new IllegalArgumentException(\"Locale is not english or french\");\n}"
      },
      {
        "name": "parse",
        "modifiers": [
          "public",
          "static"
        ],
        "type": "Locale",
        "parameters": [{
          "name": "lang",
          "type": "String"
        }],
        "body": "{\n    if (lang == null) {\n        return null;\n    }\n    if (lang.contentEquals(\"\")) {\n        return ROOT;\n    }\n    if (lang.equals(\"en\") || lang.equals(\"eng\") || lang.equals(ENGLISH.toString())) {\n        return ENGLISH;\n    }\n    if (lang.equals(\"fr\") || lang.equals(\"fra\") || lang.equals(FRENCH.toString())) {\n        return FRENCH;\n    }\n    throw new IllegalArgumentException(\"Locale is not english or french or root\");\n}"
      }
    ]
  },
  "ca.magex.crm.api.system.Localized": {
    "name": "Localized",
    "imports": {
      "Serializable": "java.io",
      "Collator": "java.text",
      "List": "java.util",
      "Locale": "java.util",
      "Map": "java.util",
      "StringUtils": "org.apache.commons.lang3",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [
      {
        "name": "Localized",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "locale",
            "type": "Locale"
          },
          {
            "name": "value",
            "type": "String"
          }
        ],
        "body": "{\n    this(Map.of(notNull(\"Locale\", locale), notNull(\"Value\", value)));\n}"
      },
      {
        "name": "Localized",
        "modifiers": ["public"],
        "parameters": [
          {
            "name": "code",
            "type": "String"
          },
          {
            "name": "englishName",
            "type": "String"
          },
          {
            "name": "frenchName",
            "type": "String"
          }
        ],
        "body": "{\n    this(Map.of(Lang.ROOT, notNull(\"Code\", code), Lang.ENGLISH, notNull(\"English\", englishName), Lang.FRENCH, notNull(\"French\", frenchName)));\n}"
      },
      {
        "name": "Localized",
        "modifiers": ["public"],
        "parameters": [{
          "name": "text",
          "type": {
            "class": "Map",
            "generics": [
              "Locale",
              "String"
            ]
          }
        }],
        "body": "{\n    this.text = text;\n}"
      }
    ],
    "fields": [{
      "name": "text",
      "modifiers": ["private"],
      "type": {
        "class": "Map",
        "generics": [
          "Locale",
          "String"
        ]
      }
    }],
    "methods": [
      {
        "name": "notNull",
        "modifiers": [
          "private",
          "static"
        ],
        "type": "T",
        "generics": ["T"],
        "parameters": [
          {
            "name": "name",
            "type": "String"
          },
          {
            "name": "obj",
            "type": "T"
          }
        ],
        "body": "{\n    if (obj == null)\n        throw new IllegalArgumentException(name + \" cannot be null\");\n    return obj;\n}"
      },
      {
        "name": "getCode",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return text.get(Lang.ROOT);\n}"
      },
      {
        "name": "getEnglishName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return text.get(Lang.ENGLISH);\n}"
      },
      {
        "name": "getFrenchName",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return text.get(Lang.FRENCH);\n}"
      },
      {
        "name": "get",
        "modifiers": ["public"],
        "type": "String",
        "parameters": [{
          "name": "locale",
          "type": "Locale"
        }],
        "body": "{\n    return text.get(locale);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\\\"code\\\":\\\"\");\n    sb.append(getCode());\n    sb.append(\"\\\",\\\"en\\\":\\\"\");\n    sb.append(getEnglishName());\n    sb.append(\"\\\",\\\"fr\\\":\\\"\");\n    sb.append(getFrenchName());\n    sb.append(\"\\\"}\");\n    return sb.toString();\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      }
    ]
  },
  "ca.magex.crm.api.system.Message": {
    "name": "Message",
    "imports": {
      "Serializable": "java.io",
      "EqualsBuilder": "org.apache.commons.lang3.builder",
      "HashCodeBuilder": "org.apache.commons.lang3.builder",
      "ToStringBuilder": "org.apache.commons.lang3.builder",
      "ToStringStyle": "org.apache.commons.lang3.builder",
      "Crm": "ca.magex.crm.api.services"
    },
    "type": "class",
    "modifiers": ["public"],
    "implements": ["Serializable"],
    "constructors": [{
      "name": "Message",
      "modifiers": ["public"],
      "parameters": [
        {
          "name": "identifier",
          "type": "Identifier"
        },
        {
          "name": "type",
          "type": "String"
        },
        {
          "name": "path",
          "type": "String"
        },
        {
          "name": "reason",
          "type": "Localized"
        }
      ],
      "body": "{\n    super();\n    this.identifier = identifier;\n    this.type = type;\n    this.path = path;\n    this.reason = reason;\n}"
    }],
    "fields": [
      {
        "name": "identifier",
        "modifiers": ["private"],
        "type": "Identifier"
      },
      {
        "name": "type",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "path",
        "modifiers": ["private"],
        "type": "String"
      },
      {
        "name": "reason",
        "modifiers": ["private"],
        "type": "Localized"
      }
    ],
    "methods": [
      {
        "name": "getIdentifier",
        "modifiers": ["public"],
        "type": "Identifier",
        "body": "{\n    return identifier;\n}"
      },
      {
        "name": "getType",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return type;\n}"
      },
      {
        "name": "getPath",
        "modifiers": ["public"],
        "type": "String",
        "body": "{\n    return path;\n}"
      },
      {
        "name": "getReason",
        "modifiers": ["public"],
        "type": "Localized",
        "body": "{\n    return reason;\n}"
      },
      {
        "name": "hashCode",
        "modifiers": ["public"],
        "type": "int",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return HashCodeBuilder.reflectionHashCode(this);\n}"
      },
      {
        "name": "equals",
        "modifiers": ["public"],
        "type": "boolean",
        "annotations": [{"name": "Override"}],
        "parameters": [{
          "name": "obj",
          "type": "Object"
        }],
        "body": "{\n    return EqualsBuilder.reflectionEquals(this, obj);\n}"
      },
      {
        "name": "toString",
        "modifiers": ["public"],
        "type": "String",
        "annotations": [{"name": "Override"}],
        "body": "{\n    return ToStringBuilder.reflectionToString(this, ToStringStyle.JSON_STYLE);\n}"
      }
    ]
  },
  "ca.magex.crm.api.system.Status": {"name": "Status"},
  "ca.magex.crm.api.transform.RequestHandler": {
    "name": "RequestHandler",
    "generics": [
      "A",
      "B",
      "C",
      "R"
    ],
    "imports": {
      "Objects": "java.util",
      "Function": "java.util.function"
    },
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "apply",
        "type": "R",
        "parameters": [
          {
            "name": "a",
            "type": "A"
          },
          {
            "name": "b",
            "type": "B"
          },
          {
            "name": "c",
            "type": "C"
          }
        ]
      },
      {
        "name": "andThen",
        "modifiers": ["default"],
        "type": {
          "class": "RequestHandler",
          "generics": [
            "A",
            "B",
            "C",
            "V"
          ]
        },
        "generics": ["V"],
        "parameters": [{
          "name": "after",
          "type": {
            "class": "Function",
            "generics": [
              "? super R",
              "? extends V"
            ]
          }
        }],
        "body": "{\n    Objects.requireNonNull(after);\n    return (A a, B b, C c) -> after.apply(apply(a, b, c));\n}"
      }
    ]
  },
  "ca.magex.crm.api.transform.Transformer": {
    "name": "Transformer",
    "generics": [
      "S",
      "T"
    ],
    "imports": {"Locale": "java.util"},
    "type": "interface",
    "modifiers": ["public"],
    "methods": [
      {
        "name": "getSourceType",
        "modifiers": ["public"],
        "type": {
          "class": "Class",
          "generics": ["S"]
        }
      },
      {
        "name": "getTargetType",
        "modifiers": ["public"],
        "type": {
          "class": "Class",
          "generics": ["T"]
        }
      },
      {
        "name": "format",
        "modifiers": ["public"],
        "type": "T",
        "parameters": [
          {
            "name": "source",
            "type": "S"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ]
      },
      {
        "name": "parse",
        "modifiers": ["public"],
        "type": "S",
        "parameters": [
          {
            "name": "target",
            "type": "T"
          },
          {
            "name": "locale",
            "type": "Locale"
          }
        ]
      }
    ]
  },
  "ca.magex.crm.api.validation.CrmValidation": {
    "name": "CrmValidation",
    "imports": {
      "ArrayList": "java.util",
      "List": "java.util",
      "StringUtils": "org.apache.commons.lang3",
      "MailingAddress": "ca.magex.crm.api.common",
      "PersonName": "ca.magex.crm.api.common",
      "LocationDetails": "ca.magex.crm.api.crm",
      "LocationSummary": "ca.magex.crm.api.crm",
      "OrganizationDetails": "ca.magex.crm.api.crm",
      "PersonDetails": "ca.magex.crm.api.crm",
      "PersonSummary": "ca.magex.crm.api.crm",
      "BadRequestException": "ca.magex.crm.api.exceptions",
      "ItemNotFoundException": "ca.magex.crm.api.exceptions",
      "GroupsFilter": "ca.magex.crm.api.filters",
      "RolesFilter": "ca.magex.crm.api.filters",
      "Group": "ca.magex.crm.api.roles",
      "Role": "ca.magex.crm.api.roles",
      "User": "ca.magex.crm.api.roles",
      "Crm": "ca.magex.crm.api.services",
      "FilteredPage": "ca.magex.crm.api.system",
      "Identifier": "ca.magex.crm.api.system",
      "Lang": "ca.magex.crm.api.system",
      "Localized": "ca.magex.crm.api.system",
      "Message": "ca.magex.crm.api.system",
      "Status": "ca.magex.crm.api.system"
    },
    "type": "class",
    "modifiers": ["public"],
    "constructors": [{
      "name": "CrmValidation",
      "modifiers": ["public"],
      "parameters": [{
        "name": "crm",
        "type": "Crm"
      }],
      "body": "{\n    this.crm = crm;\n}"
    }],
    "fields": [{
      "name": "crm",
      "modifiers": ["private"],
      "type": "Crm"
    }],
    "methods": [
      {
        "name": "validate",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["Message"]
        },
        "parameters": [{
          "name": "group",
          "type": "Group"
        }],
        "body": "{\n    List<Message> messages = new ArrayList<Message>();\n    // Status\n    if (group.getStatus() == null) {\n        messages.add(new Message(group.getGroupId(), \"error\", \"status\", new Localized(Lang.ENGLISH, \"Status is mandatory for a group\")));\n    } else if (group.getStatus() == Status.PENDING && group.getGroupId() != null) {\n        messages.add(new Message(group.getGroupId(), \"error\", \"status\", new Localized(Lang.ENGLISH, \"Pending statuses should not have identifiers\")));\n    }\n    // Must be a valid group code\n    if (StringUtils.isBlank(group.getCode())) {\n        messages.add(new Message(group.getGroupId(), \"error\", \"code\", new Localized(Lang.ENGLISH, \"Group code must not be blank\")));\n    } else if (!group.getCode().matches(\"[A-Z0-9_]{1,20}\")) {\n        messages.add(new Message(group.getGroupId(), \"error\", \"code\", new Localized(Lang.ENGLISH, \"Group code must match: [A-Z0-9_]{1,20}\")));\n    }\n    // Make sure the existing code didn't change\n    try {\n        if (!crm.findGroup(group.getGroupId()).getCode().equals(group.getCode())) {\n            messages.add(new Message(group.getGroupId(), \"error\", \"code\", new Localized(Lang.ENGLISH, \"Group code must not change during updates\")));\n        }\n    } catch (ItemNotFoundException e) {\n    /* no existing group, so don't care */\n    }\n    // Make sure the code is unique\n    FilteredPage<Group> groups = crm.findGroups(crm.defaultGroupsFilter().withCode(group.getCode()), GroupsFilter.getDefaultPaging().allItems());\n    for (Group existing : groups.getContent()) {\n        if (!existing.getGroupId().equals(group.getGroupId())) {\n            messages.add(new Message(group.getGroupId(), \"error\", \"code\", new Localized(Lang.ENGLISH, \"Duplicate code found in another group: \" + existing.getGroupId())));\n        }\n    }\n    // Make sure there is an English description\n    if (StringUtils.isBlank(group.getName(Lang.ENGLISH))) {\n        messages.add(new Message(group.getGroupId(), \"error\", \"englishName\", new Localized(Lang.ENGLISH, \"An English description is required\")));\n    } else if (group.getName(Lang.ENGLISH).length() > 50) {\n        messages.add(new Message(group.getGroupId(), \"error\", \"englishName\", new Localized(Lang.ENGLISH, \"English name must be 50 characters or less\")));\n    }\n    // Make sure there is a French description\n    if (StringUtils.isBlank(group.getName(Lang.FRENCH))) {\n        messages.add(new Message(group.getGroupId(), \"error\", \"frenchName\", new Localized(Lang.ENGLISH, \"An French description is required\")));\n    } else if (group.getName(Lang.FRENCH).length() > 50) {\n        messages.add(new Message(group.getGroupId(), \"error\", \"frenchName\", new Localized(Lang.ENGLISH, \"French name must be 50 characters or less\")));\n    }\n    return messages;\n}"
      },
      {
        "name": "validate",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["Message"]
        },
        "parameters": [{
          "name": "role",
          "type": "Role"
        }],
        "body": "{\n    List<Message> messages = new ArrayList<Message>();\n    // Status\n    if (role.getStatus() == null) {\n        messages.add(new Message(role.getRoleId(), \"error\", \"status\", new Localized(Lang.ENGLISH, \"Status is mandatory for a role\")));\n    } else if (role.getStatus() == Status.PENDING && role.getRoleId() != null) {\n        messages.add(new Message(role.getRoleId(), \"error\", \"status\", new Localized(Lang.ENGLISH, \"Pending statuses should not have identifiers\")));\n    }\n    // Must be a valid role code\n    if (StringUtils.isBlank(role.getCode())) {\n        messages.add(new Message(role.getGroupId(), \"error\", \"code\", new Localized(Lang.ENGLISH, \"Role code must not be blank\")));\n    } else if (!role.getCode().matches(\"[A-Z0-9_]{1,20}\")) {\n        messages.add(new Message(role.getGroupId(), \"error\", \"code\", new Localized(Lang.ENGLISH, \"Role code must match: [A-Z0-9_]{1,20}\")));\n    }\n    // Make sure the existing code didn't change\n    try {\n        if (!crm.findRole(role.getRoleId()).getCode().equals(role.getCode())) {\n            messages.add(new Message(role.getRoleId(), \"error\", \"code\", new Localized(Lang.ENGLISH, \"Role code must not change during updates\")));\n        }\n    } catch (ItemNotFoundException e) {\n    /* no existing role, so don't care */\n    }\n    // Make sure the code is unique\n    FilteredPage<Role> roles = crm.findRoles(crm.defaultRolesFilter().withCode(role.getCode()), RolesFilter.getDefaultPaging().allItems());\n    for (Role existing : roles.getContent()) {\n        if (!existing.getRoleId().equals(role.getRoleId())) {\n            messages.add(new Message(role.getRoleId(), \"error\", \"code\", new Localized(Lang.ENGLISH, \"Duplicate code found in another role: \" + existing.getGroupId())));\n        }\n    }\n    // Make sure there is an English description\n    if (StringUtils.isBlank(role.getName(Lang.ENGLISH))) {\n        messages.add(new Message(role.getRoleId(), \"error\", \"englishName\", new Localized(Lang.ENGLISH, \"An English description is required\")));\n    } else if (role.getName(Lang.ENGLISH).length() > 50) {\n        messages.add(new Message(role.getRoleId(), \"error\", \"englishName\", new Localized(Lang.ENGLISH, \"English name must be 50 characters or less\")));\n    }\n    // Make sure there is a French description\n    if (StringUtils.isBlank(role.getName(Lang.FRENCH))) {\n        messages.add(new Message(role.getRoleId(), \"error\", \"frenchName\", new Localized(Lang.ENGLISH, \"An French description is required\")));\n    } else if (role.getName(Lang.FRENCH).length() > 50) {\n        messages.add(new Message(role.getRoleId(), \"error\", \"frenchName\", new Localized(Lang.ENGLISH, \"French name must be 50 characters or less\")));\n    }\n    return messages;\n}"
      },
      {
        "name": "validate",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["Message"]
        },
        "parameters": [{
          "name": "organization",
          "type": "OrganizationDetails"
        }],
        "body": "{\n    List<Message> messages = new ArrayList<Message>();\n    // Status\n    if (organization.getStatus() == null) {\n        messages.add(new Message(organization.getOrganizationId(), \"error\", \"status\", new Localized(Lang.ENGLISH, \"Status is mandatory for an organization\")));\n    } else if (organization.getStatus() == Status.PENDING && organization.getOrganizationId() != null) {\n        messages.add(new Message(organization.getOrganizationId(), \"error\", \"status\", new Localized(Lang.ENGLISH, \"Pending statuses should not have identifiers\")));\n    }\n    // Display Name\n    if (StringUtils.isBlank(organization.getDisplayName())) {\n        messages.add(new Message(organization.getOrganizationId(), \"error\", \"displayName\", new Localized(Lang.ENGLISH, \"Display name is mandatory for an organization\")));\n    } else if (organization.getDisplayName().length() > 60) {\n        messages.add(new Message(organization.getOrganizationId(), \"error\", \"displayName\", new Localized(Lang.ENGLISH, \"Display name must be 60 characters or less\")));\n    }\n    // Main contact reference\n    if (organization.getMainContactId() != null) {\n        PersonSummary person = crm.findPersonSummary(organization.getMainContactId());\n        // Make sure main contact belongs to current org\n        if (!person.getOrganizationId().equals(organization.getOrganizationId())) {\n            messages.add(new Message(organization.getOrganizationId(), \"error\", \"mainContactId\", new Localized(Lang.ENGLISH, \"Main contact organization has invalid referential integrity\")));\n        }\n        // Make sure main contact is active\n        if (!person.getStatus().equals(Status.ACTIVE)) {\n            messages.add(new Message(organization.getOrganizationId(), \"error\", \"mainContactId\", new Localized(Lang.ENGLISH, \"Main contact must be active\")));\n        }\n    }\n    // Main location reference\n    if (organization.getMainLocationId() != null) {\n        LocationSummary location = crm.findLocationSummary(organization.getMainLocationId());\n        // Make sure main location belongs to current org\n        if (!location.getOrganizationId().equals(organization.getOrganizationId())) {\n            messages.add(new Message(organization.getOrganizationId(), \"error\", \"mainLocationId\", new Localized(Lang.ENGLISH, \"Main location organization has invalid referential integrity\")));\n        }\n        // Make sure main location is active\n        if (!location.getStatus().equals(Status.ACTIVE)) {\n            messages.add(new Message(organization.getOrganizationId(), \"error\", \"mainLocationId\", new Localized(Lang.ENGLISH, \"Main location must be active\")));\n        }\n    }\n    // Group\n    if (organization.getGroups().isEmpty()) {\n        messages.add(new Message(organization.getOrganizationId(), \"error\", \"groups\", new Localized(Lang.ENGLISH, \"Organizations must have a permission group assigned to them\")));\n    } else {\n        for (int i = 0; i < organization.getGroups().size(); i++) {\n            String group = organization.getGroups().get(i);\n            try {\n                if (!crm.findGroupByCode(group).getStatus().equals(Status.ACTIVE))\n                    messages.add(new Message(organization.getOrganizationId(), \"error\", \"groups[\" + i + \"]\", new Localized(Lang.ENGLISH, \"Group is not active: \" + group)));\n            } catch (ItemNotFoundException e) {\n                messages.add(new Message(organization.getOrganizationId(), \"error\", \"groups[\" + i + \"]\", new Localized(Lang.ENGLISH, \"Group does not exist: \" + group)));\n            }\n        }\n    }\n    return messages;\n}"
      },
      {
        "name": "validate",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["Message"]
        },
        "parameters": [{
          "name": "location",
          "type": "LocationDetails"
        }],
        "body": "{\n    List<Message> messages = new ArrayList<Message>();\n    // Organization\n    if (location.getOrganizationId() == null) {\n        messages.add(new Message(location.getLocationId(), \"error\", \"organizationId\", new Localized(Lang.ENGLISH, \"Organization cannot be null\")));\n    } else {\n        try {\n            crm.findOrganizationDetails(location.getOrganizationId());\n        } catch (ItemNotFoundException e) {\n            messages.add(new Message(location.getLocationId(), \"error\", \"organizationId\", new Localized(Lang.ENGLISH, \"Organization does not exist\")));\n        }\n    }\n    // Status\n    if (location.getStatus() == null) {\n        messages.add(new Message(location.getLocationId(), \"error\", \"status\", new Localized(Lang.ENGLISH, \"Status is mandatory for a location\")));\n    } else if (location.getStatus() == Status.PENDING && location.getLocationId() != null) {\n        messages.add(new Message(location.getLocationId(), \"error\", \"status\", new Localized(Lang.ENGLISH, \"Pending statuses should not have identifiers\")));\n    }\n    // Reference\n    if (StringUtils.isBlank(location.getReference())) {\n        messages.add(new Message(location.getLocationId(), \"error\", \"reference\", new Localized(Lang.ENGLISH, \"Reference is mandatory for a location\")));\n    } else if (!location.getReference().matches(\"[A-Z0-9-]{1,60}\")) {\n        messages.add(new Message(location.getLocationId(), \"error\", \"reference\", new Localized(Lang.ENGLISH, \"Reference is not in the correct format\")));\n    }\n    // Display Name\n    if (StringUtils.isBlank(location.getDisplayName())) {\n        messages.add(new Message(location.getLocationId(), \"error\", \"displayName\", new Localized(Lang.ENGLISH, \"Display name is mandatory for a location\")));\n    } else if (location.getDisplayName().length() > 60) {\n        messages.add(new Message(location.getLocationId(), \"error\", \"displayName\", new Localized(Lang.ENGLISH, \"Display name must be 60 characters or less\")));\n    }\n    // Address\n    if (location.getAddress() == null) {\n        messages.add(new Message(location.getLocationId(), \"error\", \"address\", new Localized(Lang.ENGLISH, \"Mailing address is mandatory for a location\")));\n    } else {\n        validateMailingAddress(location.getAddress(), messages, location.getLocationId(), \"address\");\n    }\n    return messages;\n}"
      },
      {
        "name": "validate",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["Message"]
        },
        "exceptions": ["BadRequestException"],
        "parameters": [{
          "name": "person",
          "type": "PersonDetails"
        }],
        "body": "{\n    List<Message> messages = new ArrayList<Message>();\n    // Organization\n    if (person.getOrganizationId() == null) {\n        messages.add(new Message(person.getPersonId(), \"error\", \"organizationId\", new Localized(Lang.ENGLISH, \"Organization cannot be null\")));\n    } else {\n        try {\n            crm.findOrganizationDetails(person.getOrganizationId());\n        } catch (ItemNotFoundException e) {\n            messages.add(new Message(person.getPersonId(), \"error\", \"organizationId\", new Localized(Lang.ENGLISH, \"Organization does not exist\")));\n        }\n    }\n    // Status\n    if (person.getStatus() == null) {\n        messages.add(new Message(person.getPersonId(), \"error\", \"status\", new Localized(Lang.ENGLISH, \"Status is mandatory for a person\")));\n    } else if (person.getStatus() == Status.PENDING && person.getPersonId() != null) {\n        messages.add(new Message(person.getPersonId(), \"error\", \"status\", new Localized(Lang.ENGLISH, \"Pending statuses should not have identifiers\")));\n    }\n    // Display Name\n    if (StringUtils.isBlank(person.getDisplayName())) {\n        messages.add(new Message(person.getPersonId(), \"error\", \"displayName\", new Localized(Lang.ENGLISH, \"Display name is mandatory for a person\")));\n    } else if (person.getDisplayName().length() > 60) {\n        messages.add(new Message(person.getPersonId(), \"error\", \"displayName\", new Localized(Lang.ENGLISH, \"Display name must be 60 characters or less\")));\n    }\n    // Legal Name\n    if (person.getLegalName() == null) {\n        messages.add(new Message(person.getPersonId(), \"error\", \"legalName\", new Localized(Lang.ENGLISH, \"Legal name is mandatory for a person\")));\n    } else {\n        validatePersonName(person.getLegalName(), messages, person.getPersonId(), \"legalName\");\n    }\n    // Address\n    if (person.getAddress() != null) {\n        validateMailingAddress(person.getAddress(), messages, person.getPersonId(), \"address\");\n    }\n    return messages;\n}"
      },
      {
        "name": "validate",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["Message"]
        },
        "exceptions": ["BadRequestException"],
        "parameters": [{
          "name": "user",
          "type": "User"
        }],
        "body": "{\n    List<Message> messages = new ArrayList<Message>();\n    // Status\n    if (user.getStatus() == null) {\n        messages.add(new Message(user.getUserId(), \"error\", \"status\", new Localized(Lang.ENGLISH, \"Status is mandatory for a person\")));\n    } else if (user.getStatus() == Status.PENDING && user.getUserId() != null) {\n        messages.add(new Message(user.getUserId(), \"error\", \"status\", new Localized(Lang.ENGLISH, \"Pending statuses should not have identifiers\")));\n    }\n    // Organization\n    if (user.getPerson() == null || user.getPerson().getPersonId() == null) {\n        messages.add(new Message(null, \"error\", \"person\", new Localized(Lang.ENGLISH, \"Person cannot be null\")));\n    } else {\n        try {\n            crm.findPersonDetails(user.getPerson().getPersonId());\n        } catch (ItemNotFoundException e) {\n            messages.add(new Message(user.getPerson().getPersonId(), \"error\", \"person\", new Localized(Lang.ENGLISH, \"Person does not exist\")));\n        }\n    }\n    // Display Name\n    if (StringUtils.isBlank(user.getUsername())) {\n        messages.add(new Message(user.getUserId(), \"error\", \"username\", new Localized(Lang.ENGLISH, \"Username is mandatory for a user\")));\n    } else if (user.getUsername().length() > 20) {\n        messages.add(new Message(user.getUserId(), \"error\", \"username\", new Localized(Lang.ENGLISH, \"Username must be 20 characters or less\")));\n    }\n    // Roles\n    if (user.getRoles().isEmpty()) {\n        messages.add(new Message(user.getUserId(), \"error\", \"roles\", new Localized(Lang.ENGLISH, \"Users must have a permission role assigned to them\")));\n    } else {\n        for (int i = 0; i < user.getRoles().size(); i++) {\n            String role = user.getRoles().get(i);\n            try {\n                if (!crm.findRoleByCode(role).getStatus().equals(Status.ACTIVE))\n                    messages.add(new Message(user.getUserId(), \"error\", \"roles[\" + i + \"]\", new Localized(Lang.ENGLISH, \"Role is not active: \" + role)));\n            } catch (ItemNotFoundException e) {\n                messages.add(new Message(user.getUserId(), \"error\", \"roles[\" + i + \"]\", new Localized(Lang.ENGLISH, \"Role does not exist: \" + role)));\n            }\n        }\n    }\n    return messages;\n}"
      },
      {
        "name": "validateMailingAddress",
        "description": "helper method for validating an address\n@param address\n@param messages\n@param identifier\n@param prefix",
        "modifiers": ["private"],
        "parameters": [
          {
            "name": "address",
            "type": "MailingAddress"
          },
          {
            "name": "messages",
            "type": {
              "class": "List",
              "generics": ["Message"]
            }
          },
          {
            "name": "identifier",
            "type": "Identifier"
          },
          {
            "name": "prefix",
            "type": "String"
          }
        ],
        "body": "{\n    // Street\n    if (StringUtils.isBlank(address.getStreet())) {\n        messages.add(new Message(identifier, \"error\", prefix + \".street\", new Localized(Lang.ENGLISH, \"Street address is mandatory\")));\n    } else if (address.getStreet().length() > 60) {\n        messages.add(new Message(identifier, \"error\", prefix + \".street\", new Localized(Lang.ENGLISH, \"Street must be 60 characters or less\")));\n    }\n    // City\n    if (StringUtils.isBlank(address.getCity())) {\n        messages.add(new Message(identifier, \"error\", prefix + \".city\", new Localized(Lang.ENGLISH, \"City is mandatory\")));\n    } else if (address.getCity().length() > 60) {\n        messages.add(new Message(identifier, \"error\", prefix + \".city\", new Localized(Lang.ENGLISH, \"City must be 60 characters or less\")));\n    }\n    // Province\n    if (StringUtils.isBlank(address.getProvince())) {\n        messages.add(new Message(identifier, \"error\", prefix + \".province\", new Localized(Lang.ENGLISH, \"Province is mandatory\")));\n    } else if (address.getCountry() == null) {\n        messages.add(new Message(identifier, \"error\", prefix + \".province\", new Localized(Lang.ENGLISH, \"Province is forbidden unless there is a country\")));\n    }\n    // Country\n    if (address.getCountry() == null) {\n        messages.add(new Message(identifier, \"error\", prefix + \".country\", new Localized(Lang.ENGLISH, \"Country is mandatory\")));\n    } else {\n        try {\n            crm.findCountryByCode(address.getCountry());\n        } catch (ItemNotFoundException e) {\n            messages.add(new Message(identifier, \"error\", prefix + \".country\", new Localized(Lang.ENGLISH, \"Country code is not in the lookup\")));\n        }\n    }\n    // Postal Code\n    if (StringUtils.isNotBlank(address.getPostalCode())) {\n        if (address.getCountry() != null && crm.findCountryByCode(address.getCountry()).getCode().equals(\"CA\")) {\n            if (!address.getPostalCode().matches(\"[A-Z][0-9][A-Z] ?[0-9][A-Z][0-9]\")) {\n                messages.add(new Message(identifier, \"error\", prefix + \".provinceCode\", new Localized(Lang.ENGLISH, \"Canadian province format is invalid\")));\n            }\n        }\n    }\n}"
      },
      {
        "name": "validatePersonName",
        "modifiers": ["private"],
        "parameters": [
          {
            "name": "name",
            "type": "PersonName"
          },
          {
            "name": "messages",
            "type": {
              "class": "List",
              "generics": ["Message"]
            }
          },
          {
            "name": "identifier",
            "type": "Identifier"
          },
          {
            "name": "prefix",
            "type": "String"
          }
        ],
        "body": "{\n    // Salutation\n    if (StringUtils.isNotBlank(name.getSalutation())) {\n        try {\n            crm.findSalutationByCode(name.getSalutation());\n        } catch (ItemNotFoundException e) {\n            messages.add(new Message(identifier, \"error\", prefix + \".salutation\", new Localized(Lang.ENGLISH, \"Salutation code is not in the lookup\")));\n        }\n    }\n    // First Name\n    if (StringUtils.isBlank(name.getFirstName())) {\n        messages.add(new Message(identifier, \"error\", prefix + \".firstName\", new Localized(Lang.ENGLISH, \"First name is required\")));\n    } else if (name.getFirstName().length() > 60) {\n        messages.add(new Message(identifier, \"error\", prefix + \".firstName\", new Localized(Lang.ENGLISH, \"First name must be 60 characters or less\")));\n    }\n    // Middle Name\n    if (name.getFirstName().length() > 30) {\n        messages.add(new Message(identifier, \"error\", prefix + \".middleName\", new Localized(Lang.ENGLISH, \"Middle name must be 60 characters or less\")));\n    }\n    // Last Name\n    if (StringUtils.isBlank(name.getFirstName())) {\n        messages.add(new Message(identifier, \"error\", prefix + \".lastName\", new Localized(Lang.ENGLISH, \"Last name is required\")));\n    } else if (name.getFirstName().length() > 60) {\n        messages.add(new Message(identifier, \"error\", prefix + \".lastName\", new Localized(Lang.ENGLISH, \"Last name must be 60 characters or less\")));\n    }\n}"
      },
      {
        "name": "validate",
        "modifiers": ["public"],
        "type": {
          "class": "List",
          "generics": ["Message"]
        },
        "exceptions": ["BadRequestException"],
        "parameters": [
          {
            "name": "roles",
            "type": {
              "class": "List",
              "generics": ["String"]
            }
          },
          {
            "name": "personId",
            "type": "Identifier"
          }
        ],
        "body": "{\n    List<Message> messages = new ArrayList<Message>();\n    for (String role : roles) {\n        try {\n        // lookups.findRoleByCode(role);\n        } catch (ItemNotFoundException e) {\n            messages.add(new Message(personId, \"error\", \"roles('\" + role + \"')\", new Localized(Lang.ENGLISH, \"Role does not exist\")));\n        }\n    }\n    return messages;\n}"
      }
    ]
  }
}
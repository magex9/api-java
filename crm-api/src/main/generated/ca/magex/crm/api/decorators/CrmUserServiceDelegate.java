package ca.magex.crm.api.decorators;

/**
 * AUTO-GENERATED: This file is auto-generated by ca.magex.json.javadoc.JavadocDelegationBuilder
 * 
 * Logging and delegate decorators for the CRM services and policies
 * 
 * This delegate may be extended so that implementations can be kept clean if they don't need to implement every single field.
 * 
 * @author magex
 */
public class CrmUserServiceDelegate implements ca.magex.crm.api.services.CrmUserService {
	
	private ca.magex.crm.api.services.CrmUserService delegate;
	
	public CrmUserServiceDelegate(ca.magex.crm.api.services.CrmUserService delegate) {
		this.delegate = delegate;
	}
	
	@Override
	public ca.magex.crm.api.roles.User prototypeUser(ca.magex.crm.api.system.Identifier personId, String username, java.util.List<String> roles) {
		return delegate.prototypeUser(personId, username, roles);
	}
	
	@Override
	public ca.magex.crm.api.roles.User createUser(ca.magex.crm.api.roles.User prototype) {
		return delegate.createUser(prototype);
	}
	
	@Override
	public ca.magex.crm.api.roles.User createUser(ca.magex.crm.api.system.Identifier personId, String username, java.util.List<String> roles) {
		return delegate.createUser(personId, username, roles);
	}
	
	@Override
	public ca.magex.crm.api.roles.User enableUser(ca.magex.crm.api.system.Identifier userId) {
		return delegate.enableUser(userId);
	}
	
	@Override
	public ca.magex.crm.api.roles.User disableUser(ca.magex.crm.api.system.Identifier userId) {
		return delegate.disableUser(userId);
	}
	
	@Override
	public ca.magex.crm.api.roles.User updateUserRoles(ca.magex.crm.api.system.Identifier userId, java.util.List<String> roles) {
		return delegate.updateUserRoles(userId, roles);
	}
	
	@Override
	public boolean changePassword(ca.magex.crm.api.system.Identifier userId, String currentPassword, String newPassword) {
		return delegate.changePassword(userId, currentPassword, newPassword);
	}
	
	@Override
	public String resetPassword(ca.magex.crm.api.system.Identifier userId) {
		return delegate.resetPassword(userId);
	}
	
	@Override
	public ca.magex.crm.api.roles.User findUser(ca.magex.crm.api.system.Identifier userId) {
		return delegate.findUser(userId);
	}
	
	@Override
	public ca.magex.crm.api.roles.User findUserByUsername(String username) {
		return delegate.findUserByUsername(username);
	}
	
	@Override
	public long countUsers(ca.magex.crm.api.filters.UsersFilter filter) {
		return delegate.countUsers(filter);
	}
	
	@Override
	public ca.magex.crm.api.system.FilteredPage<ca.magex.crm.api.roles.User> findUsers(ca.magex.crm.api.filters.UsersFilter filter, ca.magex.crm.api.filters.Paging paging) {
		return delegate.findUsers(filter, paging);
	}
	
	@Override
	public boolean isValidPasswordFormat(String password) {
		return delegate.isValidPasswordFormat(password);
	}
	
	@Override
	public ca.magex.crm.api.system.FilteredPage<ca.magex.crm.api.roles.User> findUsers(ca.magex.crm.api.filters.UsersFilter filter) {
		return delegate.findUsers(filter);
	}
	
	@Override
	public ca.magex.crm.api.system.FilteredPage<ca.magex.crm.api.roles.User> findActiveUserForOrg(ca.magex.crm.api.system.Identifier organizationId) {
		return delegate.findActiveUserForOrg(organizationId);
	}
	
	@Override
	public ca.magex.crm.api.filters.UsersFilter defaultUsersFilter() {
		return delegate.defaultUsersFilter();
	}
	
	@Override
	public ca.magex.crm.api.filters.Paging defaultUsersPaging() {
		return delegate.defaultUsersPaging();
	}
	
}

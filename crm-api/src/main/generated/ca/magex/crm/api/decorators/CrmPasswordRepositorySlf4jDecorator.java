package ca.magex.crm.api.decorators;

/**
 * AUTO-GENERATED: This file is auto-generated by ca.magex.json.javadoc.JavadocInterfaceAdapterBuilder
 * 
 * Logging and delegate decorators for the CRM services and policies
 * 
 * This class enables to you to inject nicely formatted slf4j logging onto any class you want.
 * <dl>
 *     <dd>TRACE</dd><dt>Log the method call with parameters including the result and execution time.</dt>
 *     <dd>DEBUG</dd><dt>Log the method call with parameters with the execution time.</dt>
 *     <dd>INFO</dd><dt>Log the method call with parameters.</dt>
 *     <dd>WARNING</dd><dt>No logging</dt>
 *     <dd>ERROR</dd><dt>No logging</dt>
 * </dl>
 * 
 * @author magex
 */
public class CrmPasswordRepositorySlf4jDecorator implements ca.magex.crm.api.authentication.CrmPasswordRepository {
	
	private ca.magex.crm.api.authentication.CrmPasswordRepository delegate;
	
	private org.slf4j.Logger logger;
	
	public CrmPasswordRepositorySlf4jDecorator(ca.magex.crm.api.authentication.CrmPasswordRepository delegate, org.slf4j.Logger logger) {
		this.delegate = delegate;
		this.logger = logger;
	}
	
	@Override
	public String getEncodedPassword(String username) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling getEncodedPassword(" + username + ")");
				String result = delegate.getEncodedPassword(username);
				logger.trace("Executed getEncodedPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + result.getClass() + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on getEncodedPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling getEncodedPassword(" + username + ")");
				String result = delegate.getEncodedPassword(username);
				logger.debug("Executed getEncodedPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on getEncodedPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling getEncodedPassword(" + username + ")");
			return delegate.getEncodedPassword(username);
		}
		else {
			return delegate.getEncodedPassword(username);
		}
	}
	
	@Override
	public boolean isTempPassword(String username) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling isTempPassword(" + username + ")");
				boolean result = delegate.isTempPassword(username);
				logger.trace("Executed isTempPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + "returnType" + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on isTempPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling isTempPassword(" + username + ")");
				boolean result = delegate.isTempPassword(username);
				logger.debug("Executed isTempPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on isTempPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling isTempPassword(" + username + ")");
			return delegate.isTempPassword(username);
		}
		else {
			return delegate.isTempPassword(username);
		}
	}
	
	@Override
	public boolean isExpiredPassword(String username) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling isExpiredPassword(" + username + ")");
				boolean result = delegate.isExpiredPassword(username);
				logger.trace("Executed isExpiredPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + "returnType" + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on isExpiredPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling isExpiredPassword(" + username + ")");
				boolean result = delegate.isExpiredPassword(username);
				logger.debug("Executed isExpiredPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on isExpiredPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling isExpiredPassword(" + username + ")");
			return delegate.isExpiredPassword(username);
		}
		else {
			return delegate.isExpiredPassword(username);
		}
	}
	
	@Override
	public boolean verifyPassword(String username, String rawPassword) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling verifyPassword(" + username + ", " + rawPassword + ")");
				boolean result = delegate.verifyPassword(username, rawPassword);
				logger.trace("Executed verifyPassword(" + username + ", " + rawPassword + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + "returnType" + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on verifyPassword(" + username + ", " + rawPassword + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling verifyPassword(" + username + ", " + rawPassword + ")");
				boolean result = delegate.verifyPassword(username, rawPassword);
				logger.debug("Executed verifyPassword(" + username + ", " + rawPassword + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on verifyPassword(" + username + ", " + rawPassword + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling verifyPassword(" + username + ", " + rawPassword + ")");
			return delegate.verifyPassword(username, rawPassword);
		}
		else {
			return delegate.verifyPassword(username, rawPassword);
		}
	}
	
	@Override
	public String generateTemporaryPassword(String username) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling generateTemporaryPassword(" + username + ")");
				String result = delegate.generateTemporaryPassword(username);
				logger.trace("Executed generateTemporaryPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + result.getClass() + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on generateTemporaryPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling generateTemporaryPassword(" + username + ")");
				String result = delegate.generateTemporaryPassword(username);
				logger.debug("Executed generateTemporaryPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on generateTemporaryPassword(" + username + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling generateTemporaryPassword(" + username + ")");
			return delegate.generateTemporaryPassword(username);
		}
		else {
			return delegate.generateTemporaryPassword(username);
		}
	}
	
	@Override
	public void updatePassword(String username, String encodedPassword) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling updatePassword(" + username + ", " + encodedPassword + ")");
				delegate.updatePassword(username, encodedPassword);
				logger.trace("Executed updatePassword(" + username + ", " + encodedPassword + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.trace("Exception on updatePassword(" + username + ", " + encodedPassword + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling updatePassword(" + username + ", " + encodedPassword + ")");
				delegate.updatePassword(username, encodedPassword);
				logger.debug("Executed updatePassword(" + username + ", " + encodedPassword + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.debug("Exception on updatePassword(" + username + ", " + encodedPassword + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling updatePassword(" + username + ", " + encodedPassword + ")");
			delegate.updatePassword(username, encodedPassword);
		}
		else {
			delegate.updatePassword(username, encodedPassword);
		}
	}
	
	@Override
	public String encodePassword(String rawPassword) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling encodePassword(" + rawPassword + ")");
				String result = delegate.encodePassword(rawPassword);
				logger.trace("Executed encodePassword(" + rawPassword + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + result.getClass() + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on encodePassword(" + rawPassword + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling encodePassword(" + rawPassword + ")");
				String result = delegate.encodePassword(rawPassword);
				logger.debug("Executed encodePassword(" + rawPassword + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on encodePassword(" + rawPassword + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling encodePassword(" + rawPassword + ")");
			return delegate.encodePassword(rawPassword);
		}
		else {
			return delegate.encodePassword(rawPassword);
		}
	}
	
}

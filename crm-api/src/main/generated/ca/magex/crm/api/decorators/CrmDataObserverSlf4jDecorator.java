package ca.magex.crm.api.decorators;

/**
 * AUTO-GENERATED: This file is auto-generated by ca.magex.json.javadoc.JavadocInterfaceAdapterBuilder
 * 
 * Logging and delegate decorators for the CRM services and policies
 * 
 * This class enables to you to inject nicely formatted slf4j logging onto any class you want.
 * <dl>
 *     <dd>TRACE</dd><dt>Log the method call with parameters including the result and execution time.</dt>
 *     <dd>DEBUG</dd><dt>Log the method call with parameters with the execution time.</dt>
 *     <dd>INFO</dd><dt>Log the method call with parameters.</dt>
 *     <dd>WARNING</dd><dt>No logging</dt>
 *     <dd>ERROR</dd><dt>No logging</dt>
 * </dl>
 * 
 * @author magex
 */
public class CrmDataObserverSlf4jDecorator implements ca.magex.crm.api.observer.CrmDataObserver {
	
	private ca.magex.crm.api.observer.CrmDataObserver delegate;
	
	private org.slf4j.Logger logger;
	
	public CrmDataObserverSlf4jDecorator(ca.magex.crm.api.observer.CrmDataObserver delegate, org.slf4j.Logger logger) {
		this.delegate = delegate;
		this.logger = logger;
	}
	
	@Override
	public CrmDataObserver groupUpdate(Long timestamp, String groupCode) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling groupUpdate(" + timestamp + ", " + groupCode + ")");
				CrmDataObserver result = delegate.groupUpdate(timestamp, groupCode);
				logger.trace("Executed groupUpdate(" + timestamp + ", " + groupCode + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + result.getClass() + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on groupUpdate(" + timestamp + ", " + groupCode + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling groupUpdate(" + timestamp + ", " + groupCode + ")");
				CrmDataObserver result = delegate.groupUpdate(timestamp, groupCode);
				logger.debug("Executed groupUpdate(" + timestamp + ", " + groupCode + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on groupUpdate(" + timestamp + ", " + groupCode + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling groupUpdate(" + timestamp + ", " + groupCode + ")");
			return delegate.groupUpdate(timestamp, groupCode);
		}
		else {
			return delegate.groupUpdate(timestamp, groupCode);
		}
	}
	
	@Override
	public CrmDataObserver roleUpdate(Long timestamp, String roleCode) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling roleUpdate(" + timestamp + ", " + roleCode + ")");
				CrmDataObserver result = delegate.roleUpdate(timestamp, roleCode);
				logger.trace("Executed roleUpdate(" + timestamp + ", " + roleCode + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + result.getClass() + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on roleUpdate(" + timestamp + ", " + roleCode + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling roleUpdate(" + timestamp + ", " + roleCode + ")");
				CrmDataObserver result = delegate.roleUpdate(timestamp, roleCode);
				logger.debug("Executed roleUpdate(" + timestamp + ", " + roleCode + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on roleUpdate(" + timestamp + ", " + roleCode + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling roleUpdate(" + timestamp + ", " + roleCode + ")");
			return delegate.roleUpdate(timestamp, roleCode);
		}
		else {
			return delegate.roleUpdate(timestamp, roleCode);
		}
	}
	
	@Override
	public CrmDataObserver organizationUpdate(Long timestamp, ca.magex.crm.api.system.Identifier organizationId) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling organizationUpdate(" + timestamp + ", " + organizationId + ")");
				CrmDataObserver result = delegate.organizationUpdate(timestamp, organizationId);
				logger.trace("Executed organizationUpdate(" + timestamp + ", " + organizationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + result.getClass() + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on organizationUpdate(" + timestamp + ", " + organizationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling organizationUpdate(" + timestamp + ", " + organizationId + ")");
				CrmDataObserver result = delegate.organizationUpdate(timestamp, organizationId);
				logger.debug("Executed organizationUpdate(" + timestamp + ", " + organizationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on organizationUpdate(" + timestamp + ", " + organizationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling organizationUpdate(" + timestamp + ", " + organizationId + ")");
			return delegate.organizationUpdate(timestamp, organizationId);
		}
		else {
			return delegate.organizationUpdate(timestamp, organizationId);
		}
	}
	
	@Override
	public CrmDataObserver locationUpdate(Long timestamp, ca.magex.crm.api.system.Identifier locationId) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling locationUpdate(" + timestamp + ", " + locationId + ")");
				CrmDataObserver result = delegate.locationUpdate(timestamp, locationId);
				logger.trace("Executed locationUpdate(" + timestamp + ", " + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + result.getClass() + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on locationUpdate(" + timestamp + ", " + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling locationUpdate(" + timestamp + ", " + locationId + ")");
				CrmDataObserver result = delegate.locationUpdate(timestamp, locationId);
				logger.debug("Executed locationUpdate(" + timestamp + ", " + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on locationUpdate(" + timestamp + ", " + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling locationUpdate(" + timestamp + ", " + locationId + ")");
			return delegate.locationUpdate(timestamp, locationId);
		}
		else {
			return delegate.locationUpdate(timestamp, locationId);
		}
	}
	
	@Override
	public CrmDataObserver personUpdate(Long timestamp, ca.magex.crm.api.system.Identifier personId) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling personUpdate(" + timestamp + ", " + personId + ")");
				CrmDataObserver result = delegate.personUpdate(timestamp, personId);
				logger.trace("Executed personUpdate(" + timestamp + ", " + personId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + result.getClass() + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on personUpdate(" + timestamp + ", " + personId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling personUpdate(" + timestamp + ", " + personId + ")");
				CrmDataObserver result = delegate.personUpdate(timestamp, personId);
				logger.debug("Executed personUpdate(" + timestamp + ", " + personId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on personUpdate(" + timestamp + ", " + personId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling personUpdate(" + timestamp + ", " + personId + ")");
			return delegate.personUpdate(timestamp, personId);
		}
		else {
			return delegate.personUpdate(timestamp, personId);
		}
	}
	
}

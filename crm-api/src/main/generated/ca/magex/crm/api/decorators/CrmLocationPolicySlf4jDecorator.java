package ca.magex.crm.api.decorators;

/**
 * AUTO-GENERATED: This file is auto-generated by ca.magex.json.javadoc.JavadocInterfaceAdapterBuilder
 * 
 * Logging and delegate decorators for the CRM services and policies
 * 
 * This class enables to you to inject nicely formatted slf4j logging onto any class you want.
 * <dl>
 *     <dd>TRACE</dd><dt>Log the method call with parameters including the result and execution time.</dt>
 *     <dd>DEBUG</dd><dt>Log the method call with parameters with the execution time.</dt>
 *     <dd>INFO</dd><dt>Log the method call with parameters.</dt>
 *     <dd>WARNING</dd><dt>No logging</dt>
 *     <dd>ERROR</dd><dt>No logging</dt>
 * </dl>
 * 
 * @author magex
 */
public class CrmLocationPolicySlf4jDecorator implements ca.magex.crm.api.policies.CrmLocationPolicy {
	
	private ca.magex.crm.api.policies.CrmLocationPolicy delegate;
	
	private org.slf4j.Logger logger;
	
	public CrmLocationPolicySlf4jDecorator(ca.magex.crm.api.policies.CrmLocationPolicy delegate, org.slf4j.Logger logger) {
		this.delegate = delegate;
		this.logger = logger;
	}
	
	@Override
	public boolean canCreateLocationForOrganization(ca.magex.crm.api.system.Identifier organizationId) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling canCreateLocationForOrganization(" + organizationId + ")");
				boolean result = delegate.canCreateLocationForOrganization(organizationId);
				logger.trace("Executed canCreateLocationForOrganization(" + organizationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + "returnType" + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on canCreateLocationForOrganization(" + organizationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling canCreateLocationForOrganization(" + organizationId + ")");
				boolean result = delegate.canCreateLocationForOrganization(organizationId);
				logger.debug("Executed canCreateLocationForOrganization(" + organizationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on canCreateLocationForOrganization(" + organizationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling canCreateLocationForOrganization(" + organizationId + ")");
			return delegate.canCreateLocationForOrganization(organizationId);
		}
		else {
			return delegate.canCreateLocationForOrganization(organizationId);
		}
	}
	
	@Override
	public boolean canViewLocation(ca.magex.crm.api.system.Identifier locationId) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling canViewLocation(" + locationId + ")");
				boolean result = delegate.canViewLocation(locationId);
				logger.trace("Executed canViewLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + "returnType" + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on canViewLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling canViewLocation(" + locationId + ")");
				boolean result = delegate.canViewLocation(locationId);
				logger.debug("Executed canViewLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on canViewLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling canViewLocation(" + locationId + ")");
			return delegate.canViewLocation(locationId);
		}
		else {
			return delegate.canViewLocation(locationId);
		}
	}
	
	@Override
	public boolean canUpdateLocation(ca.magex.crm.api.system.Identifier locationId) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling canUpdateLocation(" + locationId + ")");
				boolean result = delegate.canUpdateLocation(locationId);
				logger.trace("Executed canUpdateLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + "returnType" + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on canUpdateLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling canUpdateLocation(" + locationId + ")");
				boolean result = delegate.canUpdateLocation(locationId);
				logger.debug("Executed canUpdateLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on canUpdateLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling canUpdateLocation(" + locationId + ")");
			return delegate.canUpdateLocation(locationId);
		}
		else {
			return delegate.canUpdateLocation(locationId);
		}
	}
	
	@Override
	public boolean canEnableLocation(ca.magex.crm.api.system.Identifier locationId) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling canEnableLocation(" + locationId + ")");
				boolean result = delegate.canEnableLocation(locationId);
				logger.trace("Executed canEnableLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + "returnType" + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on canEnableLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling canEnableLocation(" + locationId + ")");
				boolean result = delegate.canEnableLocation(locationId);
				logger.debug("Executed canEnableLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on canEnableLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling canEnableLocation(" + locationId + ")");
			return delegate.canEnableLocation(locationId);
		}
		else {
			return delegate.canEnableLocation(locationId);
		}
	}
	
	@Override
	public boolean canDisableLocation(ca.magex.crm.api.system.Identifier locationId) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling canDisableLocation(" + locationId + ")");
				boolean result = delegate.canDisableLocation(locationId);
				logger.trace("Executed canDisableLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + "returnType" + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on canDisableLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling canDisableLocation(" + locationId + ")");
				boolean result = delegate.canDisableLocation(locationId);
				logger.debug("Executed canDisableLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on canDisableLocation(" + locationId + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling canDisableLocation(" + locationId + ")");
			return delegate.canDisableLocation(locationId);
		}
		else {
			return delegate.canDisableLocation(locationId);
		}
	}
	
}

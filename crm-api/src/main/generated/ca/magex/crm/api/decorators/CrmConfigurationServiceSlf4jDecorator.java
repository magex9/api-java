package ca.magex.crm.api.decorators;

/**
 * AUTO-GENERATED: This file is auto-generated by ca.magex.json.javadoc.JavadocInterfaceAdapterBuilder
 * 
 * Logging and delegate decorators for the CRM services and policies
 * 
 * This class enables to you to inject nicely formatted slf4j logging onto any class you want.
 * <dl>
 *     <dd>TRACE</dd><dt>Log the method call with parameters including the result and execution time.</dt>
 *     <dd>DEBUG</dd><dt>Log the method call with parameters with the execution time.</dt>
 *     <dd>INFO</dd><dt>Log the method call with parameters.</dt>
 *     <dd>WARNING</dd><dt>No logging</dt>
 *     <dd>ERROR</dd><dt>No logging</dt>
 * </dl>
 * 
 * @author magex
 */
public class CrmConfigurationServiceSlf4jDecorator implements ca.magex.crm.api.services.CrmConfigurationService {
	
	private ca.magex.crm.api.services.CrmConfigurationService delegate;
	
	private org.slf4j.Logger logger;
	
	public CrmConfigurationServiceSlf4jDecorator(ca.magex.crm.api.services.CrmConfigurationService delegate, org.slf4j.Logger logger) {
		this.delegate = delegate;
		this.logger = logger;
	}
	
	@Override
	public boolean isInitialized() {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling isInitialized()");
				boolean result = delegate.isInitialized();
				logger.trace("Executed isInitialized() in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + "returnType" + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on isInitialized() in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling isInitialized()");
				boolean result = delegate.isInitialized();
				logger.debug("Executed isInitialized() in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on isInitialized() in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling isInitialized()");
			return delegate.isInitialized();
		}
		else {
			return delegate.isInitialized();
		}
	}
	
	@Override
	public ca.magex.crm.api.roles.User initializeSystem(String organization, ca.magex.crm.api.common.PersonName name, String email, String username, String password) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling initializeSystem(" + organization + ", " + name + ", " + email + ", " + username + ", " + password + ")");
				ca.magex.crm.api.roles.User result = delegate.initializeSystem(organization, name, email, username, password);
				logger.trace("Executed initializeSystem(" + organization + ", " + name + ", " + email + ", " + username + ", " + password + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + "returnType" + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on initializeSystem(" + organization + ", " + name + ", " + email + ", " + username + ", " + password + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling initializeSystem(" + organization + ", " + name + ", " + email + ", " + username + ", " + password + ")");
				ca.magex.crm.api.roles.User result = delegate.initializeSystem(organization, name, email, username, password);
				logger.debug("Executed initializeSystem(" + organization + ", " + name + ", " + email + ", " + username + ", " + password + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on initializeSystem(" + organization + ", " + name + ", " + email + ", " + username + ", " + password + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling initializeSystem(" + organization + ", " + name + ", " + email + ", " + username + ", " + password + ")");
			return delegate.initializeSystem(organization, name, email, username, password);
		}
		else {
			return delegate.initializeSystem(organization, name, email, username, password);
		}
	}
	
	@Override
	public boolean reset() {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling reset()");
				boolean result = delegate.reset();
				logger.trace("Executed reset() in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + "returnType" + ": " + result + ").");
				return result;
			}
			catch (Exception e) {
				logger.trace("Exception on reset() in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling reset()");
				boolean result = delegate.reset();
				logger.debug("Executed reset() in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return result;
			}
			catch (Exception e) {
				logger.debug("Exception on reset() in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling reset()");
			return delegate.reset();
		}
		else {
			return delegate.reset();
		}
	}
	
	@Override
	public void dump(java.io.OutputStream os) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling dump(" + os + ")");
				delegate.dump(os);
				logger.trace("Executed dump(" + os + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.trace("Exception on dump(" + os + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling dump(" + os + ")");
				delegate.dump(os);
				logger.debug("Executed dump(" + os + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.debug("Exception on dump(" + os + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling dump(" + os + ")");
			delegate.dump(os);
		}
		else {
			delegate.dump(os);
		}
	}
	
	@Override
	public void initialize(ca.magex.crm.api.repositories.CrmRepositories repos) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling initialize(" + repos + ")");
				delegate.initialize(repos);
				logger.trace("Executed initialize(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.trace("Exception on initialize(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling initialize(" + repos + ")");
				delegate.initialize(repos);
				logger.debug("Executed initialize(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.debug("Exception on initialize(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling initialize(" + repos + ")");
			delegate.initialize(repos);
		}
		else {
			delegate.initialize(repos);
		}
	}
	
	@Override
	public void createSysGroup(ca.magex.crm.api.repositories.CrmRepositories repos) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling createSysGroup(" + repos + ")");
				delegate.createSysGroup(repos);
				logger.trace("Executed createSysGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.trace("Exception on createSysGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling createSysGroup(" + repos + ")");
				delegate.createSysGroup(repos);
				logger.debug("Executed createSysGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.debug("Exception on createSysGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling createSysGroup(" + repos + ")");
			delegate.createSysGroup(repos);
		}
		else {
			delegate.createSysGroup(repos);
		}
	}
	
	@Override
	public void createAppGroup(ca.magex.crm.api.repositories.CrmRepositories repos) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling createAppGroup(" + repos + ")");
				delegate.createAppGroup(repos);
				logger.trace("Executed createAppGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.trace("Exception on createAppGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling createAppGroup(" + repos + ")");
				delegate.createAppGroup(repos);
				logger.debug("Executed createAppGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.debug("Exception on createAppGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling createAppGroup(" + repos + ")");
			delegate.createAppGroup(repos);
		}
		else {
			delegate.createAppGroup(repos);
		}
	}
	
	@Override
	public void createCrmGroup(ca.magex.crm.api.repositories.CrmRepositories repos) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling createCrmGroup(" + repos + ")");
				delegate.createCrmGroup(repos);
				logger.trace("Executed createCrmGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.trace("Exception on createCrmGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling createCrmGroup(" + repos + ")");
				delegate.createCrmGroup(repos);
				logger.debug("Executed createCrmGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.debug("Exception on createCrmGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling createCrmGroup(" + repos + ")");
			delegate.createCrmGroup(repos);
		}
		else {
			delegate.createCrmGroup(repos);
		}
	}
	
	@Override
	public void createOrgGroup(ca.magex.crm.api.repositories.CrmRepositories repos) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling createOrgGroup(" + repos + ")");
				delegate.createOrgGroup(repos);
				logger.trace("Executed createOrgGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.trace("Exception on createOrgGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling createOrgGroup(" + repos + ")");
				delegate.createOrgGroup(repos);
				logger.debug("Executed createOrgGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.debug("Exception on createOrgGroup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling createOrgGroup(" + repos + ")");
			delegate.createOrgGroup(repos);
		}
		else {
			delegate.createOrgGroup(repos);
		}
	}
	
	@Override
	public void createStatusLookup(ca.magex.crm.api.repositories.CrmRepositories repos) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling createStatusLookup(" + repos + ")");
				delegate.createStatusLookup(repos);
				logger.trace("Executed createStatusLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.trace("Exception on createStatusLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling createStatusLookup(" + repos + ")");
				delegate.createStatusLookup(repos);
				logger.debug("Executed createStatusLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.debug("Exception on createStatusLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling createStatusLookup(" + repos + ")");
			delegate.createStatusLookup(repos);
		}
		else {
			delegate.createStatusLookup(repos);
		}
	}
	
	@Override
	public void createLocaleLookup(ca.magex.crm.api.repositories.CrmRepositories repos) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling createLocaleLookup(" + repos + ")");
				delegate.createLocaleLookup(repos);
				logger.trace("Executed createLocaleLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.trace("Exception on createLocaleLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling createLocaleLookup(" + repos + ")");
				delegate.createLocaleLookup(repos);
				logger.debug("Executed createLocaleLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.debug("Exception on createLocaleLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling createLocaleLookup(" + repos + ")");
			delegate.createLocaleLookup(repos);
		}
		else {
			delegate.createLocaleLookup(repos);
		}
	}
	
	@Override
	public void createSalutationsLookup(ca.magex.crm.api.repositories.CrmRepositories repos) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling createSalutationsLookup(" + repos + ")");
				delegate.createSalutationsLookup(repos);
				logger.trace("Executed createSalutationsLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.trace("Exception on createSalutationsLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling createSalutationsLookup(" + repos + ")");
				delegate.createSalutationsLookup(repos);
				logger.debug("Executed createSalutationsLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.debug("Exception on createSalutationsLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling createSalutationsLookup(" + repos + ")");
			delegate.createSalutationsLookup(repos);
		}
		else {
			delegate.createSalutationsLookup(repos);
		}
	}
	
	@Override
	public void createCountriesLookup(ca.magex.crm.api.repositories.CrmRepositories repos) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling createCountriesLookup(" + repos + ")");
				delegate.createCountriesLookup(repos);
				logger.trace("Executed createCountriesLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.trace("Exception on createCountriesLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling createCountriesLookup(" + repos + ")");
				delegate.createCountriesLookup(repos);
				logger.debug("Executed createCountriesLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.debug("Exception on createCountriesLookup(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling createCountriesLookup(" + repos + ")");
			delegate.createCountriesLookup(repos);
		}
		else {
			delegate.createCountriesLookup(repos);
		}
	}
	
	@Override
	public void createCanadianProvinces(ca.magex.crm.api.repositories.CrmRepositories repos) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling createCanadianProvinces(" + repos + ")");
				delegate.createCanadianProvinces(repos);
				logger.trace("Executed createCanadianProvinces(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.trace("Exception on createCanadianProvinces(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling createCanadianProvinces(" + repos + ")");
				delegate.createCanadianProvinces(repos);
				logger.debug("Executed createCanadianProvinces(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.debug("Exception on createCanadianProvinces(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling createCanadianProvinces(" + repos + ")");
			delegate.createCanadianProvinces(repos);
		}
		else {
			delegate.createCanadianProvinces(repos);
		}
	}
	
	@Override
	public void createAmericanStates(ca.magex.crm.api.repositories.CrmRepositories repos) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling createAmericanStates(" + repos + ")");
				delegate.createAmericanStates(repos);
				logger.trace("Executed createAmericanStates(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.trace("Exception on createAmericanStates(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling createAmericanStates(" + repos + ")");
				delegate.createAmericanStates(repos);
				logger.debug("Executed createAmericanStates(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.debug("Exception on createAmericanStates(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling createAmericanStates(" + repos + ")");
			delegate.createAmericanStates(repos);
		}
		else {
			delegate.createAmericanStates(repos);
		}
	}
	
	@Override
	public void createMexicanProvinces(ca.magex.crm.api.repositories.CrmRepositories repos) {
		if (logger.isTraceEnabled()) {
			long start = System.nanoTime();
			try {
				logger.trace("Calling createMexicanProvinces(" + repos + ")");
				delegate.createMexicanProvinces(repos);
				logger.trace("Executed createMexicanProvinces(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.trace("Exception on createMexicanProvinces(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isDebugEnabled()) {
			long start = System.nanoTime();
			try {
				logger.debug("Calling createMexicanProvinces(" + repos + ")");
				delegate.createMexicanProvinces(repos);
				logger.debug("Executed createMexicanProvinces(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + ".");
				return;
			}
			catch (Exception e) {
				logger.debug("Exception on createMexicanProvinces(" + repos + ") in " + java.time.Duration.ofNanos(System.nanoTime() - start) + " (" + e.getClass() + ": " + e.getMessage() + ").");
				throw e;
			}
		}
		else if (logger.isInfoEnabled()) {
			logger.info("Calling createMexicanProvinces(" + repos + ")");
			delegate.createMexicanProvinces(repos);
		}
		else {
			delegate.createMexicanProvinces(repos);
		}
	}
	
}

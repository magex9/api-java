{
  "name": "AuthenticatedPersonPolicy",
  "package": "ca.magex.crm.api.policies.authenticated",
  "imports": {
    "CRM_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
    "ORG_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
    "CrmPersonPolicy": "ca.magex.crm.api.policies",
    "BasicPersonPolicy": "ca.magex.crm.api.policies.basic",
    "CrmAuthenticationService": "ca.magex.crm.api.services",
    "CrmOrganizationService": "ca.magex.crm.api.services",
    "CrmPersonService": "ca.magex.crm.api.services",
    "Identifier": "ca.magex.crm.api.system"
  },
  "type": "class",
  "modifiers": ["public"],
  "implements": ["CrmPersonPolicy"],
  "constructors": [{
    "name": "AuthenticatedPersonPolicy",
    "description": "Authenticated Person Policy handles roles and association checks required for policy approval\n\n@param auth\n@param organizations\n@param persons\n@param userService",
    "modifiers": ["public"],
    "parameters": [
      {
        "name": "auth",
        "type": "CrmAuthenticationService"
      },
      {
        "name": "organizations",
        "type": "CrmOrganizationService"
      },
      {
        "name": "persons",
        "type": "CrmPersonService"
      }
    ],
    "body": "{\n    this.auth = auth;\n    this.persons = persons;\n    this.delegate = new BasicPersonPolicy(organizations, persons);\n}"
  }],
  "fields": [
    {
      "name": "auth",
      "modifiers": ["private"],
      "type": "CrmAuthenticationService"
    },
    {
      "name": "delegate",
      "modifiers": ["private"],
      "type": "CrmPersonPolicy"
    },
    {
      "name": "persons",
      "modifiers": ["private"],
      "type": "CrmPersonService"
    }
  ],
  "methods": [
    {
      "name": "canCreatePersonForOrganization",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "organizationId",
        "type": "Identifier"
      }],
      "body": "{\n    if (!delegate.canCreatePersonForOrganization(organizationId)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* if the current user is associated to the organization, then return true if RE Admin */\n    if (auth.getOrganizationId().equals(organizationId)) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user is not associated with the organization */\n    return false;\n}"
    },
    {
      "name": "canViewPerson",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "personId",
        "type": "Identifier"
      }],
      "body": "{\n    if (!delegate.canViewPerson(personId)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure the current user is associated to the organization this person belongs to */\n    return auth.getOrganizationId().equals(persons.findPersonSummary(personId).getOrganizationId());\n}"
    },
    {
      "name": "canUpdatePerson",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "personId",
        "type": "Identifier"
      }],
      "body": "{\n    if (!delegate.canUpdatePerson(personId)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* can always update yourself */\n    if (auth.getPersonId().equals(personId)) {\n        return true;\n    }\n    /* ensure the current user is associated to the organization this person belongs to and they are an RE Admin */\n    if (auth.getOrganizationId().equals(persons.findPersonSummary(personId).getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user is not associated with the organization */\n    return false;\n}"
    },
    {
      "name": "canEnablePerson",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "personId",
        "type": "Identifier"
      }],
      "body": "{\n    if (!delegate.canEnablePerson(personId)) {\n        return false;\n    }\n    /* if the user is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure the current user is associated to the organization this person belongs to and they are an RE Admin */\n    if (auth.getOrganizationId().equals(persons.findPersonSummary(personId).getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user is not associated with the organization */\n    return false;\n}"
    },
    {
      "name": "canDisablePerson",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "personId",
        "type": "Identifier"
      }],
      "body": "{\n    if (!delegate.canDisablePerson(personId)) {\n        return false;\n    }\n    /* cannot disable yourself!! */\n    if (auth.getPersonId().equals(personId)) {\n        return false;\n    }\n    /* if the user is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure the current user is associated to the organization this person belongs to and they are an RE Admin */\n    if (auth.getOrganizationId().equals(persons.findPersonSummary(personId).getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user is not associated with the organization */\n    return false;\n}"
    }
  ]
}
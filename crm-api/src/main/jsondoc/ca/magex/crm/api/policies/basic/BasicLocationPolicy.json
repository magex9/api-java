{
  "name": "BasicLocationPolicy",
  "package": "ca.magex.crm.api.policies.basic",
  "imports": {
    "LocationSummary": "ca.magex.crm.api.crm",
    "OrganizationSummary": "ca.magex.crm.api.crm",
    "ItemNotFoundException": "ca.magex.crm.api.exceptions",
    "CrmLocationPolicy": "ca.magex.crm.api.policies",
    "CrmLocationService": "ca.magex.crm.api.services",
    "CrmOrganizationService": "ca.magex.crm.api.services",
    "Identifier": "ca.magex.crm.api.system",
    "Status": "ca.magex.crm.api.system"
  },
  "type": "class",
  "modifiers": ["public"],
  "implements": ["CrmLocationPolicy"],
  "constructors": [{
    "name": "BasicLocationPolicy",
    "description": "Basic Location Policy handles presence and status checks require for policy approval\n\n@param organizations\n@param locations",
    "modifiers": ["public"],
    "parameters": [
      {
        "name": "organizations",
        "type": "CrmOrganizationService"
      },
      {
        "name": "locations",
        "type": "CrmLocationService"
      }
    ],
    "body": "{\n    this.organizations = organizations;\n    this.locations = locations;\n}"
  }],
  "fields": [
    {
      "name": "organizations",
      "modifiers": ["private"],
      "type": "CrmOrganizationService"
    },
    {
      "name": "locations",
      "modifiers": ["private"],
      "type": "CrmLocationService"
    }
  ],
  "methods": [
    {
      "name": "canCreateLocationForOrganization",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "organizationId",
        "type": "Identifier"
      }],
      "body": "{\n    /* can only create a location for the organization, if the organization exists, and is active */\n    OrganizationSummary summary = organizations.findOrganizationSummary(organizationId);\n    if (summary == null) {\n        throw new ItemNotFoundException(\"Organization ID '\" + organizationId + \"'\");\n    }\n    return summary.getStatus() == Status.ACTIVE;\n}"
    },
    {
      "name": "canViewLocation",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "locationId",
        "type": "Identifier"
      }],
      "body": "{\n    /* can only view a location if it exists */\n    if (locations.findLocationSummary(locationId) == null) {\n        throw new ItemNotFoundException(\"Location ID '\" + locationId + \"'\");\n    }\n    return true;\n}"
    },
    {
      "name": "canUpdateLocation",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "locationId",
        "type": "Identifier"
      }],
      "body": "{\n    /* can only update a location if it exists, and is active */\n    LocationSummary summary = locations.findLocationSummary(locationId);\n    if (summary == null) {\n        throw new ItemNotFoundException(\"Location ID '\" + locationId + \"'\");\n    }\n    return summary.getStatus() == Status.ACTIVE;\n}"
    },
    {
      "name": "canEnableLocation",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "locationId",
        "type": "Identifier"
      }],
      "body": "{\n    /* can only enable a location if it exists */\n    LocationSummary summary = locations.findLocationSummary(locationId);\n    if (summary == null) {\n        throw new ItemNotFoundException(\"Location ID '\" + locationId + \"'\");\n    }\n    return true;\n}"
    },
    {
      "name": "canDisableLocation",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "locationId",
        "type": "Identifier"
      }],
      "body": "{\n    /* can only disable a location if it exists */\n    LocationSummary summary = locations.findLocationSummary(locationId);\n    if (summary == null) {\n        throw new ItemNotFoundException(\"Location ID '\" + locationId + \"'\");\n    }\n    return true;\n}"
    }
  ]
}
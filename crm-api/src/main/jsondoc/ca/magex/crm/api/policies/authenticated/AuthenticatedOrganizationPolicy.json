{
  "name": "AuthenticatedOrganizationPolicy",
  "package": "ca.magex.crm.api.policies.authenticated",
  "imports": {
    "CRM_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
    "ORG_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
    "CrmOrganizationPolicy": "ca.magex.crm.api.policies",
    "BasicOrganizationPolicy": "ca.magex.crm.api.policies.basic",
    "CrmAuthenticationService": "ca.magex.crm.api.services",
    "CrmOrganizationService": "ca.magex.crm.api.services",
    "Identifier": "ca.magex.crm.api.system"
  },
  "type": "class",
  "modifiers": ["public"],
  "implements": ["CrmOrganizationPolicy"],
  "constructors": [{
    "name": "AuthenticatedOrganizationPolicy",
    "description": "Authenticated Organization Policy handles roles and association checks required for policy approval\n\n@param auth\n@param organizations\n@param locationService\n@param userService",
    "modifiers": ["public"],
    "parameters": [
      {
        "name": "auth",
        "type": "CrmAuthenticationService"
      },
      {
        "name": "organizations",
        "type": "CrmOrganizationService"
      }
    ],
    "body": "{\n    this.auth = auth;\n    this.delegate = new BasicOrganizationPolicy(organizations);\n}"
  }],
  "fields": [
    {
      "name": "auth",
      "modifiers": ["private"],
      "type": "CrmAuthenticationService"
    },
    {
      "name": "delegate",
      "modifiers": ["private"],
      "type": "CrmOrganizationPolicy"
    }
  ],
  "methods": [
    {
      "name": "canCreateOrganization",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "body": "{\n    if (!delegate.canCreateOrganization()) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    return auth.isUserInRole(CRM_ADMIN);\n}"
    },
    {
      "name": "canViewOrganization",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "organizationId",
        "type": "Identifier"
      }],
      "body": "{\n    if (!delegate.canViewOrganization(organizationId)) {\n        return false;\n    }\n    /* if the currentUser is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* return true if the person is associated with the organization */\n    return auth.getOrganizationId().equals(organizationId);\n}"
    },
    {
      "name": "canUpdateOrganization",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "organizationId",
        "type": "Identifier"
      }],
      "body": "{\n    if (!delegate.canUpdateOrganization(organizationId)) {\n        return false;\n    }\n    /* if the currentUser is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure the current user is associated with the organization, and return true if they are an RE Admin */\n    if (auth.getOrganizationId().equals(organizationId)) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user is not associated with the organization */\n    return false;\n}"
    },
    {
      "name": "canEnableOrganization",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "organizationId",
        "type": "Identifier"
      }],
      "body": "{\n    if (!delegate.canEnableOrganization(organizationId)) {\n        return false;\n    }\n    /* only CRM_ADMIN can enable an organization */\n    return auth.isUserInRole(CRM_ADMIN);\n}"
    },
    {
      "name": "canDisableOrganization",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "organizationId",
        "type": "Identifier"
      }],
      "body": "{\n    if (!delegate.canDisableOrganization(organizationId)) {\n        return false;\n    }\n    /* only CRM_ADMIN can disable an organization */\n    return auth.isUserInRole(CRM_ADMIN);\n}"
    }
  ]
}
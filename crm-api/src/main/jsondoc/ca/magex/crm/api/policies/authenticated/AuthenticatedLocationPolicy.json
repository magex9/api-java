{
  "name": "AuthenticatedLocationPolicy",
  "package": "ca.magex.crm.api.policies.authenticated",
  "imports": {
    "CRM_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
    "ORG_ADMIN": "ca.magex.crm.api.services.CrmAuthenticationService",
    "CrmLocationPolicy": "ca.magex.crm.api.policies",
    "BasicLocationPolicy": "ca.magex.crm.api.policies.basic",
    "CrmAuthenticationService": "ca.magex.crm.api.services",
    "CrmLocationService": "ca.magex.crm.api.services",
    "CrmOrganizationService": "ca.magex.crm.api.services",
    "Identifier": "ca.magex.crm.api.system"
  },
  "type": "class",
  "modifiers": ["public"],
  "implements": ["CrmLocationPolicy"],
  "constructors": [{
    "name": "AuthenticatedLocationPolicy",
    "description": "Authenticated Location Policy handles roles and association checks required for policy approval\n\n@param auth\n@param organizations\n@param locations\n@param userService",
    "modifiers": ["public"],
    "parameters": [
      {
        "name": "auth",
        "type": "CrmAuthenticationService"
      },
      {
        "name": "organizations",
        "type": "CrmOrganizationService"
      },
      {
        "name": "locations",
        "type": "CrmLocationService"
      }
    ],
    "body": "{\n    this.auth = auth;\n    this.locations = locations;\n    this.delegate = new BasicLocationPolicy(organizations, locations);\n}"
  }],
  "fields": [
    {
      "name": "auth",
      "modifiers": ["private"],
      "type": "CrmAuthenticationService"
    },
    {
      "name": "delegate",
      "modifiers": ["private"],
      "type": "CrmLocationPolicy"
    },
    {
      "name": "locations",
      "modifiers": ["private"],
      "type": "CrmLocationService"
    }
  ],
  "methods": [
    {
      "name": "canCreateLocationForOrganization",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "organizationId",
        "type": "Identifier"
      }],
      "body": "{\n    if (!delegate.canCreateLocationForOrganization(organizationId)) {\n        return false;\n    }\n    /* if the user is a CRM Admin then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* if the current user is associated with the organization, then return true if they are an RE Admin */\n    if (auth.getOrganizationId().equals(organizationId)) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user doesn't belong to the organization that this location is associated with */\n    return false;\n}"
    },
    {
      "name": "canViewLocation",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "locationId",
        "type": "Identifier"
      }],
      "body": "{\n    if (!delegate.canViewLocation(locationId)) {\n        return false;\n    }\n    /* if the user is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure this location is associated with the organization the current user is associated with */\n    return auth.getOrganizationId().equals(locations.findLocationSummary(locationId).getOrganizationId());\n}"
    },
    {
      "name": "canUpdateLocation",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "locationId",
        "type": "Identifier"
      }],
      "body": "{\n    if (!delegate.canUpdateLocation(locationId)) {\n        return false;\n    }\n    /* if the user is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure this location is associated with the organization the current user is associated with, then return true if they are an RE Admin */\n    if (auth.getOrganizationId().equals(locations.findLocationSummary(locationId).getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user doesn't belong to the organization that this location is associated with */\n    return false;\n}"
    },
    {
      "name": "canEnableLocation",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "locationId",
        "type": "Identifier"
      }],
      "body": "{\n    if (!delegate.canEnableLocation(locationId)) {\n        return false;\n    }\n    /* if the user is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure this location is associated with the organization the current user is associated with, then return true if they are an RE Admin */\n    if (auth.getOrganizationId().equals(locations.findLocationSummary(locationId).getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user doesn't belong to the organization that this location is associated with */\n    return false;\n}"
    },
    {
      "name": "canDisableLocation",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "locationId",
        "type": "Identifier"
      }],
      "body": "{\n    if (!delegate.canDisableLocation(locationId)) {\n        return false;\n    }\n    /* if the user is a CRM_ADMIN then return true */\n    if (auth.isUserInRole(CRM_ADMIN)) {\n        return true;\n    }\n    /* ensure this location is associated with the organization the current user is associated with, then return true if they are an RE Admin */\n    if (auth.getOrganizationId().equals(locations.findLocationSummary(locationId).getOrganizationId())) {\n        return auth.isUserInRole(ORG_ADMIN);\n    }\n    /* the current user doesn't belong to the organization that this location is associated with */\n    return false;\n}"
    }
  ]
}
{
  "name": "BasicUserService",
  "package": "ca.magex.crm.api.services.basic",
  "imports": {
    "List": "java.util",
    "CrmPasswordRepository": "ca.magex.crm.api.authentication",
    "Paging": "ca.magex.crm.api.filters",
    "UsersFilter": "ca.magex.crm.api.filters",
    "CrmRepositories": "ca.magex.crm.api.repositories",
    "User": "ca.magex.crm.api.roles",
    "CrmUserService": "ca.magex.crm.api.services",
    "FilteredPage": "ca.magex.crm.api.system",
    "Identifier": "ca.magex.crm.api.system",
    "Status": "ca.magex.crm.api.system"
  },
  "type": "class",
  "modifiers": ["public"],
  "implements": ["CrmUserService"],
  "constructors": [{
    "name": "BasicUserService",
    "modifiers": ["public"],
    "parameters": [
      {
        "name": "repos",
        "type": "CrmRepositories"
      },
      {
        "name": "passwords",
        "type": "CrmPasswordRepository"
      }
    ],
    "body": "{\n    this.repos = repos;\n    this.passwords = passwords;\n}"
  }],
  "fields": [
    {
      "name": "repos",
      "modifiers": ["private"],
      "type": "CrmRepositories"
    },
    {
      "name": "passwords",
      "modifiers": ["private"],
      "type": "CrmPasswordRepository"
    }
  ],
  "methods": [
    {
      "name": "createUser",
      "modifiers": ["public"],
      "type": "User",
      "annotations": [{"name": "Override"}],
      "parameters": [
        {
          "name": "personId",
          "type": "Identifier"
        },
        {
          "name": "username",
          "type": "String"
        },
        {
          "name": "roles",
          "type": {
            "class": "List",
            "generics": ["String"]
          }
        }
      ],
      "body": "{\n    User user = repos.saveUser(new User(repos.generateId(), username, repos.findPersonSummary(personId), Status.ACTIVE, roles));\n    updateUserRoles(user.getUserId(), roles);\n    return user;\n}"
    },
    {
      "name": "enableUser",
      "modifiers": ["public"],
      "type": "User",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "userId",
        "type": "Identifier"
      }],
      "body": "{\n    User user = repos.findUser(userId);\n    if (user == null) {\n        return null;\n    }\n    return repos.saveUser(user.withStatus(Status.ACTIVE));\n}"
    },
    {
      "name": "disableUser",
      "modifiers": ["public"],
      "type": "User",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "userId",
        "type": "Identifier"
      }],
      "body": "{\n    User user = repos.findUser(userId);\n    if (user == null) {\n        return null;\n    }\n    return repos.saveUser(user.withStatus(Status.INACTIVE));\n}"
    },
    {
      "name": "findUser",
      "modifiers": ["public"],
      "type": "User",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "userId",
        "type": "Identifier"
      }],
      "body": "{\n    return repos.findUser(userId);\n}"
    },
    {
      "name": "findUserByUsername",
      "modifiers": ["public"],
      "type": "User",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "username",
        "type": "String"
      }],
      "body": "{\n    return repos.findUsers(defaultUsersFilter().withUsername(username), UsersFilter.getDefaultPaging()).getSingleItem();\n}"
    },
    {
      "name": "updateUserRoles",
      "modifiers": ["public"],
      "type": "User",
      "annotations": [{"name": "Override"}],
      "parameters": [
        {
          "name": "userId",
          "type": "Identifier"
        },
        {
          "name": "roles",
          "type": {
            "class": "List",
            "generics": ["String"]
          }
        }
      ],
      "body": "{\n    User user = repos.findUser(userId);\n    if (user == null) {\n        return null;\n    }\n    return repos.saveUser(user.withRoles(roles));\n}"
    },
    {
      "name": "changePassword",
      "modifiers": ["public"],
      "type": "boolean",
      "annotations": [{"name": "Override"}],
      "parameters": [
        {
          "name": "userId",
          "type": "Identifier"
        },
        {
          "name": "currentPassword",
          "type": "String"
        },
        {
          "name": "newPassword",
          "type": "String"
        }
      ],
      "body": "{\n    if (!isValidPasswordFormat(newPassword))\n        return false;\n    User user = repos.findUser(userId);\n    if (passwords.verifyPassword(user.getUsername(), currentPassword)) {\n        passwords.updatePassword(user.getUsername(), passwords.encodePassword(newPassword));\n        return true;\n    } else {\n        return false;\n    }\n}"
    },
    {
      "name": "resetPassword",
      "modifiers": ["public"],
      "type": "String",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "userId",
        "type": "Identifier"
      }],
      "body": "{\n    return passwords.generateTemporaryPassword(repos.findUser(userId).getUsername());\n}"
    },
    {
      "name": "countUsers",
      "modifiers": ["public"],
      "type": "long",
      "annotations": [{"name": "Override"}],
      "parameters": [{
        "name": "filter",
        "type": "UsersFilter"
      }],
      "body": "{\n    return repos.countUsers(filter);\n}"
    },
    {
      "name": "findUsers",
      "modifiers": ["public"],
      "type": {
        "class": "FilteredPage",
        "generics": ["User"]
      },
      "annotations": [{"name": "Override"}],
      "parameters": [
        {
          "name": "filter",
          "type": "UsersFilter"
        },
        {
          "name": "paging",
          "type": "Paging"
        }
      ],
      "body": "{\n    return repos.findUsers(filter, paging);\n}"
    }
  ]
}
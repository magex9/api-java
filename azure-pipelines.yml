# Build your Java project and run tests with Apache Maven!
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

#Pipeline Configuration
pool:
    vmImage: 'ubuntu-latest'

#variables:
#  - application_name ... application_name variable is defined as a pipeline input variable
#                         To use it in bash , it must be referred as ${APPLICATION_NAME}
variables:
- group: ut-server-info
- name: application_name
  value: crm-helloworld
- name: aks_service_connection_name
  value: 'appdev aks'
- name: application_group
  value: api-java
- name:  artifacts_knownHostsEntry
  value: 'ssh.dev.azure.com,40.82.190.38 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H'
- name:  artifacts_sshPublicKey
  value: 'ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEA3E8vI/k5tiMsIWDw2gKgiQPC9lla637uR6ZZVZRUwxKVoTMnmQxMKEg77YHtKysTo9buo2XWrSW8MjLebvj9o7em4m+fSRRS2I8OptwAy87qXEPTNNKSfYcUmhi5nZSCsDJnQK1RfkGncJ0Ruu4C044087Ots/z8892BpUJHDEQ3GaH9UtSZViRlwO6BGz9JRH2ltchBvU1eyt7M1SBs+7H6LohL2i8d8r8ElPV+EahA+xWBI7DNxOgaaZQmPiAKSJU0H+o8SbTyl3FESOJQH44zPi4rRGzNscKD5urIL0VSR+HF9JnDdaAghMntGWimGeSIOqXclSWJJt80bC/hlw== imported-openssh-key'
- name:  artifacts_sshPassphrase
  value: 'fintraccanafe'
- name:  artifacts_sshKeySecureFile
  value: 'azure-git.key'

resources:
  repositories:
  - repository: "ADLC"  # identifier (A-Z, a-z, 0-9, and underscore)
    type: "git"  # see the following "Type" topic
    name: "ADLC/ADLC"  # repository name (format depends on `type`)
    ref: "refs/heads/azure-pipelines"  # ref name to use; defaults to 'refs/heads/master'
    #endpoint: string  # name of the service connection to use (for types that aren't Azure Repos)

trigger:
      - azure
      - dev
#test
#Stages Configuration (to be ran sequentially)
stages:
- stage: CI
  displayName: Continuous Integration (CI) Build
  jobs:
  - job: Build_apps
    displayName: Build Applications
    steps:
            
    - task: Maven@3
      inputs:
        goals: 'install'
        mavenPomFile: 'crm-helloworld/pom.xml'
        #options: '-Dmaven.test.failure.ignore=true'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx3072m'
      env: { ENVIRONMENT=ut }

    #Build Docker container and push to azure container registry
    - template: azure-build-docker-containers.yml
      parameters:
        environment: 'ut'
        application_group: $(application_group)
        application_name: $(application_name)
        application_version: 1.0.0-SNAPSHOT

    - publish: $(System.DefaultWorkingDirectory)/crm-helloworld/
      artifact: crm-helloworld

    - publish: $(System.DefaultWorkingDirectory)/crm-graphql-spring-boot-server/
      artifact: crm-graphql-spring-boot-server

    - publish: $(System.DefaultWorkingDirectory)/crm-auth-spring-boot-server/
      artifact: crm-auth-spring-boot-server

    - publish: $(System.DefaultWorkingDirectory)/crm-restful-spring-boot-server/
      artifact: crm-restful-spring-boot-server
  

- stage: Continuous_Deployment
  displayName: Continuous Deployment to UT
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/azure'))
  jobs:

    - deployment: Deploy
      displayName: "Deploy Application to UT"
      environment: 'ut'
      strategy:
      # default deployment strategy, more coming...
        runOnce:
          deploy:
            steps: 
            - checkout: "ADLC"  # self represents the repo where the initial Pipelines YAML file was found
              clean: true  # whether to fetch clean each time
              fetchDepth: 1  # the depth of commits to ask Git to fetch
              lfs: false  # whether to download Git-LFS files
              submodules: false  # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules
              path: adlc  # path to check out source code, relative to the agent's build directory (e.g. \_work\1)
              persistCredentials: false  # set to 'true' to leave the OAuth token in the Git config after the initial fetch
      
            #Deploy crm-helloworld
            - template: azure-package-webapp.yml
              parameters:
                environment: 'ut'
                application_name: crm-helloworld
            - template: azure-deploy-webapp.yml
              parameters:
                application_name: crm-helloworld
                sshEndpoint: 'ssh - RD3'

            #Deploy crm-graphql-spring-boot-server
            # - template: azure-package.yml
            #   parameters:
            #     environment: 'ut'
            #     application_name: crm-graphql-spring-boot-server
            # - template: azure-deploy-vm.yml
            #   parameters:
            #     application_name: crm-graphql-spring-boot-server
            #     sshEndpoint: 'ssh - RD3'

            #Deploy crm-restful-spring-boot-server

            # - template: azure-package.yml
            #   parameters:
            #     environment: 'ut'
            #     application_name: crm-restful-spring-boot-server
            
            # - template: azure-deploy-vm.yml
            #   parameters:
            #     application_name: crm-restful-spring-boot-server
            #     sshEndpoint: 'ssh - RD3'

            #Deploy crm-auth-spring-boot-server

            # - template: azure-package.yml
            #   parameters:
            #     environment: 'ut'
            #     application_name: crm-auth-spring-boot-server
                
            # - template: azure-deploy-vm.yml
            #   parameters:
            #     application_name: crm-auth-spring-boot-server
            #     sshEndpoint: 'ssh - RD3'      

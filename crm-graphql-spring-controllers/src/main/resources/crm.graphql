schema {
	query: Query
	mutation: Mutation
}

# Complex Input
input ChoiceInput {
	identifier: String
	other: String
}

input LocalizedInput {
	code: String!
	english: String!
	french: String!
}

input PagingInput {
	pageNumber: Int!
	pageSize: Int!
	sortField: [String]!
	sortOrder: [String]!
}

input MailingAddressInput {
	street: String
	city: String
	province: ChoiceInput
	country: ChoiceInput
	postalCode: String
}

input NameInput {
	firstName: String
	middleName: String
	lastName: String
	salutation: ChoiceInput
}

input CommunicationInput {
	jobTitle: String
	language: ChoiceInput
	email: String
	phoneNumber: String
	phoneExtension: String
	faxNumber: String
}

# Filtering Criteria Input
input OrganizationFilter {
	displayName: String
	status: String
	authenticationGroupId: String
	businessGroupId: String
}

input LocationFilter {
	organizationId: String
	displayName: String
	reference: String
	status: String
}

input PersonFilter {
	organizationId: String
	displayName: String
	status: String
}

input UserFilter {
	organizationId: String
	personId: String
	username: String
	status: String
	authenticationRoleId: String	
}

input OptionFilter {
	parentId: String
	type: String
	status: String
	code: String
	english: String
	french: String
}

type Query {
	# Context queries
	context: Context

	# Option Queries
	findOption(optionId: String!): Option
	countOptions(filter: OptionFilter!): Int!
	findOptions(filter: OptionFilter!, paging: PagingInput!): OptionPage!
	
	# Organization Queries 
	findOrganization(organizationId: String!): Organization	
	countOrganizations(filter: OrganizationFilter!): Int!
	findOrganizations(filter: OrganizationFilter!, paging: PagingInput!): OrganizationPage!
	
	# Location Queries
	findLocation(locationId: String!): Location
	countLocations(filter: LocationFilter!): Int!
	findLocations(filter: LocationFilter!, paging: PagingInput!): LocationPage!
	
	# Person Queries
	findPerson(personId: String!): Person
	countPersons(filter: PersonFilter!): Int!
	findPersons(filter: PersonFilter!, paging: PagingInput!): PersonPage!
	
	# User Queries
	findUser(userId: String!): User
	countUsers(filter: UserFilter!): Int!
	findUsers(filter: UserFilter!, paging: PagingInput!): UserPage!
}

type Mutation {
	# Option Maintenance
	createOption(type: String!, parentId: String, name: LocalizedInput!): Option
	updateOption(optionId: String!, english: String, french: String): Option
	enableOption(optionId: String!): Option
	disableOption(optionId: String!): Option
	
	# Organization Maintenance 
	createOrganization(displayName: String!, authenticationGroupIds: [String]!, businessGroupIds: [String]!): Organization
	updateOrganization(organizationId: String!, displayName: String, mainLocationId: String, mainContactId: String, authenticationGroupIds: [String], businessGroupIds: [String]): Organization
	enableOrganization(organizationId: String!): Organization
	disableOrganization(organizationId: String!): Organization
	
	# Location Maintenance
	createLocation(organizationId: String!, reference: String!, displayName: String!, address: MailingAddressInput!): Location
	updateLocation(locationId: String!, displayName: String, address: MailingAddressInput): Location
	enableLocation(locationId: String!): Location
	disableLocation(locationId: String!): Location
	
	# Person Maintenance
	createPerson(organizationId: String!, displayName: String!, legalName: NameInput!, address: MailingAddressInput!, communication: CommunicationInput!, businessRoleIds: [String]!): Person
	updatePerson(personId: String!, displayName:String, legalName: NameInput, address: MailingAddressInput, communication: CommunicationInput, businessRoleIds: [String]): Person
	enablePerson(personId: String!): Person
	disablePerson(personId: String!): Person
		
	# User Maintenance
	createUser(personId: String!, username: String!, authenticationRoleIds: [String]!): User
	updateUser(userId: String!, authenticationRoleIds: [String]): User
	enableUser(userId: String!): User
	disableUser(userId: String): User
	resetUserPassword(userId: String!): String
	changeUserPassword(userId: String!, currentPassword: String!, newPassword: String!): Boolean
}

# Main Types
type Context {
	currentUser: User
	createOrganization: Boolean!
	createOption: [String]!
}

type Organization {
	organizationId: String!
	status: String!
	displayName: String!
	mainLocation: Location
	mainContact: Person
	authenticationGroups: [Option]!
	businessGroups: [Option]!
	lastModified: Long
	actions: OrganizationActions!
}

type Location {
	locationId: String!
	organization: Organization!
	status: String!
	reference: String
	displayName: String
	address: MailingAddress
	lastModified: Long
	actions: LocationActions!	
}

type Person {
	personId: String!
	organization: Organization!
	status: String!
	displayName: String
	legalName: PersonName
	address: MailingAddress
	communication: Communication
	businessRoles: [Option]!
	lastModified: Long
	actions: PersonActions!
}

type User {
	userId: String!
	organization: Organization!
	person: Person!
	username: String!
	status: String!	
	authenticationRoles: [Option]!
	lastModified: Long
	actions: UserActions!
}

type Option {
	optionId: String!
	parent: Option
	type: String!
	status: String!
	mutable: String!
	name: Localized!
	lastModified: Long
	actions: OptionActions!
}

# Complex Subtypes
type Communication {
	jobTitle: String
	language: Choice
	email: String
	homePhone: Telephone
	faxNumber: String
}

type PersonName {
	firstName: String
	middleName: String
	lastName: String
	salutation: Choice
}

type MailingAddress {
	street: String
	city: String
	province: Choice
	country: Choice
	postalCode: String
}

# Pagination Types
type OrganizationPage {
	number: Int!
	numberOfElements: Int!
	size: Int!
	totalPages: Int!
	totalElements: Int!	
	content: [Organization]	
}

type LocationPage {
	number: Int!
	numberOfElements: Int!
	size: Int!
	totalPages: Int!
	totalElements: Int!	
	content: [Location]	
}

type PersonPage {
	number: Int!
	numberOfElements: Int!
	size: Int!
	totalPages: Int!
	totalElements: Int!	
	content: [Person]
}

type UserPage {
	number: Int!
	numberOfElements: Int!
	size: Int!
	totalPages: Int!
	totalElements: Int!	
	content: [User]
}

type OptionPage {
	number: Int!
	numberOfElements: Int!
	size: Int!
	totalPages: Int!
	totalElements: Int!	
	content: [Option]
}

# Simple Types
type Telephone {
	number: String
	extension: String
}

type Localized {
	code: String
	english: String
	french: String
}

type Choice {
	identifier: String
	other: String
}

type OptionActions {
	update: Boolean!
	enable: Boolean!
	disable: Boolean!
}

type OrganizationActions {
	update: Boolean!
	enable: Boolean!
	disable: Boolean!
	createLocation: Boolean!
	createPerson: Boolean!
}

type LocationActions {
	update: Boolean!
	enable: Boolean!
	disable: Boolean!
}

type PersonActions {
	update: Boolean!
	enable: Boolean!
	disable: Boolean!
	createUser: Boolean!
}

type UserActions {
	update: Boolean!
	enable: Boolean!
	disable: Boolean!
	changePassword: Boolean!
}